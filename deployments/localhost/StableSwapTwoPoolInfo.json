{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "N_COINS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        }
      ],
      "name": "PRECISION_MUL",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "swapPRECISION_MUL",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        }
      ],
      "name": "RATES",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "swapRATES",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256[2]",
          "name": "_balances",
          "type": "uint256[2]"
        }
      ],
      "name": "_xp_mem",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "result",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "swapBalances",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calc_coins_amount",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256[2]",
          "name": "_balances",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "amp",
          "type": "uint256"
        }
      ],
      "name": "get_D_mem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        }
      ],
      "name": "get_add_liquidity_fee",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "liquidityFee",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        }
      ],
      "name": "get_add_liquidity_mint_amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_dx",
          "type": "uint256"
        }
      ],
      "name": "get_dx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "get_exchange_fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exAdminFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        }
      ],
      "name": "get_remove_liquidity_imbalance_fee",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "liquidityFee",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_token_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "get_remove_liquidity_one_coin_fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        }
      ],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x88313cb4559bee3b5fe35a18bc57dc045ab7adb015aa74e626a26d90315243c9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "1754024",
    "logsBloom": "0x
    "blockHash": "0x0e689a92cb5b02d539cd10d25354e60e55ab792141b51b06fb50265b095b5a8e",
    "transactionHash": "0x88313cb4559bee3b5fe35a18bc57dc045ab7adb015aa74e626a26d90315243c9",
    "logs": [],
    "blockNumber": 13,
    "cumulativeGasUsed": "1754024",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c9085358f158263735fdb8c81e9dc0b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N_COINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"PRECISION_MUL\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"swapPRECISION_MUL\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"RATES\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"swapRATES\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_balances\",\"type\":\"uint256[2]\"}],\"name\":\"_xp_mem\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"result\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"swapBalances\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calc_coins_amount\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_balances\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"amp\",\"type\":\"uint256\"}],\"name\":\"get_D_mem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"}],\"name\":\"get_add_liquidity_fee\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"liquidityFee\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"}],\"name\":\"get_add_liquidity_mint_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_dx\",\"type\":\"uint256\"}],\"name\":\"get_dx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"get_exchange_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exAdminFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"}],\"name\":\"get_remove_liquidity_imbalance_fee\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"liquidityFee\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"get_remove_liquidity_one_coin_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract provides utility functions for retrieving information and calculating fees related to stable swaps with two coins.\",\"kind\":\"dev\",\"methods\":{\"PRECISION_MUL(address)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\"}},\"RATES(address)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\"}},\"_xp_mem(address,uint256[2])\":{\"params\":{\"_balances\":\"The array of balances to calculate virtual balances from.\"}},\"balances(address)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\"}},\"calc_coins_amount(address,uint256)\":{\"params\":{\"_amount\":\"Amount of LP tokens to burn in the withdrawal\",\"_swap\":\"Address of the stable swap contract\"}},\"get_D_mem(address,uint256[2],uint256)\":{\"params\":{\"_balances\":\"Array of balances to calculate virtual balances from.\",\"amp\":\"Amplification factor of the pool.\"}},\"get_add_liquidity_fee(address,uint256[2])\":{\"params\":{\"_swap\":\"Address of the stable swap contract\",\"amounts\":\"Array of amounts for each coin being deposited\"}},\"get_add_liquidity_mint_amount(address,uint256[2])\":{\"params\":{\"_swap\":\"Address of the stable swap contract\",\"amounts\":\"Array of amounts for each coin being deposited\"}},\"get_dx(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_swap\":\": Addresses of pool conracts .\",\"dy\":\":  the given amount out\",\"i\":\": the token index.\",\"j\":\": the token index \",\"max_dx\":\": the maximum of amount in \"}},\"get_exchange_fee(address,uint256,uint256,uint256)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\",\"dx\":\"Amount of token to swap from\",\"i\":\"Index of the token to swap from\",\"j\":\"Index of the token to swap to\"},\"returns\":{\"exAdminFee\":\"Admin fee for the swap\",\"exFee\":\"Exchange fee for the swap\"}},\"get_remove_liquidity_imbalance_fee(address,uint256[2])\":{\"params\":{\"_swap\":\"Address of the stable swap contract\",\"amounts\":\"Array of amounts for each coin being withdrawn\"}},\"get_remove_liquidity_one_coin_fee(address,uint256,uint256)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\",\"_token_amount\":\"Amount of liquidity tokens being withdrawn\",\"i\":\"Index of the coin to withdraw\"}},\"token(address)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\"}}},\"title\":\"StableSwapTwoPoolInfo\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PRECISION_MUL(address)\":{\"notice\":\"Get the precision multipliers for each coin in the pool\"},\"RATES(address)\":{\"notice\":\"Get the exchange rates for each coin in the pool\"},\"_xp_mem(address,uint256[2])\":{\"notice\":\"Calculates the array of virtual balances for the pool, scaled by precision, using provided balances.\"},\"balances(address)\":{\"notice\":\"Get the balances of each coin in the pool\"},\"calc_coins_amount(address,uint256)\":{\"notice\":\"Calculate the amount of each coin received when removing liquidity \"},\"get_D_mem(address,uint256[2],uint256)\":{\"notice\":\"Calculates the total value of the pool's assets (invariant D), given balances and amplification factor.\"},\"get_add_liquidity_fee(address,uint256[2])\":{\"notice\":\"Calculate the fee charged when adding liquidity\"},\"get_add_liquidity_mint_amount(address,uint256[2])\":{\"notice\":\"Calculate the amount of LP token received when adding liquidity\"},\"get_dx(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"get amountIn  with the given amount out  \"},\"get_exchange_fee(address,uint256,uint256,uint256)\":{\"notice\":\"Calculates the exchange fee and admin fee for a token swap\"},\"get_remove_liquidity_imbalance_fee(address,uint256[2])\":{\"notice\":\"Calculate the fee charged when removing liquidity\"},\"get_remove_liquidity_one_coin_fee(address,uint256,uint256)\":{\"notice\":\"Calculate the fee charged when removing liquidity for a single coin\"},\"token(address)\":{\"notice\":\"Get the LP token of the two pool\"}},\"notice\":\"Contract for retrieving information about stable swaps with two coins\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableSwap/utils/StableSwapTwoPoolInfo.sol\":\"StableSwapTwoPoolInfo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IStableSwap {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the LP token of the two pool\\r\\n     */\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balances of each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function balances(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of coins within the pool\\r\\n     */\\r\\n    function N_COINS() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the exchange rates for each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function RATES(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the address of coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the precision multipliers for each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function PRECISION_MUL(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The pool swap fee.\\r\\n     * The method returns fee as an integer with 1e10 precision.\\r\\n     */\\r\\n    function fee() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The percentage of the swap fee that is taken as an admin fee.\\r\\n     * The method returns an integer with with 1e10 precision.\\r\\n     */\\r\\n    function admin_fee() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for the amplification coefficient of the pool.\\r\\n     * The amplification coefficient A determines a pool\\u2019s tolerance for imbalance between the assets within it.\\r\\n     */\\r\\n    function A() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\\r\\n    * Can get the absolute price by multiplying it with the price of the underlying assets.\\r\\n    * The method returns virtual_price as an integer with 1e18 precision.\\r\\n    */\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\\r\\n     * Returns the expected amount of LP tokens received. \\r\\n     * This calculation accounts for slippage, but not fees.\\r\\n     * @param amounts: Amount of each coin being deposited\\r\\n     * @param deposit: Set True for deposits, False for withdrawals\\r\\n     */\\r\\n    function calc_token_amount(uint256[2] memory amounts, bool deposit) external view returns (uint256);\\r\\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\\r\\n     * @param i: Index of coin to swap from\\r\\n     * @param j: Index of coin to swap to\\r\\n     * @param dx: Amount of coin i to swap\\r\\n     */\\r\\n    function get_dy(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\\r\\n    * @param i Index of coin to swap from\\r\\n    * @param j Index of coin to swap to\\r\\n    * @param dx Amount of coin i to swap\\r\\n    */\\r\\n    function get_dy_underlying(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount received when withdrawing a single coin.\\r\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\r\\n     * @param i: Index value of the coin to withdraw\\r\\n     */\\r\\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit coins into the pool\\r\\n     * @param amounts: Amount of each coin being deposited\\r\\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\\r\\n     */\\r\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Perform an exchange between two coins.\\r\\n     * @param i: Index of coin to swap from\\r\\n     * @param j: Index of coin to swap to\\r\\n     * @param dx: Amount of coin i to swap\\r\\n     * @param min_dy: \\tMinimum amount of j to receive\\r\\n     */\\r\\n    function exchange(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) external payable;\\r\\n\\r\\n     /**\\r\\n     * @notice Withdraw coins from the pool\\r\\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\\r\\n     * @param min_amounts: Minimum amounts of underlying coins to receive\\r\\n     */\\r\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external;\\r\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw coins from the pool in an imbalanced amount\\r\\n     * @param amounts: List of amounts of underlying coins to withdraw\\r\\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\\r\\n     */\\r\\n    function remove_liquidity_imbalance(uint256[2] memory amounts, uint256 max_burn_amount) external;\\r\\n    function remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw a single coin from the pool\\r\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\r\\n     * @param i: Index value of the coin to withdraw\\r\\n     * @param min_amount: Minimum amount of coin to receive\\r\\n     */\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 _token_amount,\\r\\n        uint256 i,\\r\\n        uint256 min_amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7d247b3b5a55e627ed93503380327de7e4b508f529a423f39dcf26cc9cb10589\",\"license\":\"MIT\"},\"contracts/stableSwap/utils/StableSwapTwoPoolInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/IStableSwap.sol\\\";\\n\\n/**\\n * @title StableSwapTwoPoolInfo\\n * @notice Contract for retrieving information about stable swaps with two coins\\n * @dev This contract provides utility functions for retrieving information and calculating fees related to stable swaps with two coins.\\n */\\ncontract StableSwapTwoPoolInfo {\\n    uint256 public constant N_COINS = 2;\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    uint256 public constant PRECISION = 1e18;\\n\\n    /**\\n     * @notice Get the LP token of the two pool\\n     * @param _swap Address of the stable swap contract\\n     */\\n    function token(address _swap) public view returns (IERC20) {\\n        return IERC20(IStableSwap(_swap).token());\\n    }\\n\\n     /**\\n     * @notice Get the balances of each coin in the pool\\n     * @param _swap Address of the stable swap contract\\n     */\\n    function balances(address _swap) public view returns (uint256[N_COINS] memory swapBalances) {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            swapBalances[i] = IStableSwap(_swap).balances(i);\\n        }\\n    }\\n    \\n    /**\\n     * @notice Get the exchange rates for each coin in the pool\\n     * @param _swap Address of the stable swap contract\\n     */\\n    function RATES(address _swap) public view returns (uint256[N_COINS] memory swapRATES) {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            swapRATES[i] = IStableSwap(_swap).RATES(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the precision multipliers for each coin in the pool\\n     * @param _swap Address of the stable swap contract\\n     */\\n    function PRECISION_MUL(address _swap) public view returns (uint256[N_COINS] memory swapPRECISION_MUL) {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            swapPRECISION_MUL[i] = IStableSwap(_swap).PRECISION_MUL(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of each coin received when removing liquidity \\n     * @param _swap Address of the stable swap contract\\n     * @param _amount Amount of LP tokens to burn in the withdrawal\\n     */\\n    function calc_coins_amount(address _swap, uint256 _amount) external view returns (uint256[N_COINS] memory) {\\n        uint256 total_supply = token(_swap).totalSupply();\\n        uint256[N_COINS] memory amounts;\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 value = (IStableSwap(_swap).balances(i) * _amount) / total_supply;\\n            amounts[i] = value;\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n    * @notice Calculates the total value of the pool's assets (invariant D), given balances and amplification factor.\\n    * @param _balances Array of balances to calculate virtual balances from.\\n    * @param amp Amplification factor of the pool.\\n    */\\n    function get_D_mem(\\n        address _swap,\\n        uint256[N_COINS] memory _balances,\\n        uint256 amp\\n    ) public view returns (uint256) {\\n        return get_D(_xp_mem(_swap, _balances), amp);\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of LP token received when adding liquidity\\n     * @param _swap Address of the stable swap contract\\n     * @param amounts Array of amounts for each coin being deposited\\n     */\\n    function get_add_liquidity_mint_amount(address _swap, uint256[N_COINS] memory amounts)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256[N_COINS] memory fees;\\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 amp = swap.A();\\n\\n        uint256 token_supply = token(_swap).totalSupply();\\n        //Initial invariant\\n        uint256 D0;\\n        uint256[N_COINS] memory old_balances = balances(_swap);\\n        if (token_supply > 0) {\\n            D0 = get_D_mem(_swap, old_balances, amp);\\n        }\\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1]];\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (token_supply == 0) {\\n                require(amounts[i] > 0, \\\"Initial deposit requires all coins\\\");\\n            }\\n            // balances store amounts of c-tokens\\n            new_balances[i] = old_balances[i] + amounts[i];\\n        }\\n\\n        // Invariant after change\\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\\n        require(D1 > D0, \\\"D1 must be greater than D0\\\");\\n\\n        // We need to recalculate the invariant accounting for fees\\n        // to calculate fair user's share\\n        uint256 D2 = D1;\\n        if (token_supply > 0) {\\n            // Only account for fees if we are not the first to deposit\\n            for (uint256 i = 0; i < N_COINS; i++) {\\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n                uint256 difference;\\n                if (ideal_balance > new_balances[i]) {\\n                    difference = ideal_balance - new_balances[i];\\n                } else {\\n                    difference = new_balances[i] - ideal_balance;\\n                }\\n\\n                fees[i] = (_fee * difference) / FEE_DENOMINATOR;\\n                new_balances[i] -= fees[i];\\n            }\\n            D2 = get_D_mem(_swap, new_balances, amp);\\n        }\\n\\n        // Calculate, how much pool tokens to mint\\n        uint256 mint_amount;\\n        if (token_supply == 0) {\\n            mint_amount = D1; // Take the dust if there was any\\n        } else {\\n            mint_amount = (token_supply * (D2 - D0)) / D0;\\n        }\\n        return mint_amount;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee charged when adding liquidity\\n     * @param _swap Address of the stable swap contract\\n     * @param amounts Array of amounts for each coin being deposited\\n     */\\n    function get_add_liquidity_fee(address _swap, uint256[N_COINS] memory amounts)\\n        external\\n        view\\n        returns (uint256[N_COINS] memory liquidityFee)\\n    {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 _admin_fee = swap.admin_fee();\\n        uint256 amp = swap.A();\\n\\n        uint256 token_supply = token(_swap).totalSupply();\\n        //Initial invariant\\n        uint256 D0;\\n        uint256[N_COINS] memory old_balances = balances(_swap);\\n\\n        if (token_supply > 0) {\\n            D0 = get_D_mem(_swap, old_balances, amp);\\n        }\\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1]];\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (token_supply == 0) {\\n                require(amounts[i] > 0, \\\"Initial deposit requires all coins\\\");\\n            }\\n            new_balances[i] = old_balances[i] + amounts[i];\\n        }\\n\\n        // Invariant after change\\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\\n        require(D1 > D0, \\\"D1 must be greater than D0\\\");\\n        if (token_supply > 0) {\\n            // Only account for fees if we are not the first to deposit\\n            for (uint256 i = 0; i < N_COINS; i++) {\\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n                uint256 difference;\\n                if (ideal_balance > new_balances[i]) {\\n                    difference = ideal_balance - new_balances[i];\\n                } else {\\n                    difference = new_balances[i] - ideal_balance;\\n                }\\n                uint256 coinFee;\\n                coinFee = (_fee * difference) / FEE_DENOMINATOR;\\n                liquidityFee[i] = ((coinFee * _admin_fee) / FEE_DENOMINATOR);\\n            }\\n        }\\n    }\\n\\n     /**\\n     * @notice Calculate the fee charged when removing liquidity\\n     * @param _swap Address of the stable swap contract\\n     * @param amounts Array of amounts for each coin being withdrawn\\n     */\\n    function get_remove_liquidity_imbalance_fee(address _swap, uint256[N_COINS] memory amounts)\\n        external\\n        view\\n        returns (uint256[N_COINS] memory liquidityFee)\\n    {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 _admin_fee = swap.admin_fee();\\n        uint256 amp = swap.A();\\n\\n        uint256[N_COINS] memory old_balances = balances(_swap);\\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1]];\\n        uint256 D0 = get_D_mem(_swap, old_balances, amp);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            new_balances[i] -= amounts[i];\\n        }\\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n            uint256 difference;\\n            if (ideal_balance > new_balances[i]) {\\n                difference = ideal_balance - new_balances[i];\\n            } else {\\n                difference = new_balances[i] - ideal_balance;\\n            }\\n            uint256 coinFee;\\n            coinFee = (_fee * difference) / FEE_DENOMINATOR;\\n            liquidityFee[i] = ((coinFee * _admin_fee) / FEE_DENOMINATOR);\\n        }\\n    }\\n\\n    /**\\n    * @notice Calculates the array of virtual balances for the pool, scaled by precision, using provided balances.\\n    * @param _balances The array of balances to calculate virtual balances from.\\n    */\\n    function _xp_mem(address _swap, uint256[N_COINS] memory _balances)\\n        public\\n        view\\n        returns (uint256[N_COINS] memory result)\\n    {\\n        result = RATES(_swap);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            result[i] = (result[i] * _balances[i]) / PRECISION;\\n        }\\n    }\\n\\n    /**\\n    * @notice Calculates the total value of the pool's assets (invariant D), given virtual balances and amplification factor.\\n    * @param xp Array of virtual balances for the pool, scaled by precision.\\n    * @param amp Amplification factor of the pool.\\n    * @return D The total value of the pool's assets (invariant D).\\n    */\\n    function get_D(uint256[N_COINS] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 S;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            S += xp[i];\\n        }\\n        if (S == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev;\\n        uint256 D = S;\\n        uint256 Ann = amp * N_COINS;\\n        for (uint256 j = 0; j < 255; j++) {\\n            uint256 D_P = D;\\n            for (uint256 k = 0; k < N_COINS; k++) {\\n                D_P = (D_P * D) / (xp[k] * N_COINS); // If division by 0, this will be borked: only withdrawal will work. And that is good\\n            }\\n            Dprev = D;\\n            D = ((Ann * S + D_P * N_COINS) * D) / ((Ann - 1) * D + (N_COINS + 1) * D_P);\\n            // Equality with the precision of 1\\n            if (D > Dprev) {\\n                if (D - Dprev <= 1) {\\n                    break;\\n                }\\n            } else {\\n                if (Dprev - D <= 1) {\\n                    break;\\n                }\\n            }\\n        }\\n        return D;\\n    }\\n\\n    /**\\n    * @notice Get the amount of coin j one would receive for swapping x of coin i, using the current virtual balances.\\n    * @param i Index of coin to swap from.\\n    * @param j Index of coin to swap to\\n    * @param x Amount of coin i to swap\\n    * @param xp_ The array of virtual balances for the pool, scaled by precision.\\n    */\\n    function get_y(\\n        address _swap,\\n        uint256 i,\\n        uint256 j,\\n        uint256 x,\\n        uint256[N_COINS] memory xp_\\n    ) internal view returns (uint256) {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256 amp = swap.A();\\n        uint256 D = get_D(xp_, amp);\\n        uint256 c = D;\\n        uint256 S_;\\n        uint256 Ann = amp * N_COINS;\\n\\n        uint256 _x;\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            if (k == i) {\\n                _x = x;\\n            } else if (k != j) {\\n                _x = xp_[k];\\n            } else {\\n                continue;\\n            }\\n            S_ += _x;\\n            c = (c * D) / (_x * N_COINS);\\n        }\\n        c = (c * D) / (Ann * N_COINS);\\n        uint256 b = S_ + D / Ann; // - D\\n        uint256 y_prev;\\n        uint256 y = D;\\n\\n        for (uint256 m = 0; m < 255; m++) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            // Equality with the precision of 1\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    break;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    break;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    /**\\n    * @notice Calculates the exchange fee and admin fee for a token swap\\n    * @param _swap Address of the stable swap contract\\n    * @param i Index of the token to swap from\\n    * @param j Index of the token to swap to\\n    * @param dx Amount of token to swap from\\n    * @return exFee Exchange fee for the swap\\n    * @return exAdminFee Admin fee for the swap\\n    */\\n    function get_exchange_fee(\\n        address _swap,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256 exFee, uint256 exAdminFee) {\\n        IStableSwap swap = IStableSwap(_swap);\\n\\n        uint256[N_COINS] memory old_balances = balances(_swap);\\n        uint256[N_COINS] memory xp = _xp_mem(_swap, old_balances);\\n        uint256[N_COINS] memory rates = RATES(_swap);\\n        uint256 x = xp[i] + (dx * rates[i]) / PRECISION;\\n        uint256 y = get_y(_swap, i, j, x, xp);\\n\\n        uint256 dy = xp[j] - y - 1; //  -1 just in case there were some rounding errors\\n        uint256 dy_fee = (dy * swap.fee()) / FEE_DENOMINATOR;\\n\\n        uint256 dy_admin_fee = (dy_fee * swap.admin_fee()) / FEE_DENOMINATOR;\\n        dy_fee = (dy_fee * PRECISION) / rates[j];\\n        dy_admin_fee = (dy_admin_fee * PRECISION) / rates[j];\\n        exFee = dy_fee;\\n        exAdminFee = dy_admin_fee;\\n    }\\n\\n    /**\\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision\\n     */\\n    function _xp(address _swap) internal view returns (uint256[N_COINS] memory result) {\\n        result = RATES(_swap);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            result[i] = (result[i] * IStableSwap(_swap).balances(i)) / PRECISION;\\n        }\\n    }\\n\\n    /**\\n    * @notice Get the amount of coin i given a reduction in invariant D, considering a specific value of parameter A and current virtual balances.\\n    * @param A_ The value of parameter A.\\n    * @param i The index of the coin for which the output amount is calculated.\\n    * @param xp The array of virtual balances for the pool, scaled by precision.\\n    * @param D The new value of invariant D.\\n    */\\n    function get_y_D(\\n        uint256 A_,\\n        uint256 i,\\n        uint256[N_COINS] memory xp,\\n        uint256 D\\n    ) internal pure returns (uint256) {\\n        /**\\n        Calculate x[i] if one reduces D from being calculated for xp to D\\n\\n        Done by solving quadratic equation iteratively.\\n        x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n        x_1**2 + b*x_1 = c\\n\\n        x_1 = (x_1**2 + c) / (2*x_1 + b)\\n        */\\n        // x in the input is converted to the same price/precision\\n        require(i < N_COINS, \\\"dev: i above N_COINS\\\");\\n        uint256 c = D;\\n        uint256 S_;\\n        uint256 Ann = A_ * N_COINS;\\n\\n        uint256 _x;\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            if (k != i) {\\n                _x = xp[k];\\n            } else {\\n                continue;\\n            }\\n            S_ += _x;\\n            c = (c * D) / (_x * N_COINS);\\n        }\\n        c = (c * D) / (Ann * N_COINS);\\n        uint256 b = S_ + D / Ann;\\n        uint256 y_prev;\\n        uint256 y = D;\\n\\n        for (uint256 k = 0; k < 255; k++) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            // Equality with the precision of 1\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    break;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    break;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    /**\\n     * @notice Calculate the amount received when withdrawing a single coin.\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\n     * @param i: Index value of the coin to withdraw\\n     */\\n    function _calc_withdraw_one_coin(\\n        address _swap,\\n        uint256 _token_amount,\\n        uint256 i\\n    ) internal view returns (uint256, uint256) {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256 amp = swap.A();\\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\\n        uint256[N_COINS] memory precisions = PRECISION_MUL(_swap);\\n\\n        uint256[N_COINS] memory xp = _xp(_swap);\\n\\n        uint256 D0 = get_D(xp, amp);\\n        uint256 D1 = D0 - (_token_amount * D0) / (token(_swap).totalSupply());\\n        uint256[N_COINS] memory xp_reduced = xp;\\n\\n        uint256 new_y = get_y_D(amp, i, xp, D1);\\n        uint256 dy_0 = (xp[i] - new_y) / precisions[i]; // w/o fees\\n\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            uint256 dx_expected;\\n            if (k == i) {\\n                dx_expected = (xp[k] * D1) / D0 - new_y;\\n            } else {\\n                dx_expected = xp[k] - (xp[k] * D1) / D0;\\n            }\\n            xp_reduced[k] -= (_fee * dx_expected) / FEE_DENOMINATOR;\\n        }\\n        uint256 dy = xp_reduced[i] - get_y_D(amp, i, xp_reduced, D1);\\n        dy = (dy - 1) / precisions[i]; // Withdraw less to account for rounding errors\\n\\n        return (dy, dy_0 - dy);\\n    }\\n\\n     /**\\n     * @notice Calculate the fee charged when removing liquidity for a single coin\\n     * @param _swap Address of the stable swap contract\\n     * @param _token_amount Amount of liquidity tokens being withdrawn\\n     * @param i Index of the coin to withdraw\\n     */\\n    function get_remove_liquidity_one_coin_fee(\\n        address _swap,\\n        uint256 _token_amount,\\n        uint256 i\\n    ) external view returns (uint256 adminFee) {\\n        IStableSwap swap = IStableSwap(_swap);\\n        (, uint256 dy_fee) = _calc_withdraw_one_coin(_swap, _token_amount, i);\\n        adminFee = (dy_fee * swap.admin_fee()) / FEE_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @notice get amountIn  with the given amount out  \\n     * @param _swap: Addresses of pool conracts .\\n     * @param i: the token index.\\n     * @param j: the token index \\n     * @param  dy :  the given amount out\\n     * @param max_dx: the maximum of amount in \\n     */\\n    function get_dx(\\n        address _swap,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dy,\\n        uint256 max_dx\\n    ) external view returns (uint256) {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256[N_COINS] memory old_balances = balances(_swap);\\n        uint256[N_COINS] memory xp = _xp_mem(_swap, old_balances);\\n\\n        uint256 dy_with_fee = (dy * FEE_DENOMINATOR) / (FEE_DENOMINATOR - swap.fee());\\n        require(dy_with_fee < old_balances[j], \\\"Excess balance\\\");\\n        uint256[N_COINS] memory rates = RATES(_swap);\\n        uint256 y = xp[j] - (dy_with_fee * rates[j]) / PRECISION;\\n        uint256 x = get_y(_swap, j, i, y, xp);\\n\\n        uint256 dx = x - xp[i];\\n\\n        // Convert all to real units\\n        dx = (dx * PRECISION) / rates[i] + 1; // +1 for round lose.\\n        require(dx <= max_dx, \\\"Exchange resulted in fewer coins than expected\\\");\\n        return dx;\\n    }\\n}\\n\",\"keccak256\":\"0xa69c34525ce90d76bafc9122423b25404989a3898f3861345381e12c2240fdf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611ec1908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630d098fa9146111e257806315a4d7fe146110915780631f38b0c714610ead5780632494acbd14610e89578063279a07cc14610e6557806327e235e314610e415780632935775014610e255780635779dcd814610a345780636c92118e146107b75780636d46a1db14610783578063aaf5eb6814610760578063ae6452b414610722578063b6f03ac1146103b6578063ca4bc71414610131578063d73792a9146101115763f74d92e7146100cc57600080fd5b3461010c57608036600319011261010c5760206101046100ea6114b4565b6100ff6100f63661151e565b60643592611913565b611ba9565b604051908152f35b600080fd5b3461010c57600036600319011261010c5760206040516402540be4008152f35b3461010c5760a036600319011261010c5761014a6114b4565b60643590602490813560443561015f836117fb565b9261016a8482611913565b906402540be400808802978089048214901517156103a15760405163ddca3f4360e01b81526020989089816004816001600160a01b0388165afa90811561039557600091610368575b508203918211610353576101cb6101d19286926115ae565b966115ce565b5185101561030f579081816101e686946116a5565b94846101f282846115ce565b51670de0b6b3a7640000809a610208858b6115ce565b516102129161158e565b0461021c916115a1565b9161022694611975565b91610230916115ce565b5161023a916115a1565b8381029381850414901517156102fa5761025f9291610258916115ce565b51906115ae565b90600182018092116102e657608435821161027d5750604051908152f35b82602e6084926040519262461bcd60e51b845260048401528201527f45786368616e676520726573756c74656420696e20666577657220636f696e7360448201527f207468616e2065787065637465640000000000000000000000000000000000006064820152fd5b634e487b7160e01b60009081526011600452fd5b83634e487b7160e01b60005260116004526000fd5b60405162461bcd60e51b815260048101889052600e818801527f4578636573732062616c616e63650000000000000000000000000000000000006044820152606490fd5b87634e487b7160e01b60005260116004526000fd5b90508981813d831161038e575b61037f81836114fc565b8101031261010c57518a6101b3565b503d610375565b6040513d6000823e3d90fd5b86634e487b7160e01b60005260116004526000fd5b3461010c57606036600319011261010c576103cf6114b4565b6103d83661151e565b906001600160a01b03918282166040516103f1816114ca565b604036823760405163ddca3f4360e01b815294602086600481865afa958615610395576000966106ee575b50858060011b04600214861517156106d857602060049360405194858092630f446c1d60e41b82525afa928315610395576000936106a3575b509160206004936104658761189f565b16604051948580926318160ddd60e01b82525afa9283156103955760009361066f575b50600093610495866117fb565b9584610659575b604051916104a9836114ca565b875183526020880151602084015260005b600281106106055750506104d2836100ff8484611913565b966104de878911611659565b879486610526575b505050505060209450811560001461050357505050604051908152f35b6105219350906105168361051c936115a1565b9061158e565b6115ae565b610104565b90919293945060005b60028110610556575050506020965061054c92916100ff91611913565b85808080806104e6565b806402540be4006105b68c6001600160fe1b036105858d8f61051c9061057e60019a8d6115ce565b519061158e565b61058f868c6115ce565b518111156105f1576105ac906105a5878d6115ce565b51906115a1565b915b861c1661158e565b046105c182856115ce565b526105e06105cf82856115ce565b516105da83896115ce565b516115a1565b6105ea82886115ce565b520161052f565b6105ff906105da878d6115ce565b916105ae565b600190871561063f575b61062e61061c828c6115ce565b5161062783866115ce565b519061164c565b61063882876115ce565b52016104ba565b61065461064c82856115ce565b5115156115f5565b61060f565b9450610669826100ff8888611913565b9461049c565b9092506020813d60201161069b575b8161068b602093836114fc565b8101031261010c57519186610488565b3d915061067e565b92506020833d6020116106d0575b816106be602093836114fc565b8101031261010c579151916020610455565b3d91506106b1565b634e487b7160e01b600052601160045260246000fd5b9095506020813d60201161071a575b8161070a602093836114fc565b8101031261010c5751948661041c565b3d91506106fd565b3461010c57606036600319011261010c5761075c6107506107416114b4565b61074a3661151e565b90611913565b60405191829182611560565b0390f35b3461010c57600036600319011261010c576020604051670de0b6b3a76400008152f35b3461010c57602036600319011261010c5760206107a66107a16114b4565b61189f565b6001600160a01b0360405191168152f35b3461010c57606036600319011261010c576107d06114b4565b6107d93661151e565b90604051906107e7826114ca565b604036833760405163ddca3f4360e01b8152906001600160a01b03811660208084600481855afa93841561039557600094610a05575b50600195600294808060011b04600214811517156106d8576001600160fe1b039060011c16936040519363fee3f7f960e01b85528385600481845afa948515610395576000956109d6575b508360049160405192838092630f446c1d60e41b82525afa908115610395576000916109a9575b5061089b8294926117fb565b916040519485916108ab836114ca565b8451835280850151908301526108c5836100ff8684611913565b948b60005b8b8110610976575050506108e292916100ff91611913565b9060005b8781106108fb576040518061075c8b82611560565b899061094b6109518861091c8861051c610915878a6115ce565b518a61158e565b610926858b6115ce565b518111156109635761093c906105a5868c6115ce565b6402540be4009384918d61158e565b0461158e565b0461095c828c6115ce565b52016108e6565b610971906105da868c6115ce565b61093c565b909192935061099361098882856115ce565b516105da838b6115ce565b61099d828a6115ce565b5201908b8793926108ca565b90508381813d83116109cf575b6109c081836114fc565b8101031261010c57518961088f565b503d6109b6565b9094508381813d83116109fe575b6109ee81836114fc565b8101031261010c57519383610868565b503d6109e4565b9080945081813d8311610a2d575b610a1d81836114fc565b8101031261010c5751928661081d565b503d610a13565b3461010c57606036600319011261010c57610a4d6114b4565b604051630f446c1d60e41b8152906020826004816001600160a01b0385165afa91821561039557600092610df1575b5060405163ddca3f4360e01b8152916020836004816001600160a01b0386165afa92831561039557600093610dbd575b50828060011b04600214831517156106d857610ac782611757565b9060408051610ad5816114ca565b369037610ae1836116a5565b9360005b60028110610d1d5750610af88286611ba9565b94610b058660243561158e565b600460206001600160a01b03610b1a8961189f565b16604051928380926318160ddd60e01b82525afa90811561039557600091610ce9575b50610b4b90610b51926115ae565b876115a1565b91610b60838360443587611d13565b90610b80610b74836105da604435876115ce565b610258604435896115ce565b9760005b60028110610c585750505050610bb69291610bb091610ba5604435826115ce565b519360443590611d13565b906115a1565b60001981019081116106d8576001600160a01b0393610bb0610be192610258602095604435906115ce565b9160046040518095819363fee3f7f960e01b8352165afa91821561039557600092610c22575b60206402540be400610c19858561158e565b04604051908152f35b91506020823d602011610c50575b81610c3d602093836114fc565b8101031261010c57905190610c19610c07565b3d9150610c30565b600190610cb16402540be400610ca685888b868c6044358203610cc257610c9092610c8a610c95969361051c936115ce565b5161158e565b6115a1565b6001600160fe1b0388871c1661158e565b046105da83896115ce565b610cbb82886115ce565b5201610b84565b92509261051c610bb092610c8a86610cdd610ce498886115ce565b51966115ce565b610c95565b90506020813d602011610d15575b81610d04602093836114fc565b8101031261010c5751610b51610b3d565b3d9150610cf7565b610d2781876115ce565b51604051634903b0d160e01b81526004810183905291906020836024816001600160a01b038b165afa92831561039557600093610d87575b50610d75600193670de0b6b3a76400009261158e565b04610d8082896115ce565b5201610ae5565b92506020833d602011610db5575b81610da2602093836114fc565b8101031261010c57915191610d75610d5f565b3d9150610d95565b9092506020813d602011610de9575b81610dd9602093836114fc565b8101031261010c57519183610aac565b3d9150610dcc565b9091506020813d602011610e1d575b81610e0d602093836114fc565b8101031261010c57519082610a7c565b3d9150610e00565b3461010c57600036600319011261010c57602060405160028152f35b3461010c57602036600319011261010c5761075c610750610e606114b4565b6117fb565b3461010c57602036600319011261010c5761075c610750610e846114b4565b611757565b3461010c57602036600319011261010c5761075c610750610ea86114b4565b6116a5565b3461010c57608036600319011261010c57610ec66114b4565b6001600160a01b03811690610f47610ee6610ee0836117fb565b83611913565b6105da610f3d82610ef6866116a5565b95610f2f610f06602435846115ce565b51670de0b6b3a7640000610f28610f1f6024358c6115ce565b5160643561158e565b049061164c565b906044359060243590611975565b91604435906115ce565b60001981019081116106d85760405163ddca3f4360e01b8152602091908281600481885afa908115610395578390600092611063575b5060049192610f936402540be40094859261158e565b04956040519283809263fee3f7f960e01b82525afa801561039557600090611034575b610fc191508561158e565b0492670de0b6b3a7640000810290808204670de0b6b3a764000014901517156106d857610ff490610258604435856115ce565b91670de0b6b3a7640000840293808504670de0b6b3a764000014901517156106d85760409361025861102992604435906115ce565b908351928352820152f35b508281813d831161105c575b61104a81836114fc565b8101031261010c57610fc19051610fb6565b503d611040565b809250813d831161108a575b61107981836114fc565b8101031261010c5751826004610f7d565b503d61106f565b3461010c57604036600319011261010c576110aa6114b4565b6024803591604080516110bc816114ca565b3690376001600160a01b0391826110d28361189f565b166040519182916318160ddd60e01b835282600460209485935afa928315610395576000936111b3575b506040519461110a866114ca565b604036873760009416935b6002811061112b576040518061075c8882611560565b604051634903b0d160e01b8152600481018290529083828481895afa918215610395578592899160009161117c575b509261051c61116b9260019561158e565b61117582896115ce565b5201611115565b935050508382813d83116111ac575b61119581836114fc565b8101031261010c579051849190889061051c61115a565b503d61118b565b9092508181813d83116111db575b6111cb81836114fc565b8101031261010c575191866110fc565b503d6111c1565b3461010c57606036600319011261010c576111fb6114b4565b6112043661151e565b9060405190611212826114ca565b60403683376001600160a01b038082166040519263ddca3f4360e01b84526020908185600481865afa94851561039557600095611485575b50600196600295808060011b04600214811517156106d8576001600160fe1b039060011c16946040519463fee3f7f960e01b86528486600481845afa95861561039557600096611454575b50908460049260405193848092630f446c1d60e41b82525afa908115610395578590600092611424575b600493506112cc8661189f565b16604051938480926318160ddd60e01b82525afa918215610395576000926113f5575b506000936112fc816117fb565b9215801594856113df575b969190604051978893611319856114ca565b8651855280870151908501528d60005b8d811061139d575050505061134292916100ff91611913565b9161134e848411611659565b611361575b6040518061075c8a82611560565b60005b8781106113715750611353565b899061094b61138b8861091c8861051c610915878a6115ce565b04611396828c6115ce565b5201611364565b909192809495506113cd575b6113b661061c82896115ce565b6113c0828c6115ce565b5201908d89949392611329565b6113da61064c82856115ce565b6113a9565b95506113ef836100ff8685611913565b95611307565b9091508481813d831161141d575b61140d81836114fc565b8101031261010c5751908a6112ef565b503d611403565b915082813d831161144d575b61143a81836114fc565b8101031261010c578460049251916112bf565b503d611430565b919095508482813d831161147e575b61146d81836114fc565b8101031261010c5790519484611295565b503d611463565b9094508181813d83116114ad575b61149d81836114fc565b8101031261010c5751938761124a565b503d611493565b600435906001600160a01b038216820361010c57565b6040810190811067ffffffffffffffff8211176114e657604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176114e657604052565b806043121561010c5760405190611534826114ca565b8160649160641161010c576024905b8282106115505750505090565b8135815260209182019101611543565b6040810192916000915b6002831061157757505050565b60019082518152602080910192019201919061156a565b818102929181159184041417156106d857565b919082039182116106d857565b81156115b8570490565b634e487b7160e01b600052601260045260246000fd5b9060028110156115df5760051b0190565b634e487b7160e01b600052603260045260246000fd5b156115fc57565b60405162461bcd60e51b815260206004820152602260248201527f496e697469616c206465706f73697420726571756972657320616c6c20636f696044820152616e7360f01b6064820152608490fd5b919082018092116106d857565b1561166057565b60405162461bcd60e51b815260206004820152601a60248201527f4431206d7573742062652067726561746572207468616e2044300000000000006044820152606490fd5b9060408051926116b4846114ca565b60403685378360005b600281106116cb5750505050565b83516318880f5d60e21b8152600481018290526020919082816024816001600160a01b0389165afa90811561174c57600091611718575b506001925061171182856115ce565b52016116bd565b919282813d8311611745575b61172e81836114fc565b810103126117425750906001915138611702565b80fd5b503d611724565b86513d6000823e3d90fd5b906040805192611766846114ca565b60403685378360005b6002811061177d5750505050565b8351631f6be8d960e21b8152600481018290526020919082816024816001600160a01b0389165afa90811561174c576000916117ca575b50600192506117c382856115ce565b520161176f565b919282813d83116117f4575b6117e081836114fc565b8101031261174257509060019151386117b4565b503d6117d6565b90604080519261180a846114ca565b60403685378360005b600281106118215750505050565b8351634903b0d160e01b8152600481018290526020919082816024816001600160a01b0389165afa90811561174c5760009161186e575b506001925061186782856115ce565b5201611813565b919282813d8311611898575b61188481836114fc565b810103126117425750906001915138611858565b503d61187a565b604051637e062a3560e11b81526001600160a01b03916020908290600490829086165afa908115610395576000916118d657501690565b6020813d60201161190b575b816118ef602093836114fc565b81010312611907575190828216820361174257501690565b5080fd5b3d91506118e2565b61192f9092919260408051611927816114ca565b3690376116a5565b9160005b6002811061193f575050565b80670de0b6b3a7640000611963611958600194886115ce565b5161057e84876115ce565b0461196e82876115ce565b5201611933565b9193909360405190630f446c1d60e41b82526020826004816001600160a01b038298165afa91821561039557600092611b75575b506119b48284611ba9565b809660009260019785891b9660029287890460021488151715611b61579290918b94928796975086945b838610611ace575050505050506119f5919261158e565b9160021b838104600214841517156106d857611a17611a1e91611a24946115ae565b93876115ae565b9061164c565b918460005b60ff8110611a3b575b50505050505090565b86611a4f85611a4a838061158e565b61164c565b906001600160ff1b0381168103611ab9578791611a7585610c908a611a7b95871b61164c565b906115ae565b978881811115611aa35790611a8f916115a1565b1115611a9e5785905b01611a29565b611a32565b611aac916115a1565b1115611a9e578590611a98565b601185634e487b7160e01b6000525260246000fd5b9193809650859791939514600014611b3757611af58d611aef86809461164c565b9961158e565b818d1b91808304871490151715611b22578c91611b11916115ae565b965b0193918c9593919796976119de565b60118c634e487b7160e01b6000525260246000fd5b8b878314611b595750611af58d611aef611b518a876115ce565b51809461164c565b909796611b13565b634e487b7160e01b87526011600452602487fd5b90916020823d602011611ba1575b81611b90602093836114fc565b8101031261174257505190386119a9565b3d9150611b83565b90600090815b60028110611cfb57508115611cf357819260019282841b91600293808404600214901517156106d85790926000198301838111929160005b60ff8110611bfb575b505050505050505090565b8860005b838110611ca357508099611c13898961158e565b91818b1b928284048614831517156106d85781611c348a95611c399361164c565b61158e565b926106d857611c48908661158e565b91600391808302928304036106d857611a75611c65928c9461164c565b998a81811115611c8d5790611c79916115a1565b1115611c885787905b01611be7565b611bf0565b611c96916115a1565b1115611c88578790611c82565b959697919981611cb9919c9a9c9692959661158e565b611cc387836115ce565b5190818d1b918083048614901517156106d8578c91611ce1916115ae565b999b999a929897969195949101611bff565b505050600090565b91611d0c60019161062785876115ce565b9201611baf565b919091600280841015611e6f57849060009160019584871b95858704841486151715611e5b5788929185915b858310611e035750505090611d539161158e565b92811b9084820414841517156106d857611d73611a1e91611d7a946115ae565b93866115ae565b908360005b60ff8110611d90575b505050505090565b85611d9f84611a4a838061158e565b906001600160ff1b03811681036106d8578691611a7585610c9089611dc595871b61164c565b968781811115611ded5790611dd9916115a1565b1115611de85784905b01611d7f565b611d88565b611df6916115a1565b1115611de8578490611de2565b9295919350919088838514611e535750611e2a8a611e24611b5187866115ce565b9761158e565b818a1b918083048714901517156106d8578991611e46916115ae565b935b019091899392611d3f565b909593611e48565b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152601460248201527f6465763a20692061626f7665204e5f434f494e530000000000000000000000006044820152606490fdfea164736f6c6343000818000a",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630d098fa9146111e257806315a4d7fe146110915780631f38b0c714610ead5780632494acbd14610e89578063279a07cc14610e6557806327e235e314610e415780632935775014610e255780635779dcd814610a345780636c92118e146107b75780636d46a1db14610783578063aaf5eb6814610760578063ae6452b414610722578063b6f03ac1146103b6578063ca4bc71414610131578063d73792a9146101115763f74d92e7146100cc57600080fd5b3461010c57608036600319011261010c5760206101046100ea6114b4565b6100ff6100f63661151e565b60643592611913565b611ba9565b604051908152f35b600080fd5b3461010c57600036600319011261010c5760206040516402540be4008152f35b3461010c5760a036600319011261010c5761014a6114b4565b60643590602490813560443561015f836117fb565b9261016a8482611913565b906402540be400808802978089048214901517156103a15760405163ddca3f4360e01b81526020989089816004816001600160a01b0388165afa90811561039557600091610368575b508203918211610353576101cb6101d19286926115ae565b966115ce565b5185101561030f579081816101e686946116a5565b94846101f282846115ce565b51670de0b6b3a7640000809a610208858b6115ce565b516102129161158e565b0461021c916115a1565b9161022694611975565b91610230916115ce565b5161023a916115a1565b8381029381850414901517156102fa5761025f9291610258916115ce565b51906115ae565b90600182018092116102e657608435821161027d5750604051908152f35b82602e6084926040519262461bcd60e51b845260048401528201527f45786368616e676520726573756c74656420696e20666577657220636f696e7360448201527f207468616e2065787065637465640000000000000000000000000000000000006064820152fd5b634e487b7160e01b60009081526011600452fd5b83634e487b7160e01b60005260116004526000fd5b60405162461bcd60e51b815260048101889052600e818801527f4578636573732062616c616e63650000000000000000000000000000000000006044820152606490fd5b87634e487b7160e01b60005260116004526000fd5b90508981813d831161038e575b61037f81836114fc565b8101031261010c57518a6101b3565b503d610375565b6040513d6000823e3d90fd5b86634e487b7160e01b60005260116004526000fd5b3461010c57606036600319011261010c576103cf6114b4565b6103d83661151e565b906001600160a01b03918282166040516103f1816114ca565b604036823760405163ddca3f4360e01b815294602086600481865afa958615610395576000966106ee575b50858060011b04600214861517156106d857602060049360405194858092630f446c1d60e41b82525afa928315610395576000936106a3575b509160206004936104658761189f565b16604051948580926318160ddd60e01b82525afa9283156103955760009361066f575b50600093610495866117fb565b9584610659575b604051916104a9836114ca565b875183526020880151602084015260005b600281106106055750506104d2836100ff8484611913565b966104de878911611659565b879486610526575b505050505060209450811560001461050357505050604051908152f35b6105219350906105168361051c936115a1565b9061158e565b6115ae565b610104565b90919293945060005b60028110610556575050506020965061054c92916100ff91611913565b85808080806104e6565b806402540be4006105b68c6001600160fe1b036105858d8f61051c9061057e60019a8d6115ce565b519061158e565b61058f868c6115ce565b518111156105f1576105ac906105a5878d6115ce565b51906115a1565b915b861c1661158e565b046105c182856115ce565b526105e06105cf82856115ce565b516105da83896115ce565b516115a1565b6105ea82886115ce565b520161052f565b6105ff906105da878d6115ce565b916105ae565b600190871561063f575b61062e61061c828c6115ce565b5161062783866115ce565b519061164c565b61063882876115ce565b52016104ba565b61065461064c82856115ce565b5115156115f5565b61060f565b9450610669826100ff8888611913565b9461049c565b9092506020813d60201161069b575b8161068b602093836114fc565b8101031261010c57519186610488565b3d915061067e565b92506020833d6020116106d0575b816106be602093836114fc565b8101031261010c579151916020610455565b3d91506106b1565b634e487b7160e01b600052601160045260246000fd5b9095506020813d60201161071a575b8161070a602093836114fc565b8101031261010c5751948661041c565b3d91506106fd565b3461010c57606036600319011261010c5761075c6107506107416114b4565b61074a3661151e565b90611913565b60405191829182611560565b0390f35b3461010c57600036600319011261010c576020604051670de0b6b3a76400008152f35b3461010c57602036600319011261010c5760206107a66107a16114b4565b61189f565b6001600160a01b0360405191168152f35b3461010c57606036600319011261010c576107d06114b4565b6107d93661151e565b90604051906107e7826114ca565b604036833760405163ddca3f4360e01b8152906001600160a01b03811660208084600481855afa93841561039557600094610a05575b50600195600294808060011b04600214811517156106d8576001600160fe1b039060011c16936040519363fee3f7f960e01b85528385600481845afa948515610395576000956109d6575b508360049160405192838092630f446c1d60e41b82525afa908115610395576000916109a9575b5061089b8294926117fb565b916040519485916108ab836114ca565b8451835280850151908301526108c5836100ff8684611913565b948b60005b8b8110610976575050506108e292916100ff91611913565b9060005b8781106108fb576040518061075c8b82611560565b899061094b6109518861091c8861051c610915878a6115ce565b518a61158e565b610926858b6115ce565b518111156109635761093c906105a5868c6115ce565b6402540be4009384918d61158e565b0461158e565b0461095c828c6115ce565b52016108e6565b610971906105da868c6115ce565b61093c565b909192935061099361098882856115ce565b516105da838b6115ce565b61099d828a6115ce565b5201908b8793926108ca565b90508381813d83116109cf575b6109c081836114fc565b8101031261010c57518961088f565b503d6109b6565b9094508381813d83116109fe575b6109ee81836114fc565b8101031261010c57519383610868565b503d6109e4565b9080945081813d8311610a2d575b610a1d81836114fc565b8101031261010c5751928661081d565b503d610a13565b3461010c57606036600319011261010c57610a4d6114b4565b604051630f446c1d60e41b8152906020826004816001600160a01b0385165afa91821561039557600092610df1575b5060405163ddca3f4360e01b8152916020836004816001600160a01b0386165afa92831561039557600093610dbd575b50828060011b04600214831517156106d857610ac782611757565b9060408051610ad5816114ca565b369037610ae1836116a5565b9360005b60028110610d1d5750610af88286611ba9565b94610b058660243561158e565b600460206001600160a01b03610b1a8961189f565b16604051928380926318160ddd60e01b82525afa90811561039557600091610ce9575b50610b4b90610b51926115ae565b876115a1565b91610b60838360443587611d13565b90610b80610b74836105da604435876115ce565b610258604435896115ce565b9760005b60028110610c585750505050610bb69291610bb091610ba5604435826115ce565b519360443590611d13565b906115a1565b60001981019081116106d8576001600160a01b0393610bb0610be192610258602095604435906115ce565b9160046040518095819363fee3f7f960e01b8352165afa91821561039557600092610c22575b60206402540be400610c19858561158e565b04604051908152f35b91506020823d602011610c50575b81610c3d602093836114fc565b8101031261010c57905190610c19610c07565b3d9150610c30565b600190610cb16402540be400610ca685888b868c6044358203610cc257610c9092610c8a610c95969361051c936115ce565b5161158e565b6115a1565b6001600160fe1b0388871c1661158e565b046105da83896115ce565b610cbb82886115ce565b5201610b84565b92509261051c610bb092610c8a86610cdd610ce498886115ce565b51966115ce565b610c95565b90506020813d602011610d15575b81610d04602093836114fc565b8101031261010c5751610b51610b3d565b3d9150610cf7565b610d2781876115ce565b51604051634903b0d160e01b81526004810183905291906020836024816001600160a01b038b165afa92831561039557600093610d87575b50610d75600193670de0b6b3a76400009261158e565b04610d8082896115ce565b5201610ae5565b92506020833d602011610db5575b81610da2602093836114fc565b8101031261010c57915191610d75610d5f565b3d9150610d95565b9092506020813d602011610de9575b81610dd9602093836114fc565b8101031261010c57519183610aac565b3d9150610dcc565b9091506020813d602011610e1d575b81610e0d602093836114fc565b8101031261010c57519082610a7c565b3d9150610e00565b3461010c57600036600319011261010c57602060405160028152f35b3461010c57602036600319011261010c5761075c610750610e606114b4565b6117fb565b3461010c57602036600319011261010c5761075c610750610e846114b4565b611757565b3461010c57602036600319011261010c5761075c610750610ea86114b4565b6116a5565b3461010c57608036600319011261010c57610ec66114b4565b6001600160a01b03811690610f47610ee6610ee0836117fb565b83611913565b6105da610f3d82610ef6866116a5565b95610f2f610f06602435846115ce565b51670de0b6b3a7640000610f28610f1f6024358c6115ce565b5160643561158e565b049061164c565b906044359060243590611975565b91604435906115ce565b60001981019081116106d85760405163ddca3f4360e01b8152602091908281600481885afa908115610395578390600092611063575b5060049192610f936402540be40094859261158e565b04956040519283809263fee3f7f960e01b82525afa801561039557600090611034575b610fc191508561158e565b0492670de0b6b3a7640000810290808204670de0b6b3a764000014901517156106d857610ff490610258604435856115ce565b91670de0b6b3a7640000840293808504670de0b6b3a764000014901517156106d85760409361025861102992604435906115ce565b908351928352820152f35b508281813d831161105c575b61104a81836114fc565b8101031261010c57610fc19051610fb6565b503d611040565b809250813d831161108a575b61107981836114fc565b8101031261010c5751826004610f7d565b503d61106f565b3461010c57604036600319011261010c576110aa6114b4565b6024803591604080516110bc816114ca565b3690376001600160a01b0391826110d28361189f565b166040519182916318160ddd60e01b835282600460209485935afa928315610395576000936111b3575b506040519461110a866114ca565b604036873760009416935b6002811061112b576040518061075c8882611560565b604051634903b0d160e01b8152600481018290529083828481895afa918215610395578592899160009161117c575b509261051c61116b9260019561158e565b61117582896115ce565b5201611115565b935050508382813d83116111ac575b61119581836114fc565b8101031261010c579051849190889061051c61115a565b503d61118b565b9092508181813d83116111db575b6111cb81836114fc565b8101031261010c575191866110fc565b503d6111c1565b3461010c57606036600319011261010c576111fb6114b4565b6112043661151e565b9060405190611212826114ca565b60403683376001600160a01b038082166040519263ddca3f4360e01b84526020908185600481865afa94851561039557600095611485575b50600196600295808060011b04600214811517156106d8576001600160fe1b039060011c16946040519463fee3f7f960e01b86528486600481845afa95861561039557600096611454575b50908460049260405193848092630f446c1d60e41b82525afa908115610395578590600092611424575b600493506112cc8661189f565b16604051938480926318160ddd60e01b82525afa918215610395576000926113f5575b506000936112fc816117fb565b9215801594856113df575b969190604051978893611319856114ca565b8651855280870151908501528d60005b8d811061139d575050505061134292916100ff91611913565b9161134e848411611659565b611361575b6040518061075c8a82611560565b60005b8781106113715750611353565b899061094b61138b8861091c8861051c610915878a6115ce565b04611396828c6115ce565b5201611364565b909192809495506113cd575b6113b661061c82896115ce565b6113c0828c6115ce565b5201908d89949392611329565b6113da61064c82856115ce565b6113a9565b95506113ef836100ff8685611913565b95611307565b9091508481813d831161141d575b61140d81836114fc565b8101031261010c5751908a6112ef565b503d611403565b915082813d831161144d575b61143a81836114fc565b8101031261010c578460049251916112bf565b503d611430565b919095508482813d831161147e575b61146d81836114fc565b8101031261010c5790519484611295565b503d611463565b9094508181813d83116114ad575b61149d81836114fc565b8101031261010c5751938761124a565b503d611493565b600435906001600160a01b038216820361010c57565b6040810190811067ffffffffffffffff8211176114e657604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176114e657604052565b806043121561010c5760405190611534826114ca565b8160649160641161010c576024905b8282106115505750505090565b8135815260209182019101611543565b6040810192916000915b6002831061157757505050565b60019082518152602080910192019201919061156a565b818102929181159184041417156106d857565b919082039182116106d857565b81156115b8570490565b634e487b7160e01b600052601260045260246000fd5b9060028110156115df5760051b0190565b634e487b7160e01b600052603260045260246000fd5b156115fc57565b60405162461bcd60e51b815260206004820152602260248201527f496e697469616c206465706f73697420726571756972657320616c6c20636f696044820152616e7360f01b6064820152608490fd5b919082018092116106d857565b1561166057565b60405162461bcd60e51b815260206004820152601a60248201527f4431206d7573742062652067726561746572207468616e2044300000000000006044820152606490fd5b9060408051926116b4846114ca565b60403685378360005b600281106116cb5750505050565b83516318880f5d60e21b8152600481018290526020919082816024816001600160a01b0389165afa90811561174c57600091611718575b506001925061171182856115ce565b52016116bd565b919282813d8311611745575b61172e81836114fc565b810103126117425750906001915138611702565b80fd5b503d611724565b86513d6000823e3d90fd5b906040805192611766846114ca565b60403685378360005b6002811061177d5750505050565b8351631f6be8d960e21b8152600481018290526020919082816024816001600160a01b0389165afa90811561174c576000916117ca575b50600192506117c382856115ce565b520161176f565b919282813d83116117f4575b6117e081836114fc565b8101031261174257509060019151386117b4565b503d6117d6565b90604080519261180a846114ca565b60403685378360005b600281106118215750505050565b8351634903b0d160e01b8152600481018290526020919082816024816001600160a01b0389165afa90811561174c5760009161186e575b506001925061186782856115ce565b5201611813565b919282813d8311611898575b61188481836114fc565b810103126117425750906001915138611858565b503d61187a565b604051637e062a3560e11b81526001600160a01b03916020908290600490829086165afa908115610395576000916118d657501690565b6020813d60201161190b575b816118ef602093836114fc565b81010312611907575190828216820361174257501690565b5080fd5b3d91506118e2565b61192f9092919260408051611927816114ca565b3690376116a5565b9160005b6002811061193f575050565b80670de0b6b3a7640000611963611958600194886115ce565b5161057e84876115ce565b0461196e82876115ce565b5201611933565b9193909360405190630f446c1d60e41b82526020826004816001600160a01b038298165afa91821561039557600092611b75575b506119b48284611ba9565b809660009260019785891b9660029287890460021488151715611b61579290918b94928796975086945b838610611ace575050505050506119f5919261158e565b9160021b838104600214841517156106d857611a17611a1e91611a24946115ae565b93876115ae565b9061164c565b918460005b60ff8110611a3b575b50505050505090565b86611a4f85611a4a838061158e565b61164c565b906001600160ff1b0381168103611ab9578791611a7585610c908a611a7b95871b61164c565b906115ae565b978881811115611aa35790611a8f916115a1565b1115611a9e5785905b01611a29565b611a32565b611aac916115a1565b1115611a9e578590611a98565b601185634e487b7160e01b6000525260246000fd5b9193809650859791939514600014611b3757611af58d611aef86809461164c565b9961158e565b818d1b91808304871490151715611b22578c91611b11916115ae565b965b0193918c9593919796976119de565b60118c634e487b7160e01b6000525260246000fd5b8b878314611b595750611af58d611aef611b518a876115ce565b51809461164c565b909796611b13565b634e487b7160e01b87526011600452602487fd5b90916020823d602011611ba1575b81611b90602093836114fc565b8101031261174257505190386119a9565b3d9150611b83565b90600090815b60028110611cfb57508115611cf357819260019282841b91600293808404600214901517156106d85790926000198301838111929160005b60ff8110611bfb575b505050505050505090565b8860005b838110611ca357508099611c13898961158e565b91818b1b928284048614831517156106d85781611c348a95611c399361164c565b61158e565b926106d857611c48908661158e565b91600391808302928304036106d857611a75611c65928c9461164c565b998a81811115611c8d5790611c79916115a1565b1115611c885787905b01611be7565b611bf0565b611c96916115a1565b1115611c88578790611c82565b959697919981611cb9919c9a9c9692959661158e565b611cc387836115ce565b5190818d1b918083048614901517156106d8578c91611ce1916115ae565b999b999a929897969195949101611bff565b505050600090565b91611d0c60019161062785876115ce565b9201611baf565b919091600280841015611e6f57849060009160019584871b95858704841486151715611e5b5788929185915b858310611e035750505090611d539161158e565b92811b9084820414841517156106d857611d73611a1e91611d7a946115ae565b93866115ae565b908360005b60ff8110611d90575b505050505090565b85611d9f84611a4a838061158e565b906001600160ff1b03811681036106d8578691611a7585610c9089611dc595871b61164c565b968781811115611ded5790611dd9916115a1565b1115611de85784905b01611d7f565b611d88565b611df6916115a1565b1115611de8578490611de2565b9295919350919088838514611e535750611e2a8a611e24611b5187866115ce565b9761158e565b818a1b918083048714901517156106d8578991611e46916115ae565b935b019091899392611d3f565b909593611e48565b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152601460248201527f6465763a20692061626f7665204e5f434f494e530000000000000000000000006044820152606490fdfea164736f6c6343000818000a",
  "devdoc": {
    "details": "This contract provides utility functions for retrieving information and calculating fees related to stable swaps with two coins.",
    "kind": "dev",
    "methods": {
      "PRECISION_MUL(address)": {
        "params": {
          "_swap": "Address of the stable swap contract"
        }
      },
      "RATES(address)": {
        "params": {
          "_swap": "Address of the stable swap contract"
        }
      },
      "_xp_mem(address,uint256[2])": {
        "params": {
          "_balances": "The array of balances to calculate virtual balances from."
        }
      },
      "balances(address)": {
        "params": {
          "_swap": "Address of the stable swap contract"
        }
      },
      "calc_coins_amount(address,uint256)": {
        "params": {
          "_amount": "Amount of LP tokens to burn in the withdrawal",
          "_swap": "Address of the stable swap contract"
        }
      },
      "get_D_mem(address,uint256[2],uint256)": {
        "params": {
          "_balances": "Array of balances to calculate virtual balances from.",
          "amp": "Amplification factor of the pool."
        }
      },
      "get_add_liquidity_fee(address,uint256[2])": {
        "params": {
          "_swap": "Address of the stable swap contract",
          "amounts": "Array of amounts for each coin being deposited"
        }
      },
      "get_add_liquidity_mint_amount(address,uint256[2])": {
        "params": {
          "_swap": "Address of the stable swap contract",
          "amounts": "Array of amounts for each coin being deposited"
        }
      },
      "get_dx(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_swap": ": Addresses of pool conracts .",
          "dy": ":  the given amount out",
          "i": ": the token index.",
          "j": ": the token index ",
          "max_dx": ": the maximum of amount in "
        }
      },
      "get_exchange_fee(address,uint256,uint256,uint256)": {
        "params": {
          "_swap": "Address of the stable swap contract",
          "dx": "Amount of token to swap from",
          "i": "Index of the token to swap from",
          "j": "Index of the token to swap to"
        },
        "returns": {
          "exAdminFee": "Admin fee for the swap",
          "exFee": "Exchange fee for the swap"
        }
      },
      "get_remove_liquidity_imbalance_fee(address,uint256[2])": {
        "params": {
          "_swap": "Address of the stable swap contract",
          "amounts": "Array of amounts for each coin being withdrawn"
        }
      },
      "get_remove_liquidity_one_coin_fee(address,uint256,uint256)": {
        "params": {
          "_swap": "Address of the stable swap contract",
          "_token_amount": "Amount of liquidity tokens being withdrawn",
          "i": "Index of the coin to withdraw"
        }
      },
      "token(address)": {
        "params": {
          "_swap": "Address of the stable swap contract"
        }
      }
    },
    "title": "StableSwapTwoPoolInfo",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PRECISION_MUL(address)": {
        "notice": "Get the precision multipliers for each coin in the pool"
      },
      "RATES(address)": {
        "notice": "Get the exchange rates for each coin in the pool"
      },
      "_xp_mem(address,uint256[2])": {
        "notice": "Calculates the array of virtual balances for the pool, scaled by precision, using provided balances."
      },
      "balances(address)": {
        "notice": "Get the balances of each coin in the pool"
      },
      "calc_coins_amount(address,uint256)": {
        "notice": "Calculate the amount of each coin received when removing liquidity "
      },
      "get_D_mem(address,uint256[2],uint256)": {
        "notice": "Calculates the total value of the pool's assets (invariant D), given balances and amplification factor."
      },
      "get_add_liquidity_fee(address,uint256[2])": {
        "notice": "Calculate the fee charged when adding liquidity"
      },
      "get_add_liquidity_mint_amount(address,uint256[2])": {
        "notice": "Calculate the amount of LP token received when adding liquidity"
      },
      "get_dx(address,uint256,uint256,uint256,uint256)": {
        "notice": "get amountIn  with the given amount out  "
      },
      "get_exchange_fee(address,uint256,uint256,uint256)": {
        "notice": "Calculates the exchange fee and admin fee for a token swap"
      },
      "get_remove_liquidity_imbalance_fee(address,uint256[2])": {
        "notice": "Calculate the fee charged when removing liquidity"
      },
      "get_remove_liquidity_one_coin_fee(address,uint256,uint256)": {
        "notice": "Calculate the fee charged when removing liquidity for a single coin"
      },
      "token(address)": {
        "notice": "Get the LP token of the two pool"
      }
    },
    "notice": "Contract for retrieving information about stable swaps with two coins",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}