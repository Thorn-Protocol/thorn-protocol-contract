{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stableSwapFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stableSwapInfo",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "flag",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getStableAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stableSwapFactory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "flag",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getStableAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stableSwapFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "input",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "output",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "flag",
          "type": "uint256"
        }
      ],
      "name": "getStableInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "swapContract",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8d63d38dc024b1ca96aee4fa762f5dd52c073a346b2ebbf54c1ad406cebb543",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "594393",
    "logsBloom": "0x
    "blockHash": "0x9edc97918abe20e1182e7c078d799fab76d799e2f74dff435b18d79fc98081ac",
    "transactionHash": "0xf8d63d38dc024b1ca96aee4fa762f5dd52c073a346b2ebbf54c1ad406cebb543",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "594393",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7476d54eca9d37e76daefb5ed7a39afc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableSwapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableSwapInfo\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flag\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getStableAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableSwapFactory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flag\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getStableAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableSwapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"getStableInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SmartRouterHelper.sol\":\"SmartRouterHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IStableSwap {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the LP token of the two pool\\r\\n     */\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balances of each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function balances(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of coins within the pool\\r\\n     */\\r\\n    function N_COINS() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the exchange rates for each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function RATES(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the address of coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the precision multipliers for each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function PRECISION_MUL(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The pool swap fee.\\r\\n     * The method returns fee as an integer with 1e10 precision.\\r\\n     */\\r\\n    function fee() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The percentage of the swap fee that is taken as an admin fee.\\r\\n     * The method returns an integer with with 1e10 precision.\\r\\n     */\\r\\n    function admin_fee() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for the amplification coefficient of the pool.\\r\\n     * The amplification coefficient A determines a pool\\u2019s tolerance for imbalance between the assets within it.\\r\\n     */\\r\\n    function A() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\\r\\n    * Can get the absolute price by multiplying it with the price of the underlying assets.\\r\\n    * The method returns virtual_price as an integer with 1e18 precision.\\r\\n    */\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\\r\\n     * Returns the expected amount of LP tokens received. \\r\\n     * This calculation accounts for slippage, but not fees.\\r\\n     * @param amounts: Amount of each coin being deposited\\r\\n     * @param deposit: Set True for deposits, False for withdrawals\\r\\n     */\\r\\n    function calc_token_amount(uint256[2] memory amounts, bool deposit) external view returns (uint256);\\r\\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\\r\\n     * @param i: Index of coin to swap from\\r\\n     * @param j: Index of coin to swap to\\r\\n     * @param dx: Amount of coin i to swap\\r\\n     */\\r\\n    function get_dy(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\\r\\n    * @param i Index of coin to swap from\\r\\n    * @param j Index of coin to swap to\\r\\n    * @param dx Amount of coin i to swap\\r\\n    */\\r\\n    function get_dy_underlying(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount received when withdrawing a single coin.\\r\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\r\\n     * @param i: Index value of the coin to withdraw\\r\\n     */\\r\\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit coins into the pool\\r\\n     * @param amounts: Amount of each coin being deposited\\r\\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\\r\\n     */\\r\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Perform an exchange between two coins.\\r\\n     * @param i: Index of coin to swap from\\r\\n     * @param j: Index of coin to swap to\\r\\n     * @param dx: Amount of coin i to swap\\r\\n     * @param min_dy: \\tMinimum amount of j to receive\\r\\n     */\\r\\n    function exchange(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) external payable;\\r\\n\\r\\n     /**\\r\\n     * @notice Withdraw coins from the pool\\r\\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\\r\\n     * @param min_amounts: Minimum amounts of underlying coins to receive\\r\\n     */\\r\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external;\\r\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw coins from the pool in an imbalanced amount\\r\\n     * @param amounts: List of amounts of underlying coins to withdraw\\r\\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\\r\\n     */\\r\\n    function remove_liquidity_imbalance(uint256[2] memory amounts, uint256 max_burn_amount) external;\\r\\n    function remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw a single coin from the pool\\r\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\r\\n     * @param i: Index value of the coin to withdraw\\r\\n     * @param min_amount: Minimum amount of coin to receive\\r\\n     */\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 _token_amount,\\r\\n        uint256 i,\\r\\n        uint256 min_amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7d247b3b5a55e627ed93503380327de7e4b508f529a423f39dcf26cc9cb10589\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface IStableSwapFactory {\\r\\n    struct StableSwapPairInfo {\\r\\n        address swapContract;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        address LPContract;\\r\\n    }\\r\\n\\r\\n    struct StableSwapThreePoolPairInfo {\\r\\n        address swapContract;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        address token2;\\r\\n        address LPContract;\\r\\n    }\\r\\n\\r\\n    // solium-disable-next-line mixedcase\\r\\n    function pairLength() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Retrieves information of two pool.\\r\\n    * @param _tokenA : Addresses of ERC20 conracts.\\r\\n    * @param _tokenB : Addresses of ERC20 conracts.\\r\\n    */\\r\\n    function getPairInfo(address _tokenA, address _tokenB)\\r\\n    external\\r\\n    view\\r\\n    returns (StableSwapPairInfo memory info);\\r\\n\\r\\n    /**\\r\\n    * @notice Retrieves information of three pool.\\r\\n    * @param _tokenA : Addresses of ERC20 conracts.\\r\\n    * @param _tokenB : Addresses of ERC20 conracts.\\r\\n    */\\r\\n    function getThreePoolPairInfo(address _tokenA, address _tokenB)\\r\\n    external\\r\\n    view\\r\\n    returns (StableSwapThreePoolPairInfo memory info);\\r\\n}\\r\\n\",\"keccak256\":\"0xbb3ba86e1f83e73fa50ce2463f0373041561a553fc49e4e66f2d45e3425416cb\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface IStableSwapInfo {\\r\\n    /**\\r\\n     * @notice get amountIn  with the given amount out  \\r\\n     * @param _swap: Addresses of pool conracts .\\r\\n     * @param i: the token index.\\r\\n     * @param j: the token index \\r\\n     * @param  dy :  the given amount out\\r\\n     * @param max_dx: the maximum of amount in \\r\\n     */\\r\\n    function get_dx(\\r\\n        address _swap,\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dy,\\r\\n        uint256 max_dx\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x5350a0b26b1ee5deb28f45f4c491cc9b2f0a76411db5f32409ba7cb7b257221e\",\"license\":\"MIT\"},\"contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\n/// @title Optimized overflow and underflow safe math operations\\r\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\r\\nlibrary LowGasSafeMath {\\r\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\r\\n    /// @param x The augend\\r\\n    /// @param y The addend\\r\\n    /// @return z The sum of x and y\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x - y, reverts if underflows\\r\\n    /// @param x The minuend\\r\\n    /// @param y The subtrahend\\r\\n    /// @return z The difference of x and y\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x * y, reverts if overflows\\r\\n    /// @param x The multiplicand\\r\\n    /// @param y The multiplier\\r\\n    /// @return z The product of x and y\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require(x == 0 || (z = x * y) / x == y);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x + y, reverts if overflows or underflows\\r\\n    /// @param x The augend\\r\\n    /// @param y The addend\\r\\n    /// @return z The sum of x and y\\r\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n        require((z = x + y) >= x == (y >= 0));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x - y, reverts if overflows or underflows\\r\\n    /// @param x The minuend\\r\\n    /// @param y The subtrahend\\r\\n    /// @return z The difference of x and y\\r\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n        require((z = x - y) <= x == (y >= 0));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xace198277a90cabd10817b1226718204a297e3ff70a9937b6a4bea60e7978e1f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SmartRouterHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../interfaces/IStableSwapFactory.sol\\\";\\r\\nimport \\\"../interfaces/IStableSwapInfo.sol\\\";\\r\\nimport \\\"./LowGasSafeMath.sol\\\";\\r\\nimport \\\"./TransferHelper.sol\\\";\\r\\nimport \\\"../interfaces/IStableSwap.sol\\\";\\r\\n\\r\\nlibrary SmartRouterHelper {\\r\\n    using LowGasSafeMath for uint256;\\r\\n\\r\\n    /************************************************** Stable **************************************************/\\r\\n\\r\\n    // get the pool info in stable swap\\r\\n    function getStableInfo(\\r\\n        address stableSwapFactory,\\r\\n        address input,\\r\\n        address output,\\r\\n        uint256 flag\\r\\n    ) public view returns (uint256 i, uint256 j, address swapContract) {\\r\\n        if (flag == 2) {\\r\\n            IStableSwapFactory.StableSwapPairInfo\\r\\n                memory info = IStableSwapFactory(stableSwapFactory).getPairInfo(\\r\\n                    input,\\r\\n                    output\\r\\n                );\\r\\n            i = input == info.token0 ? 0 : 1;\\r\\n            j = (i == 0) ? 1 : 0;\\r\\n            swapContract = info.swapContract;\\r\\n        } else if (flag == 3) {\\r\\n            IStableSwapFactory.StableSwapThreePoolPairInfo\\r\\n                memory info = IStableSwapFactory(stableSwapFactory)\\r\\n                    .getThreePoolPairInfo(input, output);\\r\\n\\r\\n            if (input == info.token0) i = 0;\\r\\n            else if (input == info.token1) i = 1;\\r\\n            else if (input == info.token2) i = 2;\\r\\n\\r\\n            if (output == info.token0) j = 0;\\r\\n            else if (output == info.token1) j = 1;\\r\\n            else if (output == info.token2) j = 2;\\r\\n\\r\\n            swapContract = info.swapContract;\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            swapContract != address(0),\\r\\n            \\\"getStableInfo: invalid pool address\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getStableAmountsIn(\\r\\n        address stableSwapFactory,\\r\\n        address stableSwapInfo,\\r\\n        address[] memory path,\\r\\n        uint256[] memory flag,\\r\\n        uint256 amountOut\\r\\n    ) public view returns (uint256[] memory amounts) {\\r\\n        uint256 length = path.length;\\r\\n        require(length >= 2, \\\"getStableAmountsIn: incorrect length\\\");\\r\\n\\r\\n        amounts = new uint256[](length);\\r\\n        amounts[length - 1] = amountOut;\\r\\n\\r\\n        for (uint256 i = length - 1; i > 0; i--) {\\r\\n            uint256 last = i - 1;\\r\\n            (uint256 k, uint256 j, address swapContract) = getStableInfo(\\r\\n                stableSwapFactory,\\r\\n                path[last],\\r\\n                path[i],\\r\\n                flag[last]\\r\\n            );\\r\\n            amounts[last] = IStableSwapInfo(stableSwapInfo).get_dx(\\r\\n                swapContract,\\r\\n                k,\\r\\n                j,\\r\\n                amounts[i],\\r\\n                type(uint256).max\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getStableAmountsOut(\\r\\n        address stableSwapFactory,\\r\\n        address[] memory path,\\r\\n        uint256[] memory flag,\\r\\n        uint256 amountIn\\r\\n    ) public view returns (uint256[] memory amounts) {\\r\\n        uint256 length = path.length;\\r\\n        require(length >= 2, \\\"getStableAmountsIn: incorrect length\\\");\\r\\n\\r\\n        amounts = new uint256[](length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint256 i = 0; i < length - 1; i++) {\\r\\n            (uint256 k, uint256 j, address swapContract) = getStableInfo(\\r\\n                stableSwapFactory,\\r\\n                path[i],\\r\\n                path[i + 1],\\r\\n                flag[i]\\r\\n            );\\r\\n            amounts[i + 1] = IStableSwap(swapContract).get_dy(k, j, amounts[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1facbbe695ff9c1cf63cfecb7fd4f426c3f2a159e57dcab6005a543a94bb0463\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    /// @notice Transfers tokens from the targeted address to the given destination\\r\\n    /// @notice Errors with 'STF' if transfer fails\\r\\n    /// @param token The contract address of the token to be transferred\\r\\n    /// @param from The originating address from which the tokens will be transferred\\r\\n    /// @param to The destination address of the transfer\\r\\n    /// @param value The amount to be transferred\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) =\\r\\n                            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers tokens from msg.sender to a recipient\\r\\n    /// @dev Errors with ST if transfer fails\\r\\n    /// @param token The contract address of the token which will be transferred\\r\\n    /// @param to The recipient of the transfer\\r\\n    /// @param value The value of the transfer\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\r\\n    }\\r\\n\\r\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\r\\n    /// @dev Errors with 'SA' if transfer fails\\r\\n    /// @param token The contract address of the token to be approved\\r\\n    /// @param to The target of the approval\\r\\n    /// @param value The amount of the given token the target will be allowed to spend\\r\\n    function safeApprove(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ETH to the recipient address\\r\\n    /// @dev Fails with `STE`\\r\\n    /// @param to The destination of the transfer\\r\\n    /// @param value The value to be transferred\\r\\n    function safeTransferROSE(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'STE');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd25f0d427f2a2c1b4a0df0a77d78b0aea6317805db7d1e0b00f3d7d0109bb575\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001a576109c89081610020823930815050f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80635923cab31461025c57806386be32f91461009c5763b735aecd1461003d57600080fd5b6080366003190112610097576100516103fa565b610059610410565b90604435916001600160a01b03918284168403610097576060936100809260643592610634565b906040939293519384526020840152166040820152f35b600080fd5b6080366003190112610097576100b06103fa565b67ffffffffffffffff90602435828111610097576100d2903690600401610476565b91604435908111610097576100eb9036906004016104e6565b918051916100fc6002841015610582565b610105836105da565b9182511561024657606435602084015260005b8460001981011161021e576000198501811015610234576001600160a01b03610141828461060c565b51169060018101811161021e57602061017f6064936001600160a01b0361016b600186018861060c565b5116610177858c61060c565b519188610634565b9490916001600160a01b03610194868b61060c565b5196604051978895869463556d6e9f60e01b8652600486015260248501526044840152165afa8015610212576000906101df575b600192506101d88383018761060c565b5201610118565b506020823d60201161020a575b816101f960209383610426565b8101031261009757600191516101c8565b3d91506101ec565b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b604051806102428682610546565b0390f35b634e487b7160e01b600052603260045260246000fd5b60a0366003190112610097576102706103fa565b610278610410565b67ffffffffffffffff916044358381116100975761029a903690600401610476565b92606490606435908111610097576102b69036906004016104e6565b926084938551956102ca6002881015610582565b6102d3876105da565b956000199788810190811161021e576084356102ef828a61060c565b52805b61030457604051806102428a82610546565b808981011161021e5761034e6001600160a01b036103248b84018661060c565b51166001600160a01b03610338848761060c565b51166103468c85018861060c565b51918a610634565b919061035a848c61060c565b51916001600160a01b0360405194633292f1c560e21b86521660048501526024840152604483015287820152898382015260208160a4816001600160a01b038a165afa908115610212576000916103c8575b506103b98a83018a61060c565b52801561021e578801806102f2565b90506020813d6020116103f2575b816103e360209383610426565b8101031261009757518a6103ac565b3d91506103d6565b600435906001600160a01b038216820361009757565b602435906001600160a01b038216820361009757565b90601f8019910116810190811067ffffffffffffffff82111761044857604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116104485760051b60200190565b9080601f830112156100975760209082356104908161045e565b9361049e6040519586610426565b81855260208086019260051b82010192831161009757602001905b8282106104c7575050505090565b81356001600160a01b03811681036100975781529083019083016104b9565b9080601f830112156100975760209082356105008161045e565b9361050e6040519586610426565b81855260208086019260051b82010192831161009757602001905b828210610537575050505090565b81358152908301908301610529565b602090602060408183019282815285518094520193019160005b82811061056e575050505090565b835185529381019392810192600101610560565b1561058957565b60405162461bcd60e51b8152602060048201526024808201527f676574537461626c65416d6f756e7473496e3a20696e636f7272656374206c656044820152630dccee8d60e31b6064820152608490fd5b906105e48261045e565b6105f16040519182610426565b8281528092610602601f199161045e565b0190602036910137565b80518210156102465760209160051b010190565b51906001600160a01b038216820361009757565b90939192936000936000948586600289146000146107e457505060408051632007bd0f60e11b81526001600160a01b03858116600483015293841660248201529697509193608091508690604490829087165afa9485156107da578695610734575b5050818060208601511691161460001461072b5760ff845b169384610723575060ff60015b16925116905b6001600160a01b038216156106d257565b60405162461bcd60e51b815260206004820152602360248201527f676574537461626c65496e666f3a20696e76616c696420706f6f6c206164647260448201526265737360e81b6064820152608490fd5b60ff906106bb565b60ff60016106ae565b909194506080813d6080116107d2575b8161075160809383610426565b810103126107ce578151916080830183811067ffffffffffffffff8211176107ba5781526107ad9160609161078582610620565b855261079360208301610620565b60208601526107a3818301610620565b9085015201610620565b6060820152923880610696565b634e487b7160e01b88526041600452602488fd5b8580fd5b3d9150610744565b81513d88823e3d90fd5b95949293909691976003146107fd575b505050506106c1565b6040805163923093cb60e01b81526001600160a01b0383811660048301528681166024830152959990989697509495929492939192909160a090899060449082908a165afa9788156109b15785986108f8575b50908591828060208b01511694168481146000146108b85750508185995b169283036108885750505050925b511690388080806107f4565b87015192935090911681036108a157505060019261087c565b8260608693960151160361087c576002935061087c565b909192838a01511681146000146108d657505084908160019961086e565b8660608a9b939b015116146108ef575b9085809261086e565b600298506108e6565b90975060a0813d60a0116109a9575b8161091460a09383610426565b810103126109a55781519060a0820182811067ffffffffffffffff821117610991576080849392610984928a965261094b81610620565b845261095960208201610620565b6020850152610969858201610620565b8585015261097960608201610620565b606085015201610620565b6080820152979091610850565b634e487b7160e01b87526041600452602487fd5b8480fd5b3d9150610907565b82513d87823e3d90fdfea164736f6c6343000818000a",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80635923cab31461025c57806386be32f91461009c5763b735aecd1461003d57600080fd5b6080366003190112610097576100516103fa565b610059610410565b90604435916001600160a01b03918284168403610097576060936100809260643592610634565b906040939293519384526020840152166040820152f35b600080fd5b6080366003190112610097576100b06103fa565b67ffffffffffffffff90602435828111610097576100d2903690600401610476565b91604435908111610097576100eb9036906004016104e6565b918051916100fc6002841015610582565b610105836105da565b9182511561024657606435602084015260005b8460001981011161021e576000198501811015610234576001600160a01b03610141828461060c565b51169060018101811161021e57602061017f6064936001600160a01b0361016b600186018861060c565b5116610177858c61060c565b519188610634565b9490916001600160a01b03610194868b61060c565b5196604051978895869463556d6e9f60e01b8652600486015260248501526044840152165afa8015610212576000906101df575b600192506101d88383018761060c565b5201610118565b506020823d60201161020a575b816101f960209383610426565b8101031261009757600191516101c8565b3d91506101ec565b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b604051806102428682610546565b0390f35b634e487b7160e01b600052603260045260246000fd5b60a0366003190112610097576102706103fa565b610278610410565b67ffffffffffffffff916044358381116100975761029a903690600401610476565b92606490606435908111610097576102b69036906004016104e6565b926084938551956102ca6002881015610582565b6102d3876105da565b956000199788810190811161021e576084356102ef828a61060c565b52805b61030457604051806102428a82610546565b808981011161021e5761034e6001600160a01b036103248b84018661060c565b51166001600160a01b03610338848761060c565b51166103468c85018861060c565b51918a610634565b919061035a848c61060c565b51916001600160a01b0360405194633292f1c560e21b86521660048501526024840152604483015287820152898382015260208160a4816001600160a01b038a165afa908115610212576000916103c8575b506103b98a83018a61060c565b52801561021e578801806102f2565b90506020813d6020116103f2575b816103e360209383610426565b8101031261009757518a6103ac565b3d91506103d6565b600435906001600160a01b038216820361009757565b602435906001600160a01b038216820361009757565b90601f8019910116810190811067ffffffffffffffff82111761044857604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116104485760051b60200190565b9080601f830112156100975760209082356104908161045e565b9361049e6040519586610426565b81855260208086019260051b82010192831161009757602001905b8282106104c7575050505090565b81356001600160a01b03811681036100975781529083019083016104b9565b9080601f830112156100975760209082356105008161045e565b9361050e6040519586610426565b81855260208086019260051b82010192831161009757602001905b828210610537575050505090565b81358152908301908301610529565b602090602060408183019282815285518094520193019160005b82811061056e575050505090565b835185529381019392810192600101610560565b1561058957565b60405162461bcd60e51b8152602060048201526024808201527f676574537461626c65416d6f756e7473496e3a20696e636f7272656374206c656044820152630dccee8d60e31b6064820152608490fd5b906105e48261045e565b6105f16040519182610426565b8281528092610602601f199161045e565b0190602036910137565b80518210156102465760209160051b010190565b51906001600160a01b038216820361009757565b90939192936000936000948586600289146000146107e457505060408051632007bd0f60e11b81526001600160a01b03858116600483015293841660248201529697509193608091508690604490829087165afa9485156107da578695610734575b5050818060208601511691161460001461072b5760ff845b169384610723575060ff60015b16925116905b6001600160a01b038216156106d257565b60405162461bcd60e51b815260206004820152602360248201527f676574537461626c65496e666f3a20696e76616c696420706f6f6c206164647260448201526265737360e81b6064820152608490fd5b60ff906106bb565b60ff60016106ae565b909194506080813d6080116107d2575b8161075160809383610426565b810103126107ce578151916080830183811067ffffffffffffffff8211176107ba5781526107ad9160609161078582610620565b855261079360208301610620565b60208601526107a3818301610620565b9085015201610620565b6060820152923880610696565b634e487b7160e01b88526041600452602488fd5b8580fd5b3d9150610744565b81513d88823e3d90fd5b95949293909691976003146107fd575b505050506106c1565b6040805163923093cb60e01b81526001600160a01b0383811660048301528681166024830152959990989697509495929492939192909160a090899060449082908a165afa9788156109b15785986108f8575b50908591828060208b01511694168481146000146108b85750508185995b169283036108885750505050925b511690388080806107f4565b87015192935090911681036108a157505060019261087c565b8260608693960151160361087c576002935061087c565b909192838a01511681146000146108d657505084908160019961086e565b8660608a9b939b015116146108ef575b9085809261086e565b600298506108e6565b90975060a0813d60a0116109a9575b8161091460a09383610426565b810103126109a55781519060a0820182811067ffffffffffffffff821117610991576080849392610984928a965261094b81610620565b845261095960208201610620565b6020850152610969858201610620565b8585015261097960608201610620565b606085015201610620565b6080820152979091610850565b634e487b7160e01b87526041600452602487fd5b8480fd5b3d9150610907565b82513d87823e3d90fdfea164736f6c6343000818000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}