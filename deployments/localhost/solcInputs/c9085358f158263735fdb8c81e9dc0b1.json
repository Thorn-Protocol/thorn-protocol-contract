{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/interfaces/IStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IStableSwap {\r\n\r\n    /**\r\n     * @notice Get the LP token of the two pool\r\n     */\r\n    function token() external view returns (address);\r\n\r\n    /**\r\n     * @notice Get the balances of each coin in the pool\r\n     * @param i Coin index\r\n     */\r\n    function balances(uint256 i) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the number of coins within the pool\r\n     */\r\n    function N_COINS() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the exchange rates for each coin in the pool\r\n     * @param i Coin index\r\n     */\r\n    function RATES(uint256 i) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the address of coin in the pool\r\n     * @param i Coin index\r\n     */\r\n    function coins(uint256 i) external view returns (address);\r\n\r\n    /**\r\n     * @notice Get the precision multipliers for each coin in the pool\r\n     * @param i Coin index\r\n     */\r\n    function PRECISION_MUL(uint256 i) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice The pool swap fee.\r\n     * The method returns fee as an integer with 1e10 precision.\r\n     */\r\n    function fee() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice The percentage of the swap fee that is taken as an admin fee.\r\n     * The method returns an integer with with 1e10 precision.\r\n     */\r\n    function admin_fee() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Getter for the amplification coefficient of the pool.\r\n     * The amplification coefficient A determines a pool’s tolerance for imbalance between the assets within it.\r\n     */\r\n    function A() external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\r\n    * Can get the absolute price by multiplying it with the price of the underlying assets.\r\n    * The method returns virtual_price as an integer with 1e18 precision.\r\n    */\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\r\n     * Returns the expected amount of LP tokens received. \r\n     * This calculation accounts for slippage, but not fees.\r\n     * @param amounts: Amount of each coin being deposited\r\n     * @param deposit: Set True for deposits, False for withdrawals\r\n     */\r\n    function calc_token_amount(uint256[2] memory amounts, bool deposit) external view returns (uint256);\r\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\r\n\r\n\r\n    /**\r\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\r\n     * @param i: Index of coin to swap from\r\n     * @param j: Index of coin to swap to\r\n     * @param dx: Amount of coin i to swap\r\n     */\r\n    function get_dy(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\r\n    * @param i Index of coin to swap from\r\n    * @param j Index of coin to swap to\r\n    * @param dx Amount of coin i to swap\r\n    */\r\n    function get_dy_underlying(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculate the amount received when withdrawing a single coin.\r\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\r\n     * @param i: Index value of the coin to withdraw\r\n     */\r\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Deposit coins into the pool\r\n     * @param amounts: Amount of each coin being deposited\r\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\r\n     */\r\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\r\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\r\n\r\n    /**\r\n     * @notice Perform an exchange between two coins.\r\n     * @param i: Index of coin to swap from\r\n     * @param j: Index of coin to swap to\r\n     * @param dx: Amount of coin i to swap\r\n     * @param min_dy: \tMinimum amount of j to receive\r\n     */\r\n    function exchange(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external payable;\r\n\r\n     /**\r\n     * @notice Withdraw coins from the pool\r\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\r\n     * @param min_amounts: Minimum amounts of underlying coins to receive\r\n     */\r\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external;\r\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\r\n\r\n\r\n    /**\r\n     * @notice Withdraw coins from the pool in an imbalanced amount\r\n     * @param amounts: List of amounts of underlying coins to withdraw\r\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\r\n     */\r\n    function remove_liquidity_imbalance(uint256[2] memory amounts, uint256 max_burn_amount) external;\r\n    function remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw a single coin from the pool\r\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\r\n     * @param i: Index value of the coin to withdraw\r\n     * @param min_amount: Minimum amount of coin to receive\r\n     */\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        uint256 i,\r\n        uint256 min_amount\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IStableSwapDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IStableSwapDeployer {\n\n    /**\n     * @dev onlyOwner\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     * @param _admin: Admin\n     * @param _LP: LP\n     */\n    function createSwapPair(\n        address _tokenA,\n        address _tokenB,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee,\n        address _admin,\n        address _LP\n    ) external returns (address);\n\n    /**\n     * @dev onlyOwner\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _tokenC: Addresses of ERC20 conracts .\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     * @param _admin: Admin\n     * @param _LP: LP\n     */\n    function createSwapPair(\n        address _tokenA,\n        address _tokenB,\n        address _tokenC,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee,\n        address _admin,\n        address _LP\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/IStableSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IStableSwapFactory {\r\n    struct StableSwapPairInfo {\r\n        address swapContract;\r\n        address token0;\r\n        address token1;\r\n        address LPContract;\r\n    }\r\n\r\n    struct StableSwapThreePoolPairInfo {\r\n        address swapContract;\r\n        address token0;\r\n        address token1;\r\n        address token2;\r\n        address LPContract;\r\n    }\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function pairLength() external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Retrieves information of two pool.\r\n    * @param _tokenA : Addresses of ERC20 conracts.\r\n    * @param _tokenB : Addresses of ERC20 conracts.\r\n    */\r\n    function getPairInfo(address _tokenA, address _tokenB)\r\n    external\r\n    view\r\n    returns (StableSwapPairInfo memory info);\r\n\r\n    /**\r\n    * @notice Retrieves information of three pool.\r\n    * @param _tokenA : Addresses of ERC20 conracts.\r\n    * @param _tokenB : Addresses of ERC20 conracts.\r\n    */\r\n    function getThreePoolPairInfo(address _tokenA, address _tokenB)\r\n    external\r\n    view\r\n    returns (StableSwapThreePoolPairInfo memory info);\r\n}\r\n"
    },
    "contracts/interfaces/IStableSwapInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IStableSwapInfo {\r\n    /**\r\n     * @notice get amountIn  with the given amount out  \r\n     * @param _swap: Addresses of pool conracts .\r\n     * @param i: the token index.\r\n     * @param j: the token index \r\n     * @param  dy :  the given amount out\r\n     * @param max_dx: the maximum of amount in \r\n     */\r\n    function get_dx(\r\n        address _swap,\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dy,\r\n        uint256 max_dx\r\n    ) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IStableSwapLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IStableSwapLP {\n    /**\n     * @notice Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Creates new tokens and assigns them to a specified address.\n     * @param _to Address to which the newly created tokens will be assigned.\n     * @param _amount Amount of tokens to be created and assigned.\n     */\n    function mint(address _to, uint256 _amount) external;\n\n    /**\n     * @notice Burns a specific amount of tokens from a specified address.\n     * @param _to Address from which tokens will be burned.\n     * @param _amount Amount of tokens to be burned.\n     */\n    function burnFrom(address _to, uint256 _amount) external;\n\n    /**\n     * @notice Sets a new minter address.\n     * @param _newMinter Address of the new minter.\n     */\n    function setMinter(address _newMinter) external;\n}\n"
    },
    "contracts/interfaces/IStableSwapLPFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IStableSwapLPFactory {\n\n    /**\n     * @notice createSwapLP\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _tokenC: Addresses of ERC20 conracts .\n     * @param _minter: Minter address\n     */\n    function createSwapLP(\n        address _tokenA,\n        address _tokenB,\n        address _tokenC,\n        address _minter\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/IStableSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Stable Swap\r\ninterface IStableSwapRouter {\r\n    /**\r\n    * @param path Array of token addresses in a stable swap pool.\r\n    * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\r\n    * @param amountIn Amount of the input token to be exchanged.\r\n    * @param amountOutMin Minimum expected amount of output tokens.\r\n    * @param to Recipient address to receive the exchanged tokens.\r\n    */\r\n    function exactInputStableSwap(\r\n        address[] calldata path,\r\n        uint256[] calldata flag,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address to\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    /**\r\n    * @param path Array of token addresses in a stable swap pool.\r\n    * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\r\n    * @param amountOut Amount of the input token to be exchanged.\r\n    * @param amountInMax Minimum expected amount of output tokens.\r\n     */\r\n    function getOutputStableSwap(\r\n        address[] calldata path,\r\n        uint256[] calldata flag,\r\n        uint256 amountOut,\r\n        uint256 amountInMax\r\n    ) external view returns (uint256 amountIn);\r\n}\r\n"
    },
    "contracts/interfaces/IWROSE.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWROSE {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/libraries/Constants.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.6;\r\n\r\n/// @title Constant state\r\n/// @notice Constant state used by the swap router\r\nlibrary Constants {\r\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used\r\n    uint256 internal constant CONTRACT_BALANCE = 0;\r\n\r\n    /// @dev Used as a flag for identifying msg.sender, saves gas by sending more 0 bytes\r\n    address internal constant MSG_SENDER = address(1);\r\n\r\n    /// @dev Used as a flag for identifying address(this), saves gas by sending more 0 bytes\r\n    address internal constant ADDRESS_THIS = address(2);\r\n}\r\n"
    },
    "contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.0;\r\n\r\n/// @title Optimized overflow and underflow safe math operations\r\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\r\nlibrary LowGasSafeMath {\r\n    /// @notice Returns x + y, reverts if sum overflows uint256\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    /// @notice Returns x * y, reverts if overflows\r\n    /// @param x The multiplicand\r\n    /// @param y The multiplier\r\n    /// @return z The product of x and y\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(x == 0 || (z = x * y) / x == y);\r\n    }\r\n\r\n    /// @notice Returns x + y, reverts if overflows or underflows\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x + y) >= x == (y >= 0));\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if overflows or underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x - y) <= x == (y >= 0));\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SmartRouterHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\nimport '../interfaces/IStableSwapFactory.sol';\r\nimport '../interfaces/IStableSwapInfo.sol';\r\nimport './LowGasSafeMath.sol';\r\nimport './TransferHelper.sol';\r\nimport '../interfaces/IStableSwap.sol';\r\n\r\n\r\nlibrary SmartRouterHelper {\r\n    using LowGasSafeMath for uint256;\r\n\r\n    /************************************************** Stable **************************************************/\r\n\r\n    // get the pool info in stable swap\r\n    function getStableInfo(\r\n        address stableSwapFactory,\r\n        address input,\r\n        address output,\r\n        uint256 flag\r\n    ) public view returns (uint256 i, uint256 j, address swapContract) {\r\n        if (flag == 2) {\r\n            IStableSwapFactory.StableSwapPairInfo memory info = IStableSwapFactory(stableSwapFactory).getPairInfo(input, output);\r\n            i = input == info.token0 ? 0 : 1;\r\n            j = (i == 0) ? 1 : 0;\r\n            swapContract = info.swapContract;\r\n        } else if (flag == 3) {\r\n            IStableSwapFactory.StableSwapThreePoolPairInfo memory info = IStableSwapFactory(stableSwapFactory).getThreePoolPairInfo(input, output);\r\n\r\n            if (input == info.token0) i = 0;\r\n            else if (input == info.token1) i = 1;\r\n            else if (input == info.token2) i = 2;\r\n\r\n            if (output == info.token0) j = 0;\r\n            else if (output == info.token1) j = 1;\r\n            else if (output == info.token2) j = 2;\r\n\r\n            swapContract = info.swapContract;\r\n        }\r\n\r\n        require(swapContract != address(0), \"getStableInfo: invalid pool address\");\r\n    }\r\n\r\n    function getStableAmountsIn(\r\n        address stableSwapFactory,\r\n        address stableSwapInfo,\r\n        address[] memory path,\r\n        uint256[] memory flag,\r\n        uint256 amountOut\r\n    ) public view returns (uint256[] memory amounts) {\r\n        uint256 length = path.length;\r\n        require(length >= 2, \"getStableAmountsIn: incorrect length\");\r\n\r\n        amounts = new uint256[](length);\r\n        amounts[length - 1] = amountOut;\r\n\r\n        for (uint256 i = length - 1; i > 0; i--) {\r\n            uint256 last = i - 1;\r\n            (uint256 k, uint256 j, address swapContract) = getStableInfo(stableSwapFactory, path[last], path[i], flag[last]);\r\n            amounts[last] = IStableSwapInfo(stableSwapInfo).get_dx(swapContract, k, j, amounts[i], type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function getStableAmountsOut(\r\n        address stableSwapFactory,\r\n        address[] memory path,\r\n        uint256[] memory flag,\r\n        uint256 amountIn\r\n    ) public view returns (uint256[] memory amounts) {\r\n        uint256 length = path.length;\r\n        require(length >= 2, \"getStableAmountsIn: incorrect length\");\r\n\r\n        amounts = new uint256[](length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i =0;i< length-1; i++) {\r\n            (uint256 k, uint256 j, address swapContract) = getStableInfo(stableSwapFactory, path[i], path[i+1], flag[i]);\r\n             amounts[i+1] = IStableSwap(swapContract).get_dy( k, j, amounts[i]);\r\n        }\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.6.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\nlibrary TransferHelper {\r\n    /// @notice Transfers tokens from the targeted address to the given destination\r\n    /// @notice Errors with 'STF' if transfer fails\r\n    /// @param token The contract address of the token to be transferred\r\n    /// @param from The originating address from which the tokens will be transferred\r\n    /// @param to The destination address of the transfer\r\n    /// @param value The amount to be transferred\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n                            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\r\n    }\r\n\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with ST if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\r\n    }\r\n\r\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\r\n    /// @dev Errors with 'SA' if transfer fails\r\n    /// @param token The contract address of the token to be approved\r\n    /// @param to The target of the approval\r\n    /// @param value The amount of the given token the target will be allowed to spend\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\r\n    }\r\n\r\n    /// @notice Transfers ETH to the recipient address\r\n    /// @dev Fails with `STE`\r\n    /// @param to The destination of the transfer\r\n    /// @param value The value to be transferred\r\n    function safeTransferROSE(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'STE');\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Token is ERC20 {\n    uint8 private immutable newDecimal;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimal\n    ) ERC20(_name, _symbol) {\n        newDecimal = _decimal;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return newDecimal;\n    }\n\n    function mint(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n    }\n\n    function burnFrom(address _to, uint256 _amount) external {\n        _burn(_to, _amount);\n    }\n}\n"
    },
    "contracts/stableSwap/plain-pools/StableSwapThreePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../../interfaces/IStableSwapLP.sol\";\n\n/**\n * @title StableSwapThreePool\n * @notice This contract facilitates liquidity addition, stable swapping, and liquidity removal in a stable swap system with three pools.\n * @notice It includes functions for adding liquidity, stable swapping, and removing liquidity, as well as parameter calculation for main operations.\n */\n\ncontract StableSwapThreePool is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    /*╔══════════════════════════════╗\n      ║          CONSTANT            ║\n      ╚══════════════════════════════╝*/\n\n    uint256 public constant N_COINS = 3; //The number of coins within the pool\n\n    uint256 public constant MAX_DECIMAL = 18; //Maximum number of decimal places for the token balances\n    uint256 public constant FEE_DENOMINATOR = 1e10; //The denominator used to calculate the fee, fees are expressed as a fraction of 1e10\n    uint256 public constant PRECISION = 1e18; // The precision to which values are calculated, accurate up to 18 decimal places\n    uint256[N_COINS] public PRECISION_MUL; //Array of integers that coin balances are multiplied by in order to adjust their precision to 18 decimal places\n    uint256[N_COINS] public RATES; //Array of integers indicating the relative value of `1e18` tokens for each stablecoin\n\n    uint256 public constant MAX_ADMIN_FEE = 1e10;\n    uint256 public constant MAX_FEE = 5e9;\n    uint256 public constant MAX_A = 1e6;\n    uint256 public constant MAX_A_CHANGE = 10;\n    uint256 public constant MIN_ROSE_gas = 2300;\n    uint256 public constant MAX_ROSE_gas = 23000;\n\n    uint256 public constant ADMIN_ACTIONS_DELAY = 3 days;\n    uint256 public constant MIN_RAMP_TIME = 1 days;\n\n    address[N_COINS] public coins;\n    uint256[N_COINS] public balances;\n    uint256 public fee; // fee * 1e10.\n    uint256 public admin_fee; // admin_fee * 1e10.\n    uint256 public rose_gas = 4029; // transfer ROSE gas.\n\n    IStableSwapLP public token;\n\n    address constant ROSE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    bool support_ROSE;\n\n    uint256 public initial_A;\n    uint256 public future_A;\n    uint256 public initial_A_time;\n    uint256 public future_A_time;\n\n    uint256 public admin_actions_deadline;\n    uint256 public future_fee;\n    uint256 public future_admin_fee;\n\n    uint256 public kill_deadline;\n    uint256 public constant KILL_DEADLINE_DT = 2 * 30 days;\n    bool public is_killed;\n\n    address public immutable STABLESWAP_FACTORY;\n    bool public isInitialized;\n\n    /*╔══════════════════════════════╗\n      ║          EVENT               ║\n      ╚══════════════════════════════╝*/\n\n    event TokenExchange(\n        address indexed buyer,\n        uint256 sold_id,\n        uint256 tokens_sold,\n        uint256 bought_id,\n        uint256 tokens_bought\n    );\n    event AddLiquidity(\n        address indexed provider,\n        uint256[N_COINS] token_amounts,\n        uint256[N_COINS] fees,\n        uint256 invariant,\n        uint256 token_supply\n    );\n    event RemoveLiquidity(\n        address indexed provider,\n        uint256[N_COINS] token_amounts,\n        uint256[N_COINS] fees,\n        uint256 token_supply\n    );\n    event RemoveLiquidityOne(\n        address indexed provider,\n        uint256 index,\n        uint256 token_amount,\n        uint256 coin_amount\n    );\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[N_COINS] token_amounts,\n        uint256[N_COINS] fees,\n        uint256 invariant,\n        uint256 token_supply\n    );\n    event CommitNewFee(\n        uint256 indexed deadline,\n        uint256 fee,\n        uint256 admin_fee\n    );\n    event NewFee(uint256 fee, uint256 admin_fee);\n    event RampA(\n        uint256 old_A,\n        uint256 new_A,\n        uint256 initial_time,\n        uint256 future_time\n    );\n    event StopRampA(uint256 A, uint256 t);\n    event SetROSEGas(uint256 rose_gas);\n    event RevertParameters();\n    event DonateAdminFees();\n    event Kill();\n    event Unkill();\n\n    /*╔══════════════════════════════╗\n     ║          CONSTRUCTOR         ║\n     ╚══════════════════════════════╝*/\n\n    /**\n     * @notice constructor\n     */\n    constructor() {\n        STABLESWAP_FACTORY = msg.sender;\n    }\n\n    /**\n     * @notice initialize\n     * @param _coins: Addresses of ERC20 conracts of coins (c-tokens) involved\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     * @param _owner: Owner\n     * @param _LP: LP address\n     */\n    function initialize(\n        address[N_COINS] memory _coins,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee,\n        address _owner,\n        address _LP\n    ) external {\n        require(!isInitialized, \"Operations: Already initialized\");\n        require(msg.sender == STABLESWAP_FACTORY, \"Operations: Not factory\");\n        require(_A <= MAX_A, \"_A exceeds maximum\");\n        require(_fee <= MAX_FEE, \"_fee exceeds maximum\");\n        require(_admin_fee <= MAX_ADMIN_FEE, \"_admin_fee exceeds maximum\");\n        isInitialized = true;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            require(_coins[i] != address(0), \"ZERO Address\");\n            uint256 coinDecimal;\n            if (_coins[i] == ROSE_ADDRESS) {\n                coinDecimal = 18;\n                support_ROSE = true;\n            } else {\n                coinDecimal = IERC20Metadata(_coins[i]).decimals();\n            }\n            require(\n                coinDecimal <= MAX_DECIMAL,\n                \"The maximum decimal cannot exceed 18\"\n            );\n            //set PRECISION_MUL and  RATES\n            PRECISION_MUL[i] = 10 ** (MAX_DECIMAL - coinDecimal);\n            RATES[i] = PRECISION * PRECISION_MUL[i];\n        }\n        coins = _coins;\n        initial_A = _A;\n        future_A = _A;\n        fee = _fee;\n        admin_fee = _admin_fee;\n        kill_deadline = block.timestamp + KILL_DEADLINE_DT;\n        token = IStableSwapLP(_LP);\n\n        transferOwnership(_owner);\n    }\n\n    /*╔══════════════════════════════╗\n      ║         VIEW FUNCTIONS       ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice Retrieves the current value of parameter A.\n     * Handles ramping A up or down over time if specified.\n     */\n    function get_A() internal view returns (uint256) {\n        //Handle ramping A up or down\n        uint256 t1 = future_A_time;\n        uint256 A1 = future_A;\n        if (block.timestamp < t1) {\n            uint256 A0 = initial_A;\n            uint256 t0 = initial_A_time;\n            // Expressions in uint256 cannot have negative numbers, thus \"if\"\n            if (A1 > A0) {\n                return A0 + ((A1 - A0) * (block.timestamp - t0)) / (t1 - t0);\n            } else {\n                return A0 - ((A0 - A1) * (block.timestamp - t0)) / (t1 - t0);\n            }\n        } else {\n            // when t1 == 0 or block.timestamp >= t1\n            return A1;\n        }\n    }\n\n    /**\n     * @notice Getter for the amplification coefficient of the pool.\n     * The amplification coefficient A determines a pool’s tolerance for imbalance between the assets within it.\n     */\n    function A() external view returns (uint256) {\n        return get_A();\n    }\n\n    /**\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision\n     */\n    function _xp() internal view returns (uint256[N_COINS] memory result) {\n        result = RATES;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            result[i] = (result[i] * balances[i]) / PRECISION;\n        }\n    }\n\n    /**\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision, using provided balances.\n     * @param _balances The array of balances to calculate virtual balances from.\n     */\n    function _xp_mem(\n        uint256[N_COINS] memory _balances\n    ) internal view returns (uint256[N_COINS] memory result) {\n        result = RATES;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            result[i] = (result[i] * _balances[i]) / PRECISION;\n        }\n    }\n\n    /**\n     * @notice Calculates the total value of the pool's assets (invariant D), given virtual balances and amplification factor.\n     * @param xp Array of virtual balances for the pool, scaled by precision.\n     * @param amp Amplification factor of the pool.\n     * @return D The total value of the pool's assets (invariant D).\n     */\n    function get_D(\n        uint256[N_COINS] memory xp,\n        uint256 amp\n    ) internal pure returns (uint256) {\n        uint256 S;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            S += xp[i];\n        }\n        if (S == 0) {\n            return 0;\n        }\n\n        uint256 Dprev;\n        uint256 D = S;\n        uint256 Ann = amp * N_COINS;\n        for (uint256 j = 0; j < 255; j++) {\n            uint256 D_P = D;\n            for (uint256 k = 0; k < N_COINS; k++) {\n                D_P = (D_P * D) / (xp[k] * N_COINS); // If division by 0, this will be borked: only withdrawal will work. And that is good\n            }\n            Dprev = D;\n            D =\n                ((Ann * S + D_P * N_COINS) * D) /\n                ((Ann - 1) * D + (N_COINS + 1) * D_P);\n            // Equality with the precision of 1\n            if (D > Dprev) {\n                if (D - Dprev <= 1) {\n                    break;\n                }\n            } else {\n                if (Dprev - D <= 1) {\n                    break;\n                }\n            }\n        }\n        return D;\n    }\n\n    /**\n     * @notice Calculates the total value of the pool's assets (invariant D), given balances and amplification factor.\n     * @param _balances Array of balances to calculate virtual balances from.\n     * @param amp Amplification factor of the pool.\n     */\n    function get_D_mem(\n        uint256[N_COINS] memory _balances,\n        uint256 amp\n    ) internal view returns (uint256) {\n        return get_D(_xp_mem(_balances), amp);\n    }\n\n    /**\n     * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\n     * Can get the absolute price by multiplying it with the price of the underlying assets.\n     * The method returns virtual_price as an integer with 1e18 precision.\n     */\n    function get_virtual_price() external view returns (uint256) {\n        /**\n        Returns portfolio virtual price (for calculating profit)\n        scaled up by 1e18\n        */\n        uint256 D = get_D(_xp(), get_A());\n        /**\n        D is in the units similar to DAI (e.g. converted to precision 1e18)\n        When balanced, D = n * x_u - total virtual value of the portfolio\n        */\n        uint256 token_supply = token.totalSupply();\n        return (D * PRECISION) / token_supply;\n    }\n\n    /**\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\n     * Returns the expected amount of LP tokens received.\n     * This calculation accounts for slippage, but not fees.\n     * @param amounts: Amount of each coin being deposited\n     * @param deposit: Set True for deposits, False for withdrawals\n     */\n    function calc_token_amount(\n        uint256[N_COINS] memory amounts,\n        bool deposit\n    ) external view returns (uint256) {\n        /**\n        Simplified method to calculate addition or reduction in token supply at\n        deposit or withdrawal without taking fees into account (but looking at\n        slippage).\n        Needed to prevent front-running, not for precise calculations!\n        */\n        uint256[N_COINS] memory _balances = balances;\n        uint256 amp = get_A();\n        uint256 D0 = get_D_mem(_balances, amp);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (deposit) {\n                _balances[i] += amounts[i];\n            } else {\n                _balances[i] -= amounts[i];\n            }\n        }\n        uint256 D1 = get_D_mem(_balances, amp);\n        uint256 token_amount = token.totalSupply();\n        uint256 difference;\n        if (deposit) {\n            difference = D1 - D0;\n        } else {\n            difference = D0 - D1;\n        }\n        return (difference * token_amount) / D0;\n    }\n\n    /**\n     * @notice Get the amount of coin j one would receive for swapping x of coin i, using the current virtual balances.\n     * @param i Index of coin to swap from.\n     * @param j Index of coin to swap to\n     * @param x Amount of coin i to swap\n     * @param xp_ The array of virtual balances for the pool, scaled by precision.\n     */\n    function get_y(\n        uint256 i,\n        uint256 j,\n        uint256 x,\n        uint256[N_COINS] memory xp_\n    ) internal view returns (uint256) {\n        // x in the input is converted to the same price/precision\n        require(\n            (i != j) && (i < N_COINS) && (j < N_COINS),\n            \"Illegal parameter\"\n        );\n        uint256 amp = get_A();\n        uint256 D = get_D(xp_, amp);\n        uint256 c = D;\n        uint256 S_;\n        uint256 Ann = amp * N_COINS;\n\n        uint256 _x;\n        for (uint256 k = 0; k < N_COINS; k++) {\n            if (k == i) {\n                _x = x;\n            } else if (k != j) {\n                _x = xp_[k];\n            } else {\n                continue;\n            }\n            S_ += _x;\n            c = (c * D) / (_x * N_COINS);\n        }\n        c = (c * D) / (Ann * N_COINS);\n        uint256 b = S_ + D / Ann; // - D\n        uint256 y_prev;\n        uint256 y = D;\n\n        for (uint256 m = 0; m < 255; m++) {\n            y_prev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            // Equality with the precision of 1\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    break;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    break;\n                }\n            }\n        }\n        return y;\n    }\n\n    /**\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\n     * @param i: Index of coin to swap from\n     * @param j: Index of coin to swap to\n     * @param dx: Amount of coin i to swap\n     */\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256) {\n        // dx and dy in c-units\n        uint256[N_COINS] memory rates = RATES;\n        uint256[N_COINS] memory xp = _xp();\n\n        uint256 x = xp[i] + ((dx * rates[i]) / PRECISION);\n        uint256 y = get_y(i, j, x, xp);\n        uint256 dy = ((xp[j] - y - 1) * PRECISION) / rates[j];\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\n        return dy - _fee;\n    }\n\n    /**\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\n     * @param i Index of coin to swap from\n     * @param j Index of coin to swap to\n     * @param dx Amount of coin i to swap\n     */\n    function get_dy_underlying(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256) {\n        // dx and dy in underlying units\n        uint256[N_COINS] memory xp = _xp();\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\n\n        uint256 x = xp[i] + dx * precisions[i];\n        uint256 y = get_y(i, j, x, xp);\n        uint256 dy = (xp[j] - y - 1) / precisions[j];\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\n        return dy - _fee;\n    }\n\n    /**\n     * @notice Get the amount of coin i given a reduction in invariant D, considering a specific value of parameter A and current virtual balances.\n     * @param A_ The value of parameter A.\n     * @param i The index of the coin for which the output amount is calculated.\n     * @param xp The array of virtual balances for the pool, scaled by precision.\n     * @param D The new value of invariant D.\n     */\n    function get_y_D(\n        uint256 A_,\n        uint256 i,\n        uint256[N_COINS] memory xp,\n        uint256 D\n    ) internal pure returns (uint256) {\n        /**\n        Calculate x[i] if one reduces D from being calculated for xp to D\n\n        Done by solving quadratic equation iteratively.\n        x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\n        x_1**2 + b*x_1 = c\n\n        x_1 = (x_1**2 + c) / (2*x_1 + b)\n        */\n        // x in the input is converted to the same price/precision\n        require(i < N_COINS, \"dev: i above N_COINS\");\n        uint256 c = D;\n        uint256 S_;\n        uint256 Ann = A_ * N_COINS;\n\n        uint256 _x;\n        for (uint256 k = 0; k < N_COINS; k++) {\n            if (k != i) {\n                _x = xp[k];\n            } else {\n                continue;\n            }\n            S_ += _x;\n            c = (c * D) / (_x * N_COINS);\n        }\n        c = (c * D) / (Ann * N_COINS);\n        uint256 b = S_ + D / Ann;\n        uint256 y_prev;\n        uint256 y = D;\n\n        for (uint256 k = 0; k < 255; k++) {\n            y_prev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            // Equality with the precision of 1\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    break;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    break;\n                }\n            }\n        }\n        return y;\n    }\n\n    function _calc_withdraw_one_coin(\n        uint256 _token_amount,\n        uint256 i\n    ) internal view returns (uint256, uint256) {\n        // First, need to calculate\n        // * Get current D\n        // * Solve Eqn against y_i for D - _token_amount\n        uint256 amp = get_A();\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\n        uint256 total_supply = token.totalSupply();\n\n        uint256[N_COINS] memory xp = _xp();\n\n        uint256 D0 = get_D(xp, amp);\n        uint256 D1 = D0 - (_token_amount * D0) / total_supply;\n        uint256[N_COINS] memory xp_reduced = xp;\n\n        uint256 new_y = get_y_D(amp, i, xp, D1);\n        uint256 dy_0 = (xp[i] - new_y) / precisions[i]; // w/o fees\n\n        for (uint256 k = 0; k < N_COINS; k++) {\n            uint256 dx_expected;\n            if (k == i) {\n                dx_expected = (xp[k] * D1) / D0 - new_y;\n            } else {\n                dx_expected = xp[k] - (xp[k] * D1) / D0;\n            }\n            xp_reduced[k] -= (_fee * dx_expected) / FEE_DENOMINATOR;\n        }\n        uint256 dy = xp_reduced[i] - get_y_D(amp, i, xp_reduced, D1);\n        dy = (dy - 1) / precisions[i]; // Withdraw less to account for rounding errors\n\n        return (dy, dy_0 - dy);\n    }\n\n    /**\n     * @notice Calculate the amount received when withdrawing a single coin.\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\n     * @param i: Index value of the coin to withdraw\n     */\n    function calc_withdraw_one_coin(\n        uint256 _token_amount,\n        uint256 i\n    ) external view returns (uint256) {\n        (uint256 dy, ) = _calc_withdraw_one_coin(_token_amount, i);\n        return dy;\n    }\n\n    /*╔══════════════════════════════╗\n      ║          USER FUNCTIONS      ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice Deposit coins into the pool\n     * @param amounts: Amount of each coin being deposited\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\n     */\n    function add_liquidity(\n        uint256[N_COINS] memory amounts,\n        uint256 min_mint_amount\n    ) external payable nonReentrant {\n        //Amounts is amounts of c-tokens\n        require(!is_killed, \"Killed\");\n        if (!support_ROSE) {\n            require(msg.value == 0, \"Inconsistent quantity\"); // Avoid sending ROSE by mistake.\n        }\n        uint256[N_COINS] memory fees;\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\n        uint256 _admin_fee = admin_fee;\n        uint256 amp = get_A();\n\n        uint256 token_supply = token.totalSupply();\n        //Initial invariant\n        uint256 D0;\n        uint256[N_COINS] memory old_balances = balances;\n        if (token_supply > 0) {\n            D0 = get_D_mem(old_balances, amp);\n        }\n        uint256[N_COINS] memory new_balances = [\n            old_balances[0],\n            old_balances[1],\n            old_balances[2]\n        ];\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (token_supply == 0) {\n                require(amounts[i] > 0, \"Initial deposit requires all coins\");\n            }\n            // balances store amounts of c-tokens\n            new_balances[i] = old_balances[i] + amounts[i];\n        }\n\n        // Invariant after change\n        uint256 D1 = get_D_mem(new_balances, amp);\n        require(D1 > D0, \"D1 must be greater than D0\");\n\n        // We need to recalculate the invariant accounting for fees\n        // to calculate fair user's share\n        uint256 D2 = D1;\n        if (token_supply > 0) {\n            // Only account for fees if we are not the first to deposit\n            for (uint256 i = 0; i < N_COINS; i++) {\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\n                uint256 difference;\n                if (ideal_balance > new_balances[i]) {\n                    difference = ideal_balance - new_balances[i];\n                } else {\n                    difference = new_balances[i] - ideal_balance;\n                }\n\n                fees[i] = (_fee * difference) / FEE_DENOMINATOR;\n                balances[i] =\n                    new_balances[i] -\n                    ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\n                new_balances[i] -= fees[i];\n            }\n            D2 = get_D_mem(new_balances, amp);\n        } else {\n            balances = new_balances;\n        }\n\n        // Calculate, how much pool tokens to mint\n        uint256 mint_amount;\n        if (token_supply == 0) {\n            mint_amount = D1; // Take the dust if there was any\n        } else {\n            mint_amount = (token_supply * (D2 - D0)) / D0;\n        }\n        require(mint_amount >= min_mint_amount, \"Slippage screwed you\");\n\n        // Take coins from the sender\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 amount = amounts[i];\n            address coin = coins[i];\n            transfer_in(coin, amount);\n        }\n\n        // Mint pool tokens\n        token.mint(msg.sender, mint_amount);\n\n        emit AddLiquidity(\n            msg.sender,\n            amounts,\n            fees,\n            D1,\n            token_supply + mint_amount\n        );\n    }\n\n    /**\n     * @notice Perform an exchange between two coins.\n     * @param i: Index of coin to swap from\n     * @param j: Index of coin to swap to\n     * @param dx: Amount of coin i to swap\n     * @param min_dy: \tMinimum amount of j to receive\n     */\n    function exchange(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external payable nonReentrant {\n        require(!is_killed, \"Killed\");\n        if (!support_ROSE) {\n            require(msg.value == 0, \"Inconsistent quantity\"); // Avoid sending ROSE by mistake.\n        }\n\n        uint256[N_COINS] memory old_balances = balances;\n        uint256[N_COINS] memory xp = _xp_mem(old_balances);\n\n        uint256 x = xp[i] + (dx * RATES[i]) / PRECISION;\n        uint256 y = get_y(i, j, x, xp);\n\n        uint256 dy = xp[j] - y - 1; //  -1 just in case there were some rounding errors\n        uint256 dy_fee = (dy * fee) / FEE_DENOMINATOR;\n\n        // Convert all to real units\n        dy = ((dy - dy_fee) * PRECISION) / RATES[j];\n        require(dy >= min_dy, \"Exchange resulted in fewer coins than expected\");\n\n        uint256 dy_admin_fee = (dy_fee * admin_fee) / FEE_DENOMINATOR;\n        dy_admin_fee = (dy_admin_fee * PRECISION) / RATES[j];\n\n        // Change balances exactly in same way as we change actual ERC20 coin amounts\n        balances[i] = old_balances[i] + dx;\n        // When rounding errors happen, we undercharge admin fee in favor of LP\n        balances[j] = old_balances[j] - dy - dy_admin_fee;\n\n        address iAddress = coins[i];\n        if (iAddress == ROSE_ADDRESS) {\n            require(dx == msg.value, \"Inconsistent quantity\");\n        } else {\n            IERC20(iAddress).safeTransferFrom(msg.sender, address(this), dx);\n        }\n        address jAddress = coins[j];\n        transfer_out(jAddress, dy);\n        emit TokenExchange(msg.sender, i, dx, j, dy);\n    }\n\n    /**\n     * @notice Withdraw coins from the pool\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\n     * @param min_amounts: Minimum amounts of underlying coins to receive\n     */\n    function remove_liquidity(\n        uint256 _amount,\n        uint256[N_COINS] memory min_amounts\n    ) external nonReentrant {\n        uint256 total_supply = token.totalSupply();\n        uint256[N_COINS] memory amounts;\n        uint256[N_COINS] memory fees; //Fees are unused but we've got them historically in event\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 value = (balances[i] * _amount) / total_supply;\n            require(\n                value >= min_amounts[i],\n                \"Withdrawal resulted in fewer coins than expected\"\n            );\n            balances[i] -= value;\n            amounts[i] = value;\n            transfer_out(coins[i], value);\n        }\n\n        token.burnFrom(msg.sender, _amount); // dev: insufficient funds\n\n        emit RemoveLiquidity(msg.sender, amounts, fees, total_supply - _amount);\n    }\n\n    /**\n     * @notice Withdraw coins from the pool in an imbalanced amount\n     * @param amounts: List of amounts of underlying coins to withdraw\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\n     */\n    function remove_liquidity_imbalance(\n        uint256[N_COINS] memory amounts,\n        uint256 max_burn_amount\n    ) external nonReentrant {\n        require(!is_killed, \"Killed\");\n\n        uint256 token_supply = token.totalSupply();\n        require(token_supply > 0, \"dev: zero total supply\");\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\n        uint256 _admin_fee = admin_fee;\n        uint256 amp = get_A();\n\n        uint256[N_COINS] memory old_balances = balances;\n        uint256[N_COINS] memory new_balances = [\n            old_balances[0],\n            old_balances[1],\n            old_balances[2]\n        ];\n        uint256 D0 = get_D_mem(old_balances, amp);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            new_balances[i] -= amounts[i];\n        }\n        uint256 D1 = get_D_mem(new_balances, amp);\n        uint256[N_COINS] memory fees;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 ideal_balance = (D1 * old_balances[i]) / D0;\n            uint256 difference;\n            if (ideal_balance > new_balances[i]) {\n                difference = ideal_balance - new_balances[i];\n            } else {\n                difference = new_balances[i] - ideal_balance;\n            }\n            fees[i] = (_fee * difference) / FEE_DENOMINATOR;\n            balances[i] =\n                new_balances[i] -\n                ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\n            new_balances[i] -= fees[i];\n        }\n        uint256 D2 = get_D_mem(new_balances, amp);\n\n        uint256 token_amount = ((D0 - D2) * token_supply) / D0;\n        require(token_amount > 0, \"token_amount must be greater than 0\");\n        token_amount += 1; // In case of rounding errors - make it unfavorable for the \"attacker\"\n        require(token_amount <= max_burn_amount, \"Slippage screwed you\");\n\n        token.burnFrom(msg.sender, token_amount); // dev: insufficient funds\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (amounts[i] > 0) {\n                transfer_out(coins[i], amounts[i]);\n            }\n        }\n        token_supply -= token_amount;\n        emit RemoveLiquidityImbalance(\n            msg.sender,\n            amounts,\n            fees,\n            D1,\n            token_supply\n        );\n    }\n\n    /**\n     * @notice Withdraw a single coin from the pool\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\n     * @param i: Index value of the coin to withdraw\n     * @param min_amount: Minimum amount of coin to receive\n     */\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        uint256 i,\n        uint256 min_amount\n    ) external nonReentrant {\n        // Remove _amount of liquidity all in a form of coin i\n        require(!is_killed, \"Killed\");\n        (uint256 dy, uint256 dy_fee) = _calc_withdraw_one_coin(\n            _token_amount,\n            i\n        );\n        require(dy >= min_amount, \"Not enough coins removed\");\n\n        balances[i] -= (dy + (dy_fee * admin_fee) / FEE_DENOMINATOR);\n        token.burnFrom(msg.sender, _token_amount); // dev: insufficient funds\n        transfer_out(coins[i], dy);\n\n        emit RemoveLiquidityOne(msg.sender, i, _token_amount, dy);\n    }\n\n    /**\n     * @notice Internal function to transfer tokens using function \"safeTransfer\" of IERC20.\n     * @param coin_address The address of the token to transfer.\n     * @param value The amount of tokens to transfer.\n     */\n    function transfer_out(address coin_address, uint256 value) internal {\n        if (coin_address == ROSE_ADDRESS) {\n            _safeTransferROSE(msg.sender, value);\n        } else {\n            IERC20(coin_address).safeTransfer(msg.sender, value);\n        }\n    }\n\n    /**\n     * @notice Internal function to transfer tokens using function \"safeTransferFrom\" of IERC20.\n     * @param coin_address The address of the token to transfer.\n     * @param value The amount of tokens to transfer.\n     */\n    function transfer_in(address coin_address, uint256 value) internal {\n        if (coin_address == ROSE_ADDRESS) {\n            require(value == msg.value, \"Inconsistent quantity\");\n        } else {\n            IERC20(coin_address).safeTransferFrom(\n                msg.sender,\n                address(this),\n                value\n            );\n        }\n    }\n\n    /**\n     * @notice Internal function to safely transfer ROSE tokens.\n     * @param to The address to transfer the ROSE tokens to.\n     * @param value The amount of ROSE tokens to transfer.\n     */\n    function _safeTransferROSE(address to, uint256 value) internal {\n        (bool success, ) = to.call{gas: rose_gas, value: value}(\"\");\n        require(success, \"ROSE transfer failed\");\n    }\n\n    /*╔══════════════════════════════╗\n     ║          ADMIN FUNCTIONS     ║\n     ╚══════════════════════════════╝*/\n\n    /**\n     * @notice set the gas limit for transferring ROSE tokens.\n     * @param _rose_gas The gas limit to be set.\n     * The gas limit should be within the acceptable range defined by MIN_ROSE_gas and MAX_ROSE_gas.\n     */\n    function set_rose_gas(uint256 _rose_gas) external onlyOwner {\n        require(\n            _rose_gas >= MIN_ROSE_gas && _rose_gas <= MAX_ROSE_gas,\n            \"Illegal gas\"\n        );\n        rose_gas = _rose_gas;\n        emit SetROSEGas(_rose_gas);\n    }\n\n    /**\n     * @notice Ramp A up or down by setting a new A to take effect at a future point in time.\n     * @param _future_A: New future value of A\n     * @param _future_time: Timestamp at which new A should take effect\n     */\n    function ramp_A(\n        uint256 _future_A,\n        uint256 _future_time\n    ) external onlyOwner {\n        require(\n            block.timestamp >= initial_A_time + MIN_RAMP_TIME,\n            \"dev : too early\"\n        );\n        require(\n            _future_time >= block.timestamp + MIN_RAMP_TIME,\n            \"dev: insufficient time\"\n        );\n\n        uint256 _initial_A = get_A();\n        require(\n            _future_A > 0 && _future_A < MAX_A,\n            \"_future_A must be between 0 and MAX_A\"\n        );\n        require(\n            (_future_A >= _initial_A &&\n                _future_A <= _initial_A * MAX_A_CHANGE) ||\n                (_future_A < _initial_A &&\n                    _future_A * MAX_A_CHANGE >= _initial_A),\n            \"Illegal parameter _future_A\"\n        );\n        initial_A = _initial_A;\n        future_A = _future_A;\n        initial_A_time = block.timestamp;\n        future_A_time = _future_time;\n\n        emit RampA(_initial_A, _future_A, block.timestamp, _future_time);\n    }\n\n    /**\n     * @notice Stop ramping A up or down and sets A to current A.\n     */\n    function stop_rampget_A() external onlyOwner {\n        uint256 current_A = get_A();\n        initial_A = current_A;\n        future_A = current_A;\n        initial_A_time = block.timestamp;\n        future_A_time = block.timestamp;\n        // now (block.timestamp < t1) is always False, so we return saved A\n\n        emit StopRampA(current_A, block.timestamp);\n    }\n\n    /**\n     * @notice The method commits new fee params: these fees do not take immediate effect.\n     * @param new_fee: New pool fee\n     * @param new_admin_fee: New admin fee (expressed as a percentage of the pool fee)\n     * Both the pool fee and the admin_fee are capped by the constants MAX_FEE and MAX_ADMIN_FEE, respectively.\n     * By default MAX_FEE is set at 50% and MAX_ADMIN_FEE at 100% (which is charged on the MAX_FEE amount).\n     */\n    function commit_new_fee(\n        uint256 new_fee,\n        uint256 new_admin_fee\n    ) external onlyOwner {\n        require(\n            admin_actions_deadline == 0,\n            \"admin_actions_deadline must be 0\"\n        ); // dev: active action\n        require(new_fee <= MAX_FEE, \"dev: fee exceeds maximum\");\n        require(\n            new_admin_fee <= MAX_ADMIN_FEE,\n            \"dev: admin fee exceeds maximum\"\n        );\n\n        admin_actions_deadline = block.timestamp + ADMIN_ACTIONS_DELAY;\n        future_fee = new_fee;\n        future_admin_fee = new_admin_fee;\n\n        emit CommitNewFee(admin_actions_deadline, new_fee, new_admin_fee);\n    }\n\n    /**\n     * @notice Apply the previously committed new pool and admin fees for the pool.\n     */\n    function apply_new_fee() external onlyOwner {\n        require(\n            block.timestamp >= admin_actions_deadline,\n            \"dev: insufficient time\"\n        );\n        require(\n            admin_actions_deadline != 0,\n            \"admin_actions_deadline should not be 0\"\n        );\n\n        admin_actions_deadline = 0;\n        fee = future_fee;\n        admin_fee = future_admin_fee;\n\n        emit NewFee(fee, admin_fee);\n    }\n\n    /**\n     * @notice Resets any previously committed new fees.\n     */\n    function revert_new_parameters() external onlyOwner {\n        admin_actions_deadline = 0;\n        emit RevertParameters();\n    }\n\n    /**\n     * @notice Get the admin balance for a single coin in the pool.\n     * @param i: Index of the coin to get admin balance for\n     */\n    function admin_balances(uint256 i) external view returns (uint256) {\n        if (coins[i] == ROSE_ADDRESS) {\n            return address(this).balance - balances[i];\n        } else {\n            return IERC20(coins[i]).balanceOf(address(this)) - balances[i];\n        }\n    }\n\n    /**\n     * @notice Withdraws and transfers admin fees of the pool to the pool owner.\n     */\n    function withdraw_admin_fees() external onlyOwner {\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 value;\n            if (coins[i] == ROSE_ADDRESS) {\n                value = address(this).balance - balances[i];\n            } else {\n                value = IERC20(coins[i]).balanceOf(address(this)) - balances[i];\n            }\n            if (value > 0) {\n                transfer_out(coins[i], value);\n            }\n        }\n    }\n\n    /**\n     * @notice Donate all admin fees to the pool’s liquidity providers.\n     */\n    function donate_admin_fees() external onlyOwner {\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (coins[i] == ROSE_ADDRESS) {\n                balances[i] = address(this).balance;\n            } else {\n                balances[i] = IERC20(coins[i]).balanceOf(address(this));\n            }\n        }\n        emit DonateAdminFees();\n    }\n\n    /**\n     * @notice Pause a pool by setting the is_killed boolean flag to True.\n     */\n    function kill_me() external onlyOwner {\n        require(kill_deadline > block.timestamp, \"Exceeded deadline\");\n        is_killed = true;\n        emit Kill();\n    }\n\n    /**\n     * @notice Unpause a pool that was previously paused, re-enabling exchanges.\n     */\n    function unkill_me() external onlyOwner {\n        is_killed = false;\n        emit Unkill();\n    }\n}\n"
    },
    "contracts/stableSwap/plain-pools/StableSwapTwoPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../../interfaces/IStableSwapLP.sol\";\n\n/**\n * @title StableSwapTwoPool\n * @notice This contract facilitates liquidity addition, stable swapping, and liquidity removal in a stable swap system with two pools.\n * @dev It includes functions for adding liquidity, stable swapping, and removing liquidity, as well as parameter calculation for main operations.\n */\n\ncontract StableSwapTwoPool is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    /*╔══════════════════════════════╗\n      ║          CONSTANT            ║\n      ╚══════════════════════════════╝*/\n\n    uint256 public constant N_COINS = 2; //The number of coins within the pool\n\n    uint256 public constant MAX_DECIMAL = 18; //Maximum number of decimal places for the token balances\n    uint256 public constant FEE_DENOMINATOR = 1e10; //The denominator used to calculate the fee, fees are expressed as a fraction of 1e10\n    uint256 public constant PRECISION = 1e18; // The precision to which values are calculated, accurate up to 18 decimal places\n    uint256[N_COINS] public PRECISION_MUL; //Array of integers that coin balances are multiplied by in order to adjust their precision to 18 decimal places\n    uint256[N_COINS] public RATES; //Array of integers indicating the relative value of `1e18` tokens for each stablecoin\n\n\n    uint256 public constant MAX_ADMIN_FEE = 1e10;\n    uint256 public constant MAX_FEE = 5e9;\n    uint256 public constant MAX_A = 1e6;\n    uint256 public constant MAX_A_CHANGE = 10;\n    uint256 public constant MIN_ROSE_gas = 2300;\n    uint256 public constant MAX_ROSE_gas = 23000;\n\n    uint256 public constant ADMIN_ACTIONS_DELAY = 3 days;\n    uint256 public constant MIN_RAMP_TIME = 1 days;\n\n    address[N_COINS] public coins;\n    uint256[N_COINS] public balances;\n    uint256 public fee; // fee * 1e10.\n    uint256 public admin_fee; // admin_fee * 1e10.\n    uint256 public rose_gas = 4029; // transfer ROSE gas.\n\n    IStableSwapLP public token;\n\n    address constant ROSE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    bool support_ROSE;\n\n    uint256 public initial_A;\n    uint256 public future_A;\n    uint256 public initial_A_time;\n    uint256 public future_A_time;\n\n    uint256 public admin_actions_deadline;\n    uint256 public future_fee;\n    uint256 public future_admin_fee;\n\n    uint256 public kill_deadline;\n    uint256 public constant KILL_DEADLINE_DT = 2 * 30 days;\n    bool public is_killed;\n\n    address public immutable STABLESWAP_FACTORY;\n    bool public isInitialized;\n\n    /*╔══════════════════════════════╗\n      ║          EVENT               ║\n      ╚══════════════════════════════╝*/\n\n    event TokenExchange(\n        address indexed buyer,\n        uint256 sold_id,\n        uint256 tokens_sold,\n        uint256 bought_id,\n        uint256 tokens_bought\n    );\n    event AddLiquidity(\n        address indexed provider,\n        uint256[N_COINS] token_amounts,\n        uint256[N_COINS] fees,\n        uint256 invariant,\n        uint256 token_supply\n    );\n    event RemoveLiquidity(\n        address indexed provider,\n        uint256[N_COINS] token_amounts,\n        uint256[N_COINS] fees,\n        uint256 token_supply\n    );\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[N_COINS] token_amounts,\n        uint256[N_COINS] fees,\n        uint256 invariant,\n        uint256 token_supply\n    );\n    event CommitNewFee(uint256 indexed deadline, uint256 fee, uint256 admin_fee);\n    event NewFee(uint256 fee, uint256 admin_fee);\n    event RampA(uint256 old_A, uint256 new_A, uint256 initial_time, uint256 future_time);\n    event StopRampA(uint256 A, uint256 t);\n    event SetROSEGas(uint256 rose_gas);\n    event RevertParameters();\n    event DonateAdminFees();\n    event Kill();\n    event Unkill();\n\n   /*╔══════════════════════════════╗\n     ║          CONSTRUCTOR         ║\n     ╚══════════════════════════════╝*/\n\n    /**\n     * @notice constructor\n     */\n    constructor() {\n        STABLESWAP_FACTORY = msg.sender;\n    }\n\n    /**\n     * @notice initialize\n     * @param _coins: Addresses of ERC20 conracts of coins (c-tokens) involved\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     * @param _owner: Owner\n     * @param _LP: LP address\n     */\n    function initialize(\n        address[N_COINS] memory _coins,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee,\n        address _owner,\n        address _LP\n    ) external {\n        require(!isInitialized, \"Operations: Already initialized\");\n        require(msg.sender == STABLESWAP_FACTORY, \"Operations: Not factory\");\n        require(_A <= MAX_A, \"_A exceeds maximum\");\n        require(_fee <= MAX_FEE, \"_fee exceeds maximum\");\n        require(_admin_fee <= MAX_ADMIN_FEE, \"_admin_fee exceeds maximum\");\n        isInitialized = true;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            require(_coins[i] != address(0), \"ZERO Address\");\n            uint256 coinDecimal;\n            if (_coins[i] == ROSE_ADDRESS) {\n                coinDecimal = 18;\n                support_ROSE = true;\n            } else {\n                coinDecimal = IERC20Metadata(_coins[i]).decimals();\n            }\n            require(coinDecimal <= MAX_DECIMAL, \"The maximum decimal cannot exceed 18\");\n            //set PRECISION_MUL and  RATES\n            PRECISION_MUL[i] = 10**(MAX_DECIMAL - coinDecimal);\n            RATES[i] = PRECISION * PRECISION_MUL[i];\n        }\n        coins = _coins;\n        initial_A = _A;\n        future_A = _A;\n        fee = _fee;\n        admin_fee = _admin_fee;\n        kill_deadline = block.timestamp + KILL_DEADLINE_DT;\n        token = IStableSwapLP(_LP);\n\n        transferOwnership(_owner);\n    }\n\n    /*╔══════════════════════════════╗\n      ║         VIEW FUNCTIONS       ║\n      ╚══════════════════════════════╝*/\n    /**\n    * @notice Retrieves the current value of parameter A.\n    * Handles ramping A up or down over time if specified.\n    */\n    function get_A() internal view returns (uint256) {\n        //Handle ramping A up or down\n        uint256 t1 = future_A_time;\n        uint256 A1 = future_A;\n        if (block.timestamp < t1) {\n            uint256 A0 = initial_A;\n            uint256 t0 = initial_A_time;\n            // Expressions in uint256 cannot have negative numbers, thus \"if\"\n            if (A1 > A0) {\n                return A0 + ((A1 - A0) * (block.timestamp - t0)) / (t1 - t0);\n            } else {\n                return A0 - ((A0 - A1) * (block.timestamp - t0)) / (t1 - t0);\n            }\n        } else {\n            // when t1 == 0 or block.timestamp >= t1\n            return A1;\n        }\n    }\n\n    \n     /**\n     * @notice Getter for the amplification coefficient of the pool.\n     * The amplification coefficient A determines a pool’s tolerance for imbalance between the assets within it.\n     */\n    function A() external view returns (uint256) {\n        return get_A();\n    }\n\n    /**\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision\n     */\n    function _xp() internal view returns (uint256[N_COINS] memory result) {\n        result = RATES;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            result[i] = (result[i] * balances[i]) / PRECISION;\n        }\n    }\n\n    /**\n    * @notice Calculates the array of virtual balances for the pool, scaled by precision, using provided balances.\n    * @param _balances The array of balances to calculate virtual balances from.\n    */\n    function _xp_mem(uint256[N_COINS] memory _balances) internal view returns (uint256[N_COINS] memory result) {\n        result = RATES;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            result[i] = (result[i] * _balances[i]) / PRECISION;\n        }\n    }\n\n    /**\n    * @notice Calculates the total value of the pool's assets (invariant D), given virtual balances and amplification factor.\n    * @param xp Array of virtual balances for the pool, scaled by precision.\n    * @param amp Amplification factor of the pool.\n    * @return D The total value of the pool's assets (invariant D).\n    */\n    function get_D(uint256[N_COINS] memory xp, uint256 amp) internal pure returns (uint256) {\n        uint256 S;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            S += xp[i];\n        }\n        if (S == 0) {\n            return 0;\n        }\n\n        uint256 Dprev;\n        uint256 D = S;\n        uint256 Ann = amp * N_COINS;\n        for (uint256 j = 0; j < 255; j++) {\n            uint256 D_P = D;\n            for (uint256 k = 0; k < N_COINS; k++) {\n                D_P = (D_P * D) / (xp[k] * N_COINS); // If division by 0, this will be borked: only withdrawal will work. And that is good\n            }\n            Dprev = D;\n            D = ((Ann * S + D_P * N_COINS) * D) / ((Ann - 1) * D + (N_COINS + 1) * D_P);\n            // Equality with the precision of 1\n            if (D > Dprev) {\n                if (D - Dprev <= 1) {\n                    break;\n                }\n            } else {\n                if (Dprev - D <= 1) {\n                    break;\n                }\n            }\n        }\n        return D;\n    }\n\n    /**\n    * @notice Calculates the total value of the pool's assets (invariant D), given balances and amplification factor.\n    * @param _balances Array of balances to calculate virtual balances from.\n    * @param amp Amplification factor of the pool.\n    */\n    function get_D_mem(uint256[N_COINS] memory _balances, uint256 amp) internal view returns (uint256) {\n        return get_D(_xp_mem(_balances), amp);\n    }\n\n    /**\n    * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\n    * Can get the absolute price by multiplying it with the price of the underlying assets.\n    * The method returns virtual_price as an integer with 1e18 precision.\n    */\n    function get_virtual_price() external view returns (uint256) {\n        /**\n        Returns portfolio virtual price (for calculating profit)\n        scaled up by 1e18\n        */\n        uint256 D = get_D(_xp(), get_A());\n        /**\n        D is in the units similar to DAI (e.g. converted to precision 1e18)\n        When balanced, D = n * x_u - total virtual value of the portfolio\n        */\n        uint256 token_supply = token.totalSupply();\n        return (D * PRECISION) / token_supply;\n    }\n\n    /**\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\n     * Returns the expected amount of LP tokens received. \n     * This calculation accounts for slippage, but not fees.\n     * @param amounts: Amount of each coin being deposited\n     * @param deposit: Set True for deposits, False for withdrawals\n     */\n    function calc_token_amount(uint256[N_COINS] memory amounts, bool deposit) external view returns (uint256) {\n        /**\n        Simplified method to calculate addition or reduction in token supply at\n        deposit or withdrawal without taking fees into account (but looking at\n        slippage).\n        Needed to prevent front-running, not for precise calculations!\n        */\n        uint256[N_COINS] memory _balances = balances;\n        uint256 amp = get_A();\n        uint256 D0 = get_D_mem(_balances, amp);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (deposit) {\n                _balances[i] += amounts[i];\n            } else {\n                _balances[i] -= amounts[i];\n            }\n        }\n        uint256 D1 = get_D_mem(_balances, amp);\n        uint256 token_amount = token.totalSupply();\n        uint256 difference;\n        if (deposit) {\n            difference = D1 - D0;\n        } else {\n            difference = D0 - D1;\n        }\n        return (difference * token_amount) / D0;\n    }\n\n    /**\n    * @notice Get the amount of coin j one would receive for swapping x of coin i, using the current virtual balances.\n    * @param i Index of coin to swap from.\n    * @param j Index of coin to swap to\n    * @param x Amount of coin i to swap\n    * @param xp_ The array of virtual balances for the pool, scaled by precision.\n    */\n    function get_y(\n        uint256 i,\n        uint256 j,\n        uint256 x,\n        uint256[N_COINS] memory xp_\n    ) internal view returns (uint256) {\n        // x in the input is converted to the same price/precision\n        require((i != j) && (i < N_COINS) && (j < N_COINS), \"Illegal parameter\");\n        uint256 amp = get_A();\n        uint256 D = get_D(xp_, amp);\n        uint256 c = D;\n        uint256 S_;\n        uint256 Ann = amp * N_COINS;\n\n        uint256 _x;\n        for (uint256 k = 0; k < N_COINS; k++) {\n            if (k == i) {\n                _x = x;\n            } else if (k != j) {\n                _x = xp_[k];\n            } else {\n                continue;\n            }\n            S_ += _x;\n            c = (c * D) / (_x * N_COINS);\n        }\n        c = (c * D) / (Ann * N_COINS);\n        uint256 b = S_ + D / Ann; // - D\n        uint256 y_prev;\n        uint256 y = D;\n\n        for (uint256 m = 0; m < 255; m++) {\n            y_prev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            // Equality with the precision of 1\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    break;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    break;\n                }\n            }\n        }\n        return y;\n    }\n\n    /**\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\n     * @param i: Index of coin to swap from\n     * @param j: Index of coin to swap to\n     * @param dx: Amount of coin i to swap\n     */\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256) {\n        // dx and dy in c-units\n        uint256[N_COINS] memory rates = RATES;\n        uint256[N_COINS] memory xp = _xp();\n\n        uint256 x = xp[i] + ((dx * rates[i]) / PRECISION);\n        uint256 y = get_y(i, j, x, xp);\n        uint256 dy = ((xp[j] - y - 1) * PRECISION) / rates[j];\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\n        return dy - _fee;\n    }\n\n    /**\n    * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\n    * @param i Index of coin to swap from\n    * @param j Index of coin to swap to\n    * @param dx Amount of coin i to swap\n    */\n    function get_dy_underlying(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256) {\n        // dx and dy in underlying units\n        uint256[N_COINS] memory xp = _xp();\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\n\n        uint256 x = xp[i] + dx * precisions[i];\n        uint256 y = get_y(i, j, x, xp);\n        uint256 dy = (xp[j] - y - 1) / precisions[j];\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\n        return dy - _fee;\n    }\n\n    /**\n    * @notice Get the amount of coin i given a reduction in invariant D, considering a specific value of parameter A and current virtual balances.\n    * @param A_ The value of parameter A.\n    * @param i The index of the coin for which the output amount is calculated.\n    * @param xp The array of virtual balances for the pool, scaled by precision.\n    * @param D The new value of invariant D.\n    */\n    function get_y_D(\n        uint256 A_,\n        uint256 i,\n        uint256[N_COINS] memory xp,\n        uint256 D\n    ) internal pure returns (uint256) {\n        /**\n        Calculate x[i] if one reduces D from being calculated for xp to D\n\n        Done by solving quadratic equation iteratively.\n        x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\n        x_1**2 + b*x_1 = c\n\n        x_1 = (x_1**2 + c) / (2*x_1 + b)\n        */\n        // x in the input is converted to the same price/precision\n        require(i < N_COINS, \"dev: i above N_COINS\");\n        uint256 c = D;\n        uint256 S_;\n        uint256 Ann = A_ * N_COINS;\n\n        uint256 _x;\n        for (uint256 k = 0; k < N_COINS; k++) {\n            if (k != i) {\n                _x = xp[k];\n            } else {\n                continue;\n            }\n            S_ += _x;\n            c = (c * D) / (_x * N_COINS);\n        }\n        c = (c * D) / (Ann * N_COINS);\n        uint256 b = S_ + D / Ann;\n        uint256 y_prev;\n        uint256 y = D;\n\n        for (uint256 k = 0; k < 255; k++) {\n            y_prev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            // Equality with the precision of 1\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    break;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    break;\n                }\n            }\n        }\n        return y;\n    }\n    \n    function _calc_withdraw_one_coin(uint256 _token_amount, uint256 i) internal view returns (uint256, uint256) {\n        // First, need to calculate\n        // * Get current D\n        // * Solve Eqn against y_i for D - _token_amount\n        uint256 amp = get_A();\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\n        uint256 total_supply = token.totalSupply();\n\n        uint256[N_COINS] memory xp = _xp();\n\n        uint256 D0 = get_D(xp, amp);\n        uint256 D1 = D0 - (_token_amount * D0) / total_supply;\n        uint256[N_COINS] memory xp_reduced = xp;\n\n        uint256 new_y = get_y_D(amp, i, xp, D1);\n        uint256 dy_0 = (xp[i] - new_y) / precisions[i]; // w/o fees\n\n        for (uint256 k = 0; k < N_COINS; k++) {\n            uint256 dx_expected;\n            if (k == i) {\n                dx_expected = (xp[k] * D1) / D0 - new_y;\n            } else {\n                dx_expected = xp[k] - (xp[k] * D1) / D0;\n            }\n            xp_reduced[k] -= (_fee * dx_expected) / FEE_DENOMINATOR;\n        }\n        uint256 dy = xp_reduced[i] - get_y_D(amp, i, xp_reduced, D1);\n        dy = (dy - 1) / precisions[i]; // Withdraw less to account for rounding errors\n\n        return (dy, dy_0 - dy);\n    }\n\n    /**\n     * @notice Calculate the amount received when withdrawing a single coin.\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\n     * @param i: Index value of the coin to withdraw\n     */\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256) {\n        (uint256 dy, ) = _calc_withdraw_one_coin(_token_amount, i);\n        return dy;\n    }\n\n    /*╔══════════════════════════════╗\n      ║          USER FUNCTIONS      ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice Deposit coins into the pool\n     * @param amounts: Amount of each coin being deposited\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\n     */\n    function add_liquidity(uint256[N_COINS] memory amounts, uint256 min_mint_amount) external payable nonReentrant {\n        //Amounts is amounts of c-tokens\n        require(!is_killed, \"Killed\");\n        if (!support_ROSE) {\n            require(msg.value == 0, \"Inconsistent quantity\"); // Avoid sending ROSE by mistake.\n        }\n        uint256[N_COINS] memory fees;\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\n        uint256 _admin_fee = admin_fee;\n        uint256 amp = get_A();\n\n        uint256 token_supply = token.totalSupply();\n        //Initial invariant\n        uint256 D0;\n        uint256[N_COINS] memory old_balances = balances;\n        if (token_supply > 0) {\n            D0 = get_D_mem(old_balances, amp);\n        }\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1]];\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (token_supply == 0) {\n                require(amounts[i] > 0, \"Initial deposit requires all coins\");\n            }\n            // balances store amounts of c-tokens\n            new_balances[i] = old_balances[i] + amounts[i];\n        }\n\n        // Invariant after change\n        uint256 D1 = get_D_mem(new_balances, amp);\n        require(D1 > D0, \"D1 must be greater than D0\");\n\n        // We need to recalculate the invariant accounting for fees\n        // to calculate fair user's share\n        uint256 D2 = D1;\n        if (token_supply > 0) {\n            // Only account for fees if we are not the first to deposit\n            for (uint256 i = 0; i < N_COINS; i++) {\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\n                uint256 difference;\n                if (ideal_balance > new_balances[i]) {\n                    difference = ideal_balance - new_balances[i];\n                } else {\n                    difference = new_balances[i] - ideal_balance;\n                }\n\n                fees[i] = (_fee * difference) / FEE_DENOMINATOR;\n                balances[i] = new_balances[i] - ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\n                new_balances[i] -= fees[i];\n            }\n            D2 = get_D_mem(new_balances, amp);\n        } else {\n            balances = new_balances;\n        }\n\n        // Calculate, how much pool tokens to mint\n        uint256 mint_amount;\n        if (token_supply == 0) {\n            mint_amount = D1; // Take the dust if there was any\n        } else {\n            mint_amount = (token_supply * (D2 - D0)) / D0;\n        }\n        require(mint_amount >= min_mint_amount, \"Slippage screwed you\");\n\n        // Take coins from the sender\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 amount = amounts[i];\n            address coin = coins[i];\n            transfer_in(coin, amount);\n        }\n\n        // Mint pool tokens\n        token.mint(msg.sender, mint_amount);\n\n        emit AddLiquidity(msg.sender, amounts, fees, D1, token_supply + mint_amount);\n    }\n\n    /**\n     * @notice Perform an exchange between two coins.\n     * @param i: Index of coin to swap from\n     * @param j: Index of coin to swap to\n     * @param dx: Amount of coin i to swap\n     * @param min_dy: \tMinimum amount of j to receive\n     */\n    function exchange(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external payable nonReentrant {\n        require(!is_killed, \"Killed\");\n        if (!support_ROSE) {\n            require(msg.value == 0, \"Inconsistent quantity\"); // Avoid sending ROSE by mistake.\n        }\n\n        uint256[N_COINS] memory old_balances = balances;\n        uint256[N_COINS] memory xp = _xp_mem(old_balances);\n\n        uint256 x = xp[i] + (dx * RATES[i]) / PRECISION;\n        uint256 y = get_y(i, j, x, xp);\n\n        uint256 dy = xp[j] - y - 1; //  -1 just in case there were some rounding errors\n        uint256 dy_fee = (dy * fee) / FEE_DENOMINATOR;\n\n        // Convert all to real units\n        dy = ((dy - dy_fee) * PRECISION) / RATES[j];\n        require(dy >= min_dy, \"Exchange resulted in fewer coins than expected\");\n\n        uint256 dy_admin_fee = (dy_fee * admin_fee) / FEE_DENOMINATOR;\n        dy_admin_fee = (dy_admin_fee * PRECISION) / RATES[j];\n\n        // Change balances exactly in same way as we change actual ERC20 coin amounts\n        balances[i] = old_balances[i] + dx;\n        // When rounding errors happen, we undercharge admin fee in favor of LP\n        balances[j] = old_balances[j] - dy - dy_admin_fee;\n\n        address iAddress = coins[i];\n        if (iAddress == ROSE_ADDRESS) {\n            require(dx == msg.value, \"Inconsistent quantity\");\n        } else {\n            IERC20(iAddress).safeTransferFrom(msg.sender, address(this), dx);\n        }\n        address jAddress = coins[j];\n        transfer_out(jAddress, dy);\n        emit TokenExchange(msg.sender, i, dx, j, dy);\n    }\n\n     /**\n     * @notice Withdraw coins from the pool\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\n     * @param min_amounts: Minimum amounts of underlying coins to receive\n     */\n    function remove_liquidity(uint256 _amount, uint256[N_COINS] memory min_amounts) external nonReentrant {\n        uint256 total_supply = token.totalSupply();\n        uint256[N_COINS] memory amounts;\n        uint256[N_COINS] memory fees; //Fees are unused but we've got them historically in event\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 value = (balances[i] * _amount) / total_supply;\n            require(value >= min_amounts[i], \"Withdrawal resulted in fewer coins than expected\");\n            balances[i] -= value;\n            amounts[i] = value;\n            transfer_out(coins[i], value);\n        }\n\n        token.burnFrom(msg.sender, _amount); // dev: insufficient funds\n\n        emit RemoveLiquidity(msg.sender, amounts, fees, total_supply - _amount);\n    }\n\n     /**\n     * @notice Withdraw coins from the pool in an imbalanced amount\n     * @param amounts: List of amounts of underlying coins to withdraw\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\n     */\n    function remove_liquidity_imbalance(uint256[N_COINS] memory amounts, uint256 max_burn_amount)\n        external\n        nonReentrant\n    {\n        require(!is_killed, \"Killed\");\n\n        uint256 token_supply = token.totalSupply();\n        require(token_supply > 0, \"dev: zero total supply\");\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\n        uint256 _admin_fee = admin_fee;\n        uint256 amp = get_A();\n\n        uint256[N_COINS] memory old_balances = balances;\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1]];\n        uint256 D0 = get_D_mem(old_balances, amp);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            new_balances[i] -= amounts[i];\n        }\n        uint256 D1 = get_D_mem(new_balances, amp);\n        uint256[N_COINS] memory fees;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 ideal_balance = (D1 * old_balances[i]) / D0;\n            uint256 difference;\n            if (ideal_balance > new_balances[i]) {\n                difference = ideal_balance - new_balances[i];\n            } else {\n                difference = new_balances[i] - ideal_balance;\n            }\n            fees[i] = (_fee * difference) / FEE_DENOMINATOR;\n            balances[i] = new_balances[i] - ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\n            new_balances[i] -= fees[i];\n        }\n        uint256 D2 = get_D_mem(new_balances, amp);\n\n        uint256 token_amount = ((D0 - D2) * token_supply) / D0;\n        require(token_amount > 0, \"token_amount must be greater than 0\");\n        token_amount += 1; // In case of rounding errors - make it unfavorable for the \"attacker\"\n        require(token_amount <= max_burn_amount, \"Slippage screwed you\");\n\n        token.burnFrom(msg.sender, token_amount); // dev: insufficient funds\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (amounts[i] > 0) {\n                transfer_out(coins[i], amounts[i]);\n            }\n        }\n        token_supply -= token_amount;\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, token_supply);\n    }\n\n    /**\n     * @notice Withdraw a single coin from the pool\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\n     * @param i: Index value of the coin to withdraw\n     * @param min_amount: Minimum amount of coin to receive\n     */\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        uint256 i,\n        uint256 min_amount\n    ) external nonReentrant {\n        // Remove _amount of liquidity all in a form of coin i\n        require(!is_killed, \"Killed\");\n        (uint256 dy, uint256 dy_fee) = _calc_withdraw_one_coin(_token_amount, i);\n        require(dy >= min_amount, \"Not enough coins removed\");\n\n        balances[i] -= (dy + (dy_fee * admin_fee) / FEE_DENOMINATOR);\n        token.burnFrom(msg.sender, _token_amount); // dev: insufficient funds\n        transfer_out(coins[i], dy);\n\n        emit RemoveLiquidityOne(msg.sender, i, _token_amount, dy);\n    }\n\n    /**\n    * @notice Internal function to transfer tokens using function \"safeTransfer\" of IERC20.\n    * @param coin_address The address of the token to transfer.\n    * @param value The amount of tokens to transfer.\n    */\n    function transfer_out(address coin_address, uint256 value) internal {\n        if (coin_address == ROSE_ADDRESS) {\n            _safeTransferROSE(msg.sender, value);\n        } else {\n            IERC20(coin_address).safeTransfer(msg.sender, value);\n        }\n    }\n\n    /**\n    * @notice Internal function to transfer tokens using function \"safeTransferFrom\" of IERC20.\n    * @param coin_address The address of the token to transfer.\n    * @param value The amount of tokens to transfer.\n    */\n    function transfer_in(address coin_address, uint256 value) internal {\n        if (coin_address == ROSE_ADDRESS) {\n            require(value == msg.value, \"Inconsistent quantity\");\n        } else {\n            IERC20(coin_address).safeTransferFrom(msg.sender, address(this), value);\n        }\n    }\n\n    /**\n    * @notice Internal function to safely transfer ROSE tokens.\n    * @param to The address to transfer the ROSE tokens to.\n    * @param value The amount of ROSE tokens to transfer.\n    */\n    function _safeTransferROSE(address to, uint256 value) internal {\n        (bool success, ) = to.call{gas: rose_gas, value: value}(\"\");\n        require(success, \"ROSE transfer failed\");\n    }\n\n   /*╔══════════════════════════════╗\n     ║          ADMIN FUNCTIONS     ║\n     ╚══════════════════════════════╝*/\n\n    /**\n    * @notice set the gas limit for transferring ROSE tokens.\n    * @param _rose_gas The gas limit to be set.\n    * The gas limit should be within the acceptable range defined by MIN_ROSE_gas and MAX_ROSE_gas.\n    */\n    function set_rose_gas(uint256 _rose_gas) external onlyOwner {\n        require(_rose_gas >= MIN_ROSE_gas && _rose_gas <= MAX_ROSE_gas, \"Illegal gas\");\n        rose_gas = _rose_gas;\n        emit SetROSEGas(_rose_gas);\n    }\n\n    /**\n     * @notice Ramp A up or down by setting a new A to take effect at a future point in time.\n     * @param _future_A: New future value of A\n     * @param _future_time: Timestamp at which new A should take effect\n     */\n    function ramp_A(uint256 _future_A, uint256 _future_time) external onlyOwner {\n        require(block.timestamp >= initial_A_time + MIN_RAMP_TIME, \"dev : too early\");\n        require(_future_time >= block.timestamp + MIN_RAMP_TIME, \"dev: insufficient time\");\n\n        uint256 _initial_A = get_A();\n        require(_future_A > 0 && _future_A < MAX_A, \"_future_A must be between 0 and MAX_A\");\n        require(\n            (_future_A >= _initial_A && _future_A <= _initial_A * MAX_A_CHANGE) ||\n                (_future_A < _initial_A && _future_A * MAX_A_CHANGE >= _initial_A),\n            \"Illegal parameter _future_A\"\n        );\n        initial_A = _initial_A;\n        future_A = _future_A;\n        initial_A_time = block.timestamp;\n        future_A_time = _future_time;\n\n        emit RampA(_initial_A, _future_A, block.timestamp, _future_time);\n    }\n\n    /**\n     * @notice Stop ramping A up or down and sets A to current A.\n     */\n    function stop_rampget_A() external onlyOwner {\n        uint256 current_A = get_A();\n        initial_A = current_A;\n        future_A = current_A;\n        initial_A_time = block.timestamp;\n        future_A_time = block.timestamp;\n        // now (block.timestamp < t1) is always False, so we return saved A\n\n        emit StopRampA(current_A, block.timestamp);\n    }\n\n      /**\n     * @notice The method commits new fee params: these fees do not take immediate effect.\n     * @param new_fee: New pool fee\n     * @param new_admin_fee: New admin fee (expressed as a percentage of the pool fee)\n     * Both the pool fee and the admin_fee are capped by the constants MAX_FEE and MAX_ADMIN_FEE, respectively. \n     * By default MAX_FEE is set at 50% and MAX_ADMIN_FEE at 100% (which is charged on the MAX_FEE amount).\n     */\n    function commit_new_fee(uint256 new_fee, uint256 new_admin_fee) external onlyOwner {\n        require(admin_actions_deadline == 0, \"admin_actions_deadline must be 0\"); // dev: active action\n        require(new_fee <= MAX_FEE, \"dev: fee exceeds maximum\");\n        require(new_admin_fee <= MAX_ADMIN_FEE, \"dev: admin fee exceeds maximum\");\n\n        admin_actions_deadline = block.timestamp + ADMIN_ACTIONS_DELAY;\n        future_fee = new_fee;\n        future_admin_fee = new_admin_fee;\n\n        emit CommitNewFee(admin_actions_deadline, new_fee, new_admin_fee);\n    }\n\n     /**\n     * @notice Apply the previously committed new pool and admin fees for the pool.\n     */\n    function apply_new_fee() external onlyOwner {\n        require(block.timestamp >= admin_actions_deadline, \"dev: insufficient time\");\n        require(admin_actions_deadline != 0, \"admin_actions_deadline should not be 0\");\n\n        admin_actions_deadline = 0;\n        fee = future_fee;\n        admin_fee = future_admin_fee;\n\n        emit NewFee(fee, admin_fee);\n    }\n\n    /**\n     * @notice Resets any previously committed new fees.\n     */\n    function revert_new_parameters() external onlyOwner {\n        admin_actions_deadline = 0;\n        emit RevertParameters();\n    }\n\n    /**\n     * @notice Get the admin balance for a single coin in the pool.\n     * @param i: Index of the coin to get admin balance for\n     */\n    function admin_balances(uint256 i) external view returns (uint256) {\n        if (coins[i] == ROSE_ADDRESS) {\n            return address(this).balance - balances[i];\n        } else {\n            return IERC20(coins[i]).balanceOf(address(this)) - balances[i];\n        }\n    }\n\n    /**\n     * @notice Withdraws and transfers admin fees of the pool to the pool owner.\n     */\n    function withdraw_admin_fees() external onlyOwner {\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 value;\n            if (coins[i] == ROSE_ADDRESS) {\n                value = address(this).balance - balances[i];\n            } else {\n                value = IERC20(coins[i]).balanceOf(address(this)) - balances[i];\n            }\n            if (value > 0) {\n                transfer_out(coins[i], value);\n            }\n        }\n    }\n\n    /**\n     * @notice Donate all admin fees to the pool’s liquidity providers.\n     */\n    function donate_admin_fees() external onlyOwner {\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (coins[i] == ROSE_ADDRESS) {\n                balances[i] = address(this).balance;\n            } else {\n                balances[i] = IERC20(coins[i]).balanceOf(address(this));\n            }\n        }\n        emit DonateAdminFees();\n    }\n\n    /**\n     * @notice Pause a pool by setting the is_killed boolean flag to True.\n     */\n    function kill_me() external onlyOwner {\n        require(kill_deadline > block.timestamp, \"Exceeded deadline\");\n        is_killed = true;\n        emit Kill();\n    }\n\n    /**\n     * @notice Unpause a pool that was previously paused, re-enabling exchanges.\n     */\n    function unkill_me() external onlyOwner {\n        is_killed = false;\n        emit Unkill();\n    }\n}\n"
    },
    "contracts/stableSwap/StableSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"../interfaces/IStableSwap.sol\";\nimport \"../interfaces/IStableSwapLP.sol\";\nimport \"../interfaces/IStableSwapDeployer.sol\";\nimport \"../interfaces/IStableSwapLPFactory.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Stable swap factory\n * @notice A factory contract for creating new pool and providing pool information\n * @dev  This contract manages the creations of stable swap pools and provides access to their information\n */\n\ncontract StableSwapFactory {\n    struct StableSwapPairInfo {\n        address swapContract;\n        address token0;\n        address token1;\n        address LPContract;\n    }\n    struct StableSwapThreePoolPairInfo {\n        address swapContract;\n        address token0;\n        address token1;\n        address token2;\n        address LPContract;\n    }\n\n    mapping(address => mapping(address => mapping(address => StableSwapThreePoolPairInfo)))\n        public stableSwapPairInfo;\n    // Query three pool pair infomation by two tokens.\n    mapping(address => mapping(address => StableSwapThreePoolPairInfo)) threePoolInfo;\n    mapping(uint256 => address) public swapPairContract;\n\n    IStableSwapLPFactory public LPFactory;\n    IStableSwapDeployer public SwapTwoPoolDeployer;\n    IStableSwapDeployer public SwapThreePoolDeployer;\n\n    address constant ZEROADDRESS = address(0);\n    address public admin;\n\n    uint256 public pairLength;\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Admin only\");\n        _;\n    }\n\n    /*╔══════════════════════════════╗\n      ║          EVENT               ║\n      ╚══════════════════════════════╝*/\n\n    event CommitOwnership(address admin);\n    event ApplyOwnership(address admin);\n    event NewStableSwapPair(\n        address indexed swapContract,\n        address tokenA,\n        address tokenB,\n        address tokenC,\n        address LP\n    );\n    event AdminshipTransferred(\n        address indexed previousAdminr,\n        address indexed newAdmin\n    );\n\n    /*╔══════════════════════════════╗\n      ║          CONSTRUCTOR         ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice constructor\n     * _LPFactory: LP factory\n     * _SwapTwoPoolDeployer: Swap two pool deployer\n     * _SwapThreePoolDeployer: Swap three pool deployer\n     */\n\n    function initialize(\n        IStableSwapLPFactory _LPFactory,\n        IStableSwapDeployer _SwapTwoPoolDeployer,\n        IStableSwapDeployer _SwapThreePoolDeployer,\n        address _admin\n    ) public {\n        LPFactory = _LPFactory;\n        SwapTwoPoolDeployer = _SwapTwoPoolDeployer;\n        SwapThreePoolDeployer = _SwapThreePoolDeployer;\n        admin = _admin;\n    }\n\n    /*╔══════════════════════════════╗\n      ║          ADMIN FUNCTIONS     ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice  onlyOwner\n     * @dev     pauseContract\n     */\n\n    /**\n     * @notice createSwapPair\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     */\n\n    function createSwapPair(\n        address _tokenA,\n        address _tokenB,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee\n    ) external onlyAdmin {\n        require(\n            _tokenA != ZEROADDRESS &&\n                _tokenB != ZEROADDRESS &&\n                _tokenA != _tokenB,\n            \"Illegal token\"\n        );\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\n        address LP = LPFactory.createSwapLP(t0, t1, ZEROADDRESS, address(this));\n        address swapContract = SwapTwoPoolDeployer.createSwapPair(\n            t0,\n            t1,\n            _A,\n            _fee,\n            _admin_fee,\n            msg.sender,\n            LP\n        );\n        IStableSwapLP(LP).setMinter(swapContract);\n        addPairInfoInternal(swapContract, t0, t1, ZEROADDRESS, LP);\n    }\n\n    /**\n     * @notice Sorts three token addresses in a consistent order.\n     * @param tokenA: Addresses of ERC20 conracts .\n     * @param tokenB: Addresses of ERC20 conracts .\n     */\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n    }\n\n    /**\n     * @notice Adds information about a stable swap pool pair to the contract's storage.\n     * @param _swapContract: Addresses of stable swap pool contracts .\n     * @param _t0: Addresses of ERC20 conracts .\n     * @param _t1: Addresses of ERC20 conracts .\n     * @param _t2: Addresses of ERC20 conracts .\n     * @param _LP: Addresses of LP token for stable swap pool contracts .\n     */\n    function addPairInfoInternal(\n        address _swapContract,\n        address _t0,\n        address _t1,\n        address _t2,\n        address _LP\n    ) internal {\n        StableSwapThreePoolPairInfo storage info = stableSwapPairInfo[_t0][_t1][\n            _t2\n        ];\n        info.swapContract = _swapContract;\n        info.token0 = _t0;\n        info.token1 = _t1;\n        info.token2 = _t2;\n        info.LPContract = _LP;\n        swapPairContract[pairLength] = _swapContract;\n        pairLength += 1;\n        if (_t2 != ZEROADDRESS) {\n            addThreePoolPairInfo(_t0, _t1, _t2, info);\n        }\n\n        emit NewStableSwapPair(_swapContract, _t0, _t1, _t2, _LP);\n    }\n\n    /**\n     * @notice createThreePoolPair\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _tokenC: Addresses of ERC20 conracts .\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     */\n    function createThreePoolPair(\n        address _tokenA,\n        address _tokenB,\n        address _tokenC,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee\n    ) external onlyAdmin {\n        require(\n            _tokenA != ZEROADDRESS &&\n                _tokenB != ZEROADDRESS &&\n                _tokenC != ZEROADDRESS &&\n                _tokenA != _tokenB &&\n                _tokenA != _tokenC &&\n                _tokenB != _tokenC,\n            \"Illegal token\"\n        );\n        (address t0, address t1, address t2) = sortTokens(\n            _tokenA,\n            _tokenB,\n            _tokenC\n        );\n        address LP = LPFactory.createSwapLP(t0, t1, t2, address(this));\n        address swapContract = SwapThreePoolDeployer.createSwapPair(\n            t0,\n            t1,\n            t2,\n            _A,\n            _fee,\n            _admin_fee,\n            msg.sender,\n            LP\n        );\n        IStableSwapLP(LP).setMinter(swapContract);\n        addPairInfoInternal(swapContract, t0, t1, t2, LP);\n    }\n\n    /**\n     * @notice Adds information about a stable swap contract.\n     * @param _swapContract: Addresses of stable swap contracts.\n     */\n    function addPairInfo(address _swapContract) external onlyAdmin {\n        IStableSwap swap = IStableSwap(_swapContract);\n        uint256 N_COINS = swap.N_COINS();\n        if (N_COINS == 2) {\n            addPairInfoInternal(\n                _swapContract,\n                swap.coins(0),\n                swap.coins(1),\n                ZEROADDRESS,\n                swap.token()\n            );\n        } else if (N_COINS == 3) {\n            addPairInfoInternal(\n                _swapContract,\n                swap.coins(0),\n                swap.coins(1),\n                swap.coins(2),\n                swap.token()\n            );\n        }\n    }\n\n    /**\n     * @notice Sorts three token addresses in a consistent order.\n     * @param tokenA: Addresses of ERC20 conracts .\n     * @param tokenB: Addresses of ERC20 conracts .\n     * @param tokenC: Addresses of ERC20 conracts .\n     */\n    function sortTokens(\n        address tokenA,\n        address tokenB,\n        address tokenC\n    ) internal pure returns (address, address, address) {\n        require(\n            tokenA != tokenB && tokenA != tokenC && tokenB != tokenC,\n            \"IDENTICAL_ADDRESSES\"\n        );\n        address tmp;\n        if (tokenA > tokenB) {\n            tmp = tokenA;\n            tokenA = tokenB;\n            tokenB = tmp;\n        }\n        if (tokenB > tokenC) {\n            tmp = tokenB;\n            tokenB = tokenC;\n            tokenC = tmp;\n            if (tokenA > tokenB) {\n                tmp = tokenA;\n                tokenA = tokenB;\n                tokenB = tmp;\n            }\n        }\n        return (tokenA, tokenB, tokenC);\n    }\n\n    /**\n     * @notice Adds stable swap three pool pair information,facilitating query three pool pair by two tokens .\n     * @param _t0: Addresses of ERC20 conracts .\n     * @param _t1: Addresses of ERC20 conracts .\n     * @param _t2: Addresses of ERC20 conracts .\n     * @param info: Addresses of three pool pair information contracts .\n     */\n    function addThreePoolPairInfo(\n        address _t0,\n        address _t1,\n        address _t2,\n        StableSwapThreePoolPairInfo memory info\n    ) internal {\n        threePoolInfo[_t0][_t1] = info;\n        threePoolInfo[_t0][_t2] = info;\n        threePoolInfo[_t1][_t2] = info;\n    }\n\n    /*╔══════════════════════════════╗\n      ║         VIEW FUNCTIONS       ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice Retrieves information of two pool.\n     * @param _tokenA : Addresses of ERC20 conracts.\n     * @param _tokenB : Addresses of ERC20 conracts.\n     */\n    function getPairInfo(\n        address _tokenA,\n        address _tokenB\n    ) external view returns (StableSwapPairInfo memory info) {\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\n        StableSwapThreePoolPairInfo memory pairInfo = stableSwapPairInfo[t0][\n            t1\n        ][ZEROADDRESS];\n        info.swapContract = pairInfo.swapContract;\n        info.token0 = pairInfo.token0;\n        info.token1 = pairInfo.token1;\n        info.LPContract = pairInfo.LPContract;\n    }\n\n    /**\n     * @notice Retrieves information of three pool by two tokens.\n     * @param _tokenA : Addresses of ERC20 conracts.\n     * @param _tokenB : Addresses of ERC20 conracts.\n     */\n    function getThreePoolPairInfo(\n        address _tokenA,\n        address _tokenB\n    ) external view returns (StableSwapThreePoolPairInfo memory info) {\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\n        info = threePoolInfo[t0][t1];\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferAdminship(address newAdmin) public virtual onlyAdmin {\n        require(\n            newAdmin != address(0),\n            \"Ownable: new Admin is the zero address\"\n        );\n        _transferAdminship(newAdmin);\n    }\n\n    /**\n     * @dev Transfers Adminship of the contract to a new account (`newAdmin`).\n     * Internal function without access restriction.\n     */\n    function _transferAdminship(address _admin) internal virtual {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit AdminshipTransferred(oldAdmin, _admin);\n    }\n}\n"
    },
    "contracts/stableSwap/StableSwapLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title StableSwapLP\n * @notice A contract representing LP (Liquidity Provider) tokens for a stable swap pool\n * @dev This contract manages the minting and burning of LP tokens\n */\n\ncontract StableSwapLP is ERC20 {\n    address public minter;\n\n    constructor() ERC20(\"StableSwap LPs\", \"Stable-LP\") {\n        minter = msg.sender;\n    }\n\n    /**\n     * @notice Checks if the msg.sender is the minter address.\n     */\n    modifier onlyMinter() {\n        require(msg.sender == minter, \"Not minter\");\n        _;\n    }\n\n    function setMinter(address _newMinter) external onlyMinter {\n        minter = _newMinter;\n    }\n\n    function mint(address _to, uint256 _amount) external onlyMinter {\n        _mint(_to, _amount);\n    }\n\n    function burnFrom(address _to, uint256 _amount) external onlyMinter {\n        _burn(_to, _amount);\n    }\n}\n"
    },
    "contracts/stableSwap/StableSwapLPFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"./StableSwapLP.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title stable swap LP factory\n * @notice A LP factory contract for creating LP tokens for stable swap pools\n * @dev This contract manages the creation of LP tokens for stable swap pools\n */\n\ncontract StableSwapLPFactory is Ownable {\n    /*╔══════════════════════════════╗\n      ║          EVENT               ║\n      ╚══════════════════════════════╝*/\n\n    event NewStableSwapLP(\n        address indexed swapLPContract,\n        address tokenA,\n        address tokenB,\n        address tokenC\n    );\n\n    constructor() {}\n\n    /*╔══════════════════════════════╗\n      ║      ADMIN FUNCTIONS         ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice createSwapLP\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _tokenC: Addresses of ERC20 conracts .\n     * @param _minter: Minter address\n     */\n    function createSwapLP(\n        address _tokenA,\n        address _tokenB,\n        address _tokenC,\n        address _minter\n    ) external onlyOwner returns (address) {\n        // create LP token\n        bytes memory bytecode = type(StableSwapLP).creationCode;\n        bytes32 salt = keccak256(\n            abi.encodePacked(\n                _tokenA,\n                _tokenB,\n                _tokenC,\n                msg.sender,\n                block.timestamp,\n                block.chainid\n            )\n        );\n        address lpToken;\n        assembly {\n            lpToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        StableSwapLP(lpToken).setMinter(_minter);\n        emit NewStableSwapLP(lpToken, _tokenA, _tokenB, _tokenC);\n        return lpToken;\n    }\n}\n"
    },
    "contracts/stableSwap/StableSwapThreePoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"./plain-pools/StableSwapThreePool.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title stable swap three pool deployer\n * @notice A deployer contract for executing the three pool deloyment\n * @dev This contract manages the deployment of pool, including sorting the pool tokens\n */\n\ncontract StableSwapThreePoolDeployer is Ownable {\n    uint256 public constant N_COINS = 3;\n\n    /*╔══════════════════════════════╗\n      ║          CONSTRUCTOR         ║\n      ╚══════════════════════════════╝*/\n    constructor() {}\n\n    /*╔══════════════════════════════╗\n      ║          ADMIN FUNCTIONS     ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice createSwapPair\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _tokenC: Addresses of ERC20 conracts .\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     * @param _admin: Admin\n     * @param _LP: LP\n     */\n    function createSwapPair(\n        address _tokenA,\n        address _tokenB,\n        address _tokenC,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee,\n        address _admin,\n        address _LP\n    ) external onlyOwner returns (address) {\n        require(\n            _tokenA != address(0) &&\n                _tokenB != address(0) &&\n                _tokenA != _tokenB,\n            \"Illegal token\"\n        );\n        (address t0, address t1, address t2) = sortTokens(\n            _tokenA,\n            _tokenB,\n            _tokenC\n        );\n        address[N_COINS] memory coins = [t0, t1, t2];\n        // create swap contract\n        bytes memory bytecode = type(StableSwapThreePool).creationCode;\n        bytes32 salt = keccak256(\n            abi.encodePacked(\n                t0,\n                t1,\n                t2,\n                msg.sender,\n                block.timestamp,\n                block.chainid\n            )\n        );\n        address swapContract;\n        assembly {\n            swapContract := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        StableSwapThreePool(swapContract).initialize(\n            coins,\n            _A,\n            _fee,\n            _admin_fee,\n            _admin,\n            _LP\n        );\n\n        return swapContract;\n    }\n\n    /**\n     * @notice Sorts three token addresses in a consistent order.\n     * @param tokenA: Addresses of ERC20 conracts .\n     * @param tokenB: Addresses of ERC20 conracts .\n     * @param tokenC: Addresses of ERC20 conracts .\n     */\n    function sortTokens(\n        address tokenA,\n        address tokenB,\n        address tokenC\n    ) internal pure returns (address, address, address) {\n        require(\n            tokenA != tokenB && tokenA != tokenC && tokenB != tokenC,\n            \"IDENTICAL_ADDRESSES\"\n        );\n        address tmp;\n        if (tokenA > tokenB) {\n            tmp = tokenA;\n            tokenA = tokenB;\n            tokenB = tmp;\n        }\n        if (tokenB > tokenC) {\n            tmp = tokenB;\n            tokenB = tokenC;\n            tokenC = tmp;\n            if (tokenA > tokenB) {\n                tmp = tokenA;\n                tokenA = tokenB;\n                tokenB = tmp;\n            }\n        }\n        return (tokenA, tokenB, tokenC);\n    }\n}\n"
    },
    "contracts/stableSwap/StableSwapTwoPoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"./plain-pools/StableSwapTwoPool.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title stable swap three pool deployer\n * @notice A deployer contract for executing the three pool deloyment\n * @dev This contract manages the deployment of pool, including sorting the pool tokens\n */\n\ncontract StableSwapTwoPoolDeployer is Ownable {\n    uint256 public constant N_COINS = 2;\n\n    /*╔══════════════════════════════╗\n     ║          CONSTRUCTOR         ║\n     ╚══════════════════════════════╝*/\n\n    constructor() {}\n\n    /*╔══════════════════════════════╗\n     ║          ADMIN FUNCTIONS     ║\n     ╚══════════════════════════════╝*/\n\n    /**\n     * @notice createSwapPair\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     * @param _admin: Admin\n     * @param _LP: LP\n     */\n    function createSwapPair(\n        address _tokenA,\n        address _tokenB,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee,\n        address _admin,\n        address _LP\n    ) external onlyOwner returns (address) {\n        require(\n            _tokenA != address(0) &&\n                _tokenB != address(0) &&\n                _tokenA != _tokenB,\n            \"Illegal token\"\n        );\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\n        address[N_COINS] memory coins = [t0, t1];\n        // create swap contract\n        bytes memory bytecode = type(StableSwapTwoPool).creationCode;\n        bytes32 salt = keccak256(\n            abi.encodePacked(t0, t1, msg.sender, block.timestamp, block.chainid)\n        );\n        address swapContract;\n        assembly {\n            swapContract := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        StableSwapTwoPool(swapContract).initialize(\n            coins,\n            _A,\n            _fee,\n            _admin_fee,\n            _admin,\n            _LP\n        );\n\n        return swapContract;\n    }\n\n    /**\n     * @notice Sorts two token addresses in a consistent order.\n     * @param tokenA: Addresses of ERC20 conracts .\n     * @param tokenB: Addresses of ERC20 conracts .\n     */\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n    }\n}\n"
    },
    "contracts/stableSwap/utils/StableSwapInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/IStableSwapInfo.sol\";\nimport \"../../interfaces/IStableSwap.sol\";\n\n/**\n * @title StableSwapInfo\n * @notice Contract for retrieving information about stable swaps\n * @dev This contract provides functions to retrieve information about stable swaps with 2 or 3 coins\n */\ncontract StableSwapInfo {\n    IStableSwapInfo public immutable twoPoolInfo;\n    IStableSwapInfo public immutable threePoolInfo;\n\n    constructor(IStableSwapInfo _twoPoolInfo, IStableSwapInfo _threePoolInfo) {\n        twoPoolInfo = _twoPoolInfo;\n        threePoolInfo = _threePoolInfo;\n    }\n\n    \n    /**\n     * @notice get amountIn  with the given amount out  \n     * @param _swap: Addresses of pool conracts .\n     * @param i: the token index.\n     * @param j: the token index \n     * @param  dy :  the given amount out\n     * @param max_dx: the maximum of amount in \n     */\n     \n    function get_dx(\n        address _swap,\n        uint256 i,\n        uint256 j,\n        uint256 dy,\n        uint256 max_dx\n    ) external view returns (uint256 dx) {\n        uint256 N_COINS = IStableSwap(_swap).N_COINS();\n        if (N_COINS == 2) {\n            dx = twoPoolInfo.get_dx(_swap, i, j, dy, max_dx);\n        } else if (N_COINS == 3) {\n            dx = threePoolInfo.get_dx(_swap, i, j, dy, max_dx);\n        }\n    }\n}\n"
    },
    "contracts/stableSwap/utils/StableSwapThreePoolInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/IStableSwap.sol\";\n\n/**\n * @title StableSwapThreePoolInfo\n * @notice Contract for retrieving information about stable swaps with three coins\n * @dev This contract provides utility functions for retrieving information and calculating fees related to stable swaps with three coins.\n */\ncontract StableSwapThreePoolInfo {\n    uint256 public constant N_COINS = 3;\n    uint256 public constant FEE_DENOMINATOR = 1e10;\n    uint256 public constant PRECISION = 1e18;\n\n    /**\n     * @notice Get the LP token of the two pool\n     * @param _swap Address of the stable swap contract\n     */\n    function token(address _swap) public view returns (IERC20) {\n        return IERC20(IStableSwap(_swap).token());\n    }\n\n    /**\n     * @notice Get the balances of each coin in the pool\n     * @param _swap Address of the stable swap contract\n     */\n    function balances(address _swap) public view returns (uint256[N_COINS] memory swapBalances) {\n        for (uint256 i = 0; i < N_COINS; i++) {\n            swapBalances[i] = IStableSwap(_swap).balances(i);\n        }\n    }\n\n    /**\n     * @notice Get the exchange rates for each coin in the pool\n     * @param _swap Address of the stable swap contract\n     */\n    function RATES(address _swap) public view returns (uint256[N_COINS] memory swapRATES) {\n        for (uint256 i = 0; i < N_COINS; i++) {\n            swapRATES[i] = IStableSwap(_swap).RATES(i);\n        }\n    }\n\n    /**\n     * @notice Get the precision multipliers for each coin in the pool\n     * @param _swap Address of the stable swap contract\n     */\n    function PRECISION_MUL(address _swap) public view returns (uint256[N_COINS] memory swapPRECISION_MUL) {\n        for (uint256 i = 0; i < N_COINS; i++) {\n            swapPRECISION_MUL[i] = IStableSwap(_swap).PRECISION_MUL(i);\n        }\n    }\n\n    /**\n     * @notice Calculate the amount of each coin received when removing liquidity \n     * @param _swap Address of the stable swap contract\n     * @param _amount Amount of LP tokens to burn in the withdrawal\n     */\n    function calc_coins_amount(address _swap, uint256 _amount) external view returns (uint256[N_COINS] memory) {\n        uint256 total_supply = token(_swap).totalSupply();\n        uint256[N_COINS] memory amounts;\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 value = (IStableSwap(_swap).balances(i) * _amount) / total_supply;\n            amounts[i] = value;\n        }\n        return amounts;\n    }\n\n    /**\n    * @notice Calculates the total value of the pool's assets (invariant D), given balances and amplification factor.\n    * @param _balances Array of balances to calculate virtual balances from.\n    * @param amp Amplification factor of the pool.\n    */\n    function get_D_mem(\n        address _swap,\n        uint256[N_COINS] memory _balances,\n        uint256 amp\n    ) public view returns (uint256) {\n        return get_D(_xp_mem(_swap, _balances), amp);\n    }\n\n    /**\n     * @notice Calculate the amount of LP token received when adding liquidity\n     * @param _swap Address of the stable swap contract\n     * @param amounts Array of amounts for each coin being deposited\n     */\n    function get_add_liquidity_mint_amount(address _swap, uint256[N_COINS] memory amounts)\n        external\n        view\n        returns (uint256)\n    {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256[N_COINS] memory fees;\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\n        uint256 amp = swap.A();\n\n        uint256 token_supply = token(_swap).totalSupply();\n        //Initial invariant\n        uint256 D0;\n        uint256[N_COINS] memory old_balances = balances(_swap);\n        if (token_supply > 0) {\n            D0 = get_D_mem(_swap, old_balances, amp);\n        }\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1], old_balances[2]];\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (token_supply == 0) {\n                require(amounts[i] > 0, \"Initial deposit requires all coins\");\n            }\n            // balances store amounts of c-tokens\n            new_balances[i] = old_balances[i] + amounts[i];\n        }\n\n        // Invariant after change\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\n        require(D1 > D0, \"D1 must be greater than D0\");\n\n        // We need to recalculate the invariant accounting for fees\n        // to calculate fair user's share\n        uint256 D2 = D1;\n        if (token_supply > 0) {\n            // Only account for fees if we are not the first to deposit\n            for (uint256 i = 0; i < N_COINS; i++) {\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\n                uint256 difference;\n                if (ideal_balance > new_balances[i]) {\n                    difference = ideal_balance - new_balances[i];\n                } else {\n                    difference = new_balances[i] - ideal_balance;\n                }\n\n                fees[i] = (_fee * difference) / FEE_DENOMINATOR;\n                new_balances[i] -= fees[i];\n            }\n            D2 = get_D_mem(_swap, new_balances, amp);\n        }\n\n        // Calculate, how much pool tokens to mint\n        uint256 mint_amount;\n        if (token_supply == 0) {\n            mint_amount = D1; // Take the dust if there was any\n        } else {\n            mint_amount = (token_supply * (D2 - D0)) / D0;\n        }\n        return mint_amount;\n    }\n\n    /**\n     * @notice Calculate the fee charged when adding liquidity\n     * @param _swap Address of the stable swap contract\n     * @param amounts Array of amounts for each coin being deposited\n     */\n    function get_add_liquidity_fee(address _swap, uint256[N_COINS] memory amounts)\n        external\n        view\n        returns (uint256[N_COINS] memory liquidityFee)\n    {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\n        uint256 _admin_fee = swap.admin_fee();\n        uint256 amp = swap.A();\n\n        uint256 token_supply = token(_swap).totalSupply();\n        //Initial invariant\n        uint256 D0;\n        uint256[N_COINS] memory old_balances = balances(_swap);\n        if (token_supply > 0) {\n            D0 = get_D_mem(_swap, old_balances, amp);\n        }\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1], old_balances[2]];\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (token_supply == 0) {\n                require(amounts[i] > 0, \"Initial deposit requires all coins\");\n            }\n            new_balances[i] = old_balances[i] + amounts[i];\n        }\n\n        // Invariant after change\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\n        require(D1 > D0, \"D1 must be greater than D0\");\n        if (token_supply > 0) {\n            // Only account for fees if we are not the first to deposit\n            for (uint256 i = 0; i < N_COINS; i++) {\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\n                uint256 difference;\n                if (ideal_balance > new_balances[i]) {\n                    difference = ideal_balance - new_balances[i];\n                } else {\n                    difference = new_balances[i] - ideal_balance;\n                }\n                uint256 coinFee;\n                coinFee = (_fee * difference) / FEE_DENOMINATOR;\n                liquidityFee[i] = ((coinFee * _admin_fee) / FEE_DENOMINATOR);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculate the fee charged when removing liquidity\n     * @param _swap Address of the stable swap contract\n     * @param amounts Array of amounts for each coin being withdrawn\n     */\n    function get_remove_liquidity_imbalance_fee(address _swap, uint256[N_COINS] memory amounts)\n        external\n        view\n        returns (uint256[N_COINS] memory liquidityFee)\n    {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\n        uint256 _admin_fee = swap.admin_fee();\n        uint256 amp = swap.A();\n\n        uint256[N_COINS] memory old_balances = balances(_swap);\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1], old_balances[2]];\n        uint256 D0 = get_D_mem(_swap, old_balances, amp);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            new_balances[i] -= amounts[i];\n        }\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 ideal_balance = (D1 * old_balances[i]) / D0;\n            uint256 difference;\n            if (ideal_balance > new_balances[i]) {\n                difference = ideal_balance - new_balances[i];\n            } else {\n                difference = new_balances[i] - ideal_balance;\n            }\n            uint256 coinFee;\n            coinFee = (_fee * difference) / FEE_DENOMINATOR;\n            liquidityFee[i] = ((coinFee * _admin_fee) / FEE_DENOMINATOR);\n        }\n    }\n\n    /**\n    * @notice Calculates the array of virtual balances for the pool, scaled by precision, using provided balances.\n    * @param _balances The array of balances to calculate virtual balances from.\n    */\n    function _xp_mem(address _swap, uint256[N_COINS] memory _balances)\n        public\n        view\n        returns (uint256[N_COINS] memory result)\n    {\n        result = RATES(_swap);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            result[i] = (result[i] * _balances[i]) / PRECISION;\n        }\n    }\n\n    /**\n    * @notice Calculates the total value of the pool's assets (invariant D), given virtual balances and amplification factor.\n    * @param xp Array of virtual balances for the pool, scaled by precision.\n    * @param amp Amplification factor of the pool.\n    * @return D The total value of the pool's assets (invariant D).\n    */\n    function get_D(uint256[N_COINS] memory xp, uint256 amp) internal pure returns (uint256) {\n        uint256 S;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            S += xp[i];\n        }\n        if (S == 0) {\n            return 0;\n        }\n\n        uint256 Dprev;\n        uint256 D = S;\n        uint256 Ann = amp * N_COINS;\n        for (uint256 j = 0; j < 255; j++) {\n            uint256 D_P = D;\n            for (uint256 k = 0; k < N_COINS; k++) {\n                D_P = (D_P * D) / (xp[k] * N_COINS); // If division by 0, this will be borked: only withdrawal will work. And that is good\n            }\n            Dprev = D;\n            D = ((Ann * S + D_P * N_COINS) * D) / ((Ann - 1) * D + (N_COINS + 1) * D_P);\n            // Equality with the precision of 1\n            if (D > Dprev) {\n                if (D - Dprev <= 1) {\n                    break;\n                }\n            } else {\n                if (Dprev - D <= 1) {\n                    break;\n                }\n            }\n        }\n        return D;\n    }\n\n    /**\n    * @notice Get the amount of coin j one would receive for swapping x of coin i, using the current virtual balances.\n    * @param i Index of coin to swap from.\n    * @param j Index of coin to swap to\n    * @param x Amount of coin i to swap\n    * @param xp_ The array of virtual balances for the pool, scaled by precision.\n    */\n    function get_y(\n        address _swap,\n        uint256 i,\n        uint256 j,\n        uint256 x,\n        uint256[N_COINS] memory xp_\n    ) internal view returns (uint256) {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256 amp = swap.A();\n        uint256 D = get_D(xp_, amp);\n        uint256 c = D;\n        uint256 S_;\n        uint256 Ann = amp * N_COINS;\n\n        uint256 _x;\n        for (uint256 k = 0; k < N_COINS; k++) {\n            if (k == i) {\n                _x = x;\n            } else if (k != j) {\n                _x = xp_[k];\n            } else {\n                continue;\n            }\n            S_ += _x;\n            c = (c * D) / (_x * N_COINS);\n        }\n        c = (c * D) / (Ann * N_COINS);\n        uint256 b = S_ + D / Ann; // - D\n        uint256 y_prev;\n        uint256 y = D;\n\n        for (uint256 m = 0; m < 255; m++) {\n            y_prev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            // Equality with the precision of 1\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    break;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    break;\n                }\n            }\n        }\n        return y;\n    }\n\n    /**\n    * @notice Calculates the exchange fee and admin fee for a token swap\n    * @param _swap Address of the stable swap contract\n    * @param i Index of the token to swap from\n    * @param j Index of the token to swap to\n    * @param dx Amount of token to swap from\n    * @return exFee Exchange fee for the swap\n    * @return exAdminFee Admin fee for the swap\n    */\n    function get_exchange_fee(\n        address _swap,\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256 exFee, uint256 exAdminFee) {\n        IStableSwap swap = IStableSwap(_swap);\n\n        uint256[N_COINS] memory old_balances = balances(_swap);\n        uint256[N_COINS] memory xp = _xp_mem(_swap, old_balances);\n        uint256[N_COINS] memory rates = RATES(_swap);\n        uint256 x = xp[i] + (dx * rates[i]) / PRECISION;\n        uint256 y = get_y(_swap, i, j, x, xp);\n\n        uint256 dy = xp[j] - y - 1; //  -1 just in case there were some rounding errors\n        uint256 dy_fee = (dy * swap.fee()) / FEE_DENOMINATOR;\n\n        uint256 dy_admin_fee = (dy_fee * swap.admin_fee()) / FEE_DENOMINATOR;\n        dy_fee = (dy_fee * PRECISION) / rates[j];\n        dy_admin_fee = (dy_admin_fee * PRECISION) / rates[j];\n        exFee = dy_fee;\n        exAdminFee = dy_admin_fee;\n    }\n\n    /**\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision\n     */\n    function _xp(address _swap) internal view returns (uint256[N_COINS] memory result) {\n        result = RATES(_swap);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            result[i] = (result[i] * IStableSwap(_swap).balances(i)) / PRECISION;\n        }\n    }\n\n    /**\n    * @notice Get the amount of coin i given a reduction in invariant D, considering a specific value of parameter A and current virtual balances.\n    * @param A_ The value of parameter A.\n    * @param i The index of the coin for which the output amount is calculated.\n    * @param xp The array of virtual balances for the pool, scaled by precision.\n    * @param D The new value of invariant D.\n    */\n    function get_y_D(\n        uint256 A_,\n        uint256 i,\n        uint256[N_COINS] memory xp,\n        uint256 D\n    ) internal pure returns (uint256) {\n        /**\n        Calculate x[i] if one reduces D from being calculated for xp to D\n\n        Done by solving quadratic equation iteratively.\n        x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\n        x_1**2 + b*x_1 = c\n\n        x_1 = (x_1**2 + c) / (2*x_1 + b)\n        */\n        // x in the input is converted to the same price/precision\n        require(i < N_COINS, \"dev: i above N_COINS\");\n        uint256 c = D;\n        uint256 S_;\n        uint256 Ann = A_ * N_COINS;\n\n        uint256 _x;\n        for (uint256 k = 0; k < N_COINS; k++) {\n            if (k != i) {\n                _x = xp[k];\n            } else {\n                continue;\n            }\n            S_ += _x;\n            c = (c * D) / (_x * N_COINS);\n        }\n        c = (c * D) / (Ann * N_COINS);\n        uint256 b = S_ + D / Ann;\n        uint256 y_prev;\n        uint256 y = D;\n\n        for (uint256 k = 0; k < 255; k++) {\n            y_prev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            // Equality with the precision of 1\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    break;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    break;\n                }\n            }\n        }\n        return y;\n    }\n\n    /**\n     * @notice Calculate the amount received when withdrawing a single coin.\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\n     * @param i: Index value of the coin to withdraw\n     */\n    function _calc_withdraw_one_coin(\n        address _swap,\n        uint256 _token_amount,\n        uint256 i\n    ) internal view returns (uint256, uint256) {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256 amp = swap.A();\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\n        uint256[N_COINS] memory precisions = PRECISION_MUL(_swap);\n\n        uint256[N_COINS] memory xp = _xp(_swap);\n\n        uint256 D0 = get_D(xp, amp);\n        uint256 D1 = D0 - (_token_amount * D0) / (token(_swap).totalSupply());\n        uint256[N_COINS] memory xp_reduced = xp;\n\n        uint256 new_y = get_y_D(amp, i, xp, D1);\n        uint256 dy_0 = (xp[i] - new_y) / precisions[i]; // w/o fees\n\n        for (uint256 k = 0; k < N_COINS; k++) {\n            uint256 dx_expected;\n            if (k == i) {\n                dx_expected = (xp[k] * D1) / D0 - new_y;\n            } else {\n                dx_expected = xp[k] - (xp[k] * D1) / D0;\n            }\n            xp_reduced[k] -= (_fee * dx_expected) / FEE_DENOMINATOR;\n        }\n        uint256 dy = xp_reduced[i] - get_y_D(amp, i, xp_reduced, D1);\n        dy = (dy - 1) / precisions[i]; // Withdraw less to account for rounding errors\n\n        return (dy, dy_0 - dy);\n    }\n\n    /**\n     * @notice Calculate the fee charged when removing liquidity for a single coin\n     * @param _swap Address of the stable swap contract\n     * @param _token_amount Amount of liquidity tokens being withdrawn\n     * @param i Index of the coin to withdraw\n     */\n    function get_remove_liquidity_one_coin_fee(\n        address _swap,\n        uint256 _token_amount,\n        uint256 i\n    ) external view returns (uint256 adminFee) {\n        IStableSwap swap = IStableSwap(_swap);\n        (, uint256 dy_fee) = _calc_withdraw_one_coin(_swap, _token_amount, i);\n        adminFee = (dy_fee * swap.admin_fee()) / FEE_DENOMINATOR;\n    }\n\n    /**\n     * @notice get amountIn  with the given amount out  \n     * @param _swap: Addresses of pool conracts .\n     * @param i: the token index.\n     * @param j: the token index \n     * @param  dy :  the given amount out\n     * @param max_dx: the maximum of amount in \n     */\n    function get_dx(\n        address _swap,\n        uint256 i,\n        uint256 j,\n        uint256 dy,\n        uint256 max_dx\n    ) external view returns (uint256) {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256[N_COINS] memory old_balances = balances(_swap);\n        uint256[N_COINS] memory xp = _xp_mem(_swap, old_balances);\n\n        uint256 dy_with_fee = (dy * FEE_DENOMINATOR) / (FEE_DENOMINATOR - swap.fee());\n        require(dy_with_fee < old_balances[j], \"Excess balance\");\n        uint256[N_COINS] memory rates = RATES(_swap);\n        uint256 y = xp[j] - (dy_with_fee * rates[j]) / PRECISION;\n        uint256 x = get_y(_swap, j, i, y, xp);\n\n        uint256 dx = x - xp[i];\n\n        // Convert all to real units\n        dx = (dx * PRECISION) / rates[i] + 1; // +1 for round lose.\n        require(dx <= max_dx, \"Exchange resulted in fewer coins than expected\");\n        return dx;\n    }\n}\n"
    },
    "contracts/stableSwap/utils/StableSwapTwoPoolInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/IStableSwap.sol\";\n\n/**\n * @title StableSwapTwoPoolInfo\n * @notice Contract for retrieving information about stable swaps with two coins\n * @dev This contract provides utility functions for retrieving information and calculating fees related to stable swaps with two coins.\n */\ncontract StableSwapTwoPoolInfo {\n    uint256 public constant N_COINS = 2;\n    uint256 public constant FEE_DENOMINATOR = 1e10;\n    uint256 public constant PRECISION = 1e18;\n\n    /**\n     * @notice Get the LP token of the two pool\n     * @param _swap Address of the stable swap contract\n     */\n    function token(address _swap) public view returns (IERC20) {\n        return IERC20(IStableSwap(_swap).token());\n    }\n\n     /**\n     * @notice Get the balances of each coin in the pool\n     * @param _swap Address of the stable swap contract\n     */\n    function balances(address _swap) public view returns (uint256[N_COINS] memory swapBalances) {\n        for (uint256 i = 0; i < N_COINS; i++) {\n            swapBalances[i] = IStableSwap(_swap).balances(i);\n        }\n    }\n    \n    /**\n     * @notice Get the exchange rates for each coin in the pool\n     * @param _swap Address of the stable swap contract\n     */\n    function RATES(address _swap) public view returns (uint256[N_COINS] memory swapRATES) {\n        for (uint256 i = 0; i < N_COINS; i++) {\n            swapRATES[i] = IStableSwap(_swap).RATES(i);\n        }\n    }\n\n    /**\n     * @notice Get the precision multipliers for each coin in the pool\n     * @param _swap Address of the stable swap contract\n     */\n    function PRECISION_MUL(address _swap) public view returns (uint256[N_COINS] memory swapPRECISION_MUL) {\n        for (uint256 i = 0; i < N_COINS; i++) {\n            swapPRECISION_MUL[i] = IStableSwap(_swap).PRECISION_MUL(i);\n        }\n    }\n\n    /**\n     * @notice Calculate the amount of each coin received when removing liquidity \n     * @param _swap Address of the stable swap contract\n     * @param _amount Amount of LP tokens to burn in the withdrawal\n     */\n    function calc_coins_amount(address _swap, uint256 _amount) external view returns (uint256[N_COINS] memory) {\n        uint256 total_supply = token(_swap).totalSupply();\n        uint256[N_COINS] memory amounts;\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 value = (IStableSwap(_swap).balances(i) * _amount) / total_supply;\n            amounts[i] = value;\n        }\n        return amounts;\n    }\n\n    /**\n    * @notice Calculates the total value of the pool's assets (invariant D), given balances and amplification factor.\n    * @param _balances Array of balances to calculate virtual balances from.\n    * @param amp Amplification factor of the pool.\n    */\n    function get_D_mem(\n        address _swap,\n        uint256[N_COINS] memory _balances,\n        uint256 amp\n    ) public view returns (uint256) {\n        return get_D(_xp_mem(_swap, _balances), amp);\n    }\n\n    /**\n     * @notice Calculate the amount of LP token received when adding liquidity\n     * @param _swap Address of the stable swap contract\n     * @param amounts Array of amounts for each coin being deposited\n     */\n    function get_add_liquidity_mint_amount(address _swap, uint256[N_COINS] memory amounts)\n        external\n        view\n        returns (uint256)\n    {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256[N_COINS] memory fees;\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\n        uint256 amp = swap.A();\n\n        uint256 token_supply = token(_swap).totalSupply();\n        //Initial invariant\n        uint256 D0;\n        uint256[N_COINS] memory old_balances = balances(_swap);\n        if (token_supply > 0) {\n            D0 = get_D_mem(_swap, old_balances, amp);\n        }\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1]];\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (token_supply == 0) {\n                require(amounts[i] > 0, \"Initial deposit requires all coins\");\n            }\n            // balances store amounts of c-tokens\n            new_balances[i] = old_balances[i] + amounts[i];\n        }\n\n        // Invariant after change\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\n        require(D1 > D0, \"D1 must be greater than D0\");\n\n        // We need to recalculate the invariant accounting for fees\n        // to calculate fair user's share\n        uint256 D2 = D1;\n        if (token_supply > 0) {\n            // Only account for fees if we are not the first to deposit\n            for (uint256 i = 0; i < N_COINS; i++) {\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\n                uint256 difference;\n                if (ideal_balance > new_balances[i]) {\n                    difference = ideal_balance - new_balances[i];\n                } else {\n                    difference = new_balances[i] - ideal_balance;\n                }\n\n                fees[i] = (_fee * difference) / FEE_DENOMINATOR;\n                new_balances[i] -= fees[i];\n            }\n            D2 = get_D_mem(_swap, new_balances, amp);\n        }\n\n        // Calculate, how much pool tokens to mint\n        uint256 mint_amount;\n        if (token_supply == 0) {\n            mint_amount = D1; // Take the dust if there was any\n        } else {\n            mint_amount = (token_supply * (D2 - D0)) / D0;\n        }\n        return mint_amount;\n    }\n\n    /**\n     * @notice Calculate the fee charged when adding liquidity\n     * @param _swap Address of the stable swap contract\n     * @param amounts Array of amounts for each coin being deposited\n     */\n    function get_add_liquidity_fee(address _swap, uint256[N_COINS] memory amounts)\n        external\n        view\n        returns (uint256[N_COINS] memory liquidityFee)\n    {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\n        uint256 _admin_fee = swap.admin_fee();\n        uint256 amp = swap.A();\n\n        uint256 token_supply = token(_swap).totalSupply();\n        //Initial invariant\n        uint256 D0;\n        uint256[N_COINS] memory old_balances = balances(_swap);\n\n        if (token_supply > 0) {\n            D0 = get_D_mem(_swap, old_balances, amp);\n        }\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1]];\n\n        for (uint256 i = 0; i < N_COINS; i++) {\n            if (token_supply == 0) {\n                require(amounts[i] > 0, \"Initial deposit requires all coins\");\n            }\n            new_balances[i] = old_balances[i] + amounts[i];\n        }\n\n        // Invariant after change\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\n        require(D1 > D0, \"D1 must be greater than D0\");\n        if (token_supply > 0) {\n            // Only account for fees if we are not the first to deposit\n            for (uint256 i = 0; i < N_COINS; i++) {\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\n                uint256 difference;\n                if (ideal_balance > new_balances[i]) {\n                    difference = ideal_balance - new_balances[i];\n                } else {\n                    difference = new_balances[i] - ideal_balance;\n                }\n                uint256 coinFee;\n                coinFee = (_fee * difference) / FEE_DENOMINATOR;\n                liquidityFee[i] = ((coinFee * _admin_fee) / FEE_DENOMINATOR);\n            }\n        }\n    }\n\n     /**\n     * @notice Calculate the fee charged when removing liquidity\n     * @param _swap Address of the stable swap contract\n     * @param amounts Array of amounts for each coin being withdrawn\n     */\n    function get_remove_liquidity_imbalance_fee(address _swap, uint256[N_COINS] memory amounts)\n        external\n        view\n        returns (uint256[N_COINS] memory liquidityFee)\n    {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\n        uint256 _admin_fee = swap.admin_fee();\n        uint256 amp = swap.A();\n\n        uint256[N_COINS] memory old_balances = balances(_swap);\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1]];\n        uint256 D0 = get_D_mem(_swap, old_balances, amp);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            new_balances[i] -= amounts[i];\n        }\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            uint256 ideal_balance = (D1 * old_balances[i]) / D0;\n            uint256 difference;\n            if (ideal_balance > new_balances[i]) {\n                difference = ideal_balance - new_balances[i];\n            } else {\n                difference = new_balances[i] - ideal_balance;\n            }\n            uint256 coinFee;\n            coinFee = (_fee * difference) / FEE_DENOMINATOR;\n            liquidityFee[i] = ((coinFee * _admin_fee) / FEE_DENOMINATOR);\n        }\n    }\n\n    /**\n    * @notice Calculates the array of virtual balances for the pool, scaled by precision, using provided balances.\n    * @param _balances The array of balances to calculate virtual balances from.\n    */\n    function _xp_mem(address _swap, uint256[N_COINS] memory _balances)\n        public\n        view\n        returns (uint256[N_COINS] memory result)\n    {\n        result = RATES(_swap);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            result[i] = (result[i] * _balances[i]) / PRECISION;\n        }\n    }\n\n    /**\n    * @notice Calculates the total value of the pool's assets (invariant D), given virtual balances and amplification factor.\n    * @param xp Array of virtual balances for the pool, scaled by precision.\n    * @param amp Amplification factor of the pool.\n    * @return D The total value of the pool's assets (invariant D).\n    */\n    function get_D(uint256[N_COINS] memory xp, uint256 amp) internal pure returns (uint256) {\n        uint256 S;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            S += xp[i];\n        }\n        if (S == 0) {\n            return 0;\n        }\n\n        uint256 Dprev;\n        uint256 D = S;\n        uint256 Ann = amp * N_COINS;\n        for (uint256 j = 0; j < 255; j++) {\n            uint256 D_P = D;\n            for (uint256 k = 0; k < N_COINS; k++) {\n                D_P = (D_P * D) / (xp[k] * N_COINS); // If division by 0, this will be borked: only withdrawal will work. And that is good\n            }\n            Dprev = D;\n            D = ((Ann * S + D_P * N_COINS) * D) / ((Ann - 1) * D + (N_COINS + 1) * D_P);\n            // Equality with the precision of 1\n            if (D > Dprev) {\n                if (D - Dprev <= 1) {\n                    break;\n                }\n            } else {\n                if (Dprev - D <= 1) {\n                    break;\n                }\n            }\n        }\n        return D;\n    }\n\n    /**\n    * @notice Get the amount of coin j one would receive for swapping x of coin i, using the current virtual balances.\n    * @param i Index of coin to swap from.\n    * @param j Index of coin to swap to\n    * @param x Amount of coin i to swap\n    * @param xp_ The array of virtual balances for the pool, scaled by precision.\n    */\n    function get_y(\n        address _swap,\n        uint256 i,\n        uint256 j,\n        uint256 x,\n        uint256[N_COINS] memory xp_\n    ) internal view returns (uint256) {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256 amp = swap.A();\n        uint256 D = get_D(xp_, amp);\n        uint256 c = D;\n        uint256 S_;\n        uint256 Ann = amp * N_COINS;\n\n        uint256 _x;\n        for (uint256 k = 0; k < N_COINS; k++) {\n            if (k == i) {\n                _x = x;\n            } else if (k != j) {\n                _x = xp_[k];\n            } else {\n                continue;\n            }\n            S_ += _x;\n            c = (c * D) / (_x * N_COINS);\n        }\n        c = (c * D) / (Ann * N_COINS);\n        uint256 b = S_ + D / Ann; // - D\n        uint256 y_prev;\n        uint256 y = D;\n\n        for (uint256 m = 0; m < 255; m++) {\n            y_prev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            // Equality with the precision of 1\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    break;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    break;\n                }\n            }\n        }\n        return y;\n    }\n\n    /**\n    * @notice Calculates the exchange fee and admin fee for a token swap\n    * @param _swap Address of the stable swap contract\n    * @param i Index of the token to swap from\n    * @param j Index of the token to swap to\n    * @param dx Amount of token to swap from\n    * @return exFee Exchange fee for the swap\n    * @return exAdminFee Admin fee for the swap\n    */\n    function get_exchange_fee(\n        address _swap,\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256 exFee, uint256 exAdminFee) {\n        IStableSwap swap = IStableSwap(_swap);\n\n        uint256[N_COINS] memory old_balances = balances(_swap);\n        uint256[N_COINS] memory xp = _xp_mem(_swap, old_balances);\n        uint256[N_COINS] memory rates = RATES(_swap);\n        uint256 x = xp[i] + (dx * rates[i]) / PRECISION;\n        uint256 y = get_y(_swap, i, j, x, xp);\n\n        uint256 dy = xp[j] - y - 1; //  -1 just in case there were some rounding errors\n        uint256 dy_fee = (dy * swap.fee()) / FEE_DENOMINATOR;\n\n        uint256 dy_admin_fee = (dy_fee * swap.admin_fee()) / FEE_DENOMINATOR;\n        dy_fee = (dy_fee * PRECISION) / rates[j];\n        dy_admin_fee = (dy_admin_fee * PRECISION) / rates[j];\n        exFee = dy_fee;\n        exAdminFee = dy_admin_fee;\n    }\n\n    /**\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision\n     */\n    function _xp(address _swap) internal view returns (uint256[N_COINS] memory result) {\n        result = RATES(_swap);\n        for (uint256 i = 0; i < N_COINS; i++) {\n            result[i] = (result[i] * IStableSwap(_swap).balances(i)) / PRECISION;\n        }\n    }\n\n    /**\n    * @notice Get the amount of coin i given a reduction in invariant D, considering a specific value of parameter A and current virtual balances.\n    * @param A_ The value of parameter A.\n    * @param i The index of the coin for which the output amount is calculated.\n    * @param xp The array of virtual balances for the pool, scaled by precision.\n    * @param D The new value of invariant D.\n    */\n    function get_y_D(\n        uint256 A_,\n        uint256 i,\n        uint256[N_COINS] memory xp,\n        uint256 D\n    ) internal pure returns (uint256) {\n        /**\n        Calculate x[i] if one reduces D from being calculated for xp to D\n\n        Done by solving quadratic equation iteratively.\n        x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\n        x_1**2 + b*x_1 = c\n\n        x_1 = (x_1**2 + c) / (2*x_1 + b)\n        */\n        // x in the input is converted to the same price/precision\n        require(i < N_COINS, \"dev: i above N_COINS\");\n        uint256 c = D;\n        uint256 S_;\n        uint256 Ann = A_ * N_COINS;\n\n        uint256 _x;\n        for (uint256 k = 0; k < N_COINS; k++) {\n            if (k != i) {\n                _x = xp[k];\n            } else {\n                continue;\n            }\n            S_ += _x;\n            c = (c * D) / (_x * N_COINS);\n        }\n        c = (c * D) / (Ann * N_COINS);\n        uint256 b = S_ + D / Ann;\n        uint256 y_prev;\n        uint256 y = D;\n\n        for (uint256 k = 0; k < 255; k++) {\n            y_prev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            // Equality with the precision of 1\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    break;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    break;\n                }\n            }\n        }\n        return y;\n    }\n\n    /**\n     * @notice Calculate the amount received when withdrawing a single coin.\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\n     * @param i: Index value of the coin to withdraw\n     */\n    function _calc_withdraw_one_coin(\n        address _swap,\n        uint256 _token_amount,\n        uint256 i\n    ) internal view returns (uint256, uint256) {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256 amp = swap.A();\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\n        uint256[N_COINS] memory precisions = PRECISION_MUL(_swap);\n\n        uint256[N_COINS] memory xp = _xp(_swap);\n\n        uint256 D0 = get_D(xp, amp);\n        uint256 D1 = D0 - (_token_amount * D0) / (token(_swap).totalSupply());\n        uint256[N_COINS] memory xp_reduced = xp;\n\n        uint256 new_y = get_y_D(amp, i, xp, D1);\n        uint256 dy_0 = (xp[i] - new_y) / precisions[i]; // w/o fees\n\n        for (uint256 k = 0; k < N_COINS; k++) {\n            uint256 dx_expected;\n            if (k == i) {\n                dx_expected = (xp[k] * D1) / D0 - new_y;\n            } else {\n                dx_expected = xp[k] - (xp[k] * D1) / D0;\n            }\n            xp_reduced[k] -= (_fee * dx_expected) / FEE_DENOMINATOR;\n        }\n        uint256 dy = xp_reduced[i] - get_y_D(amp, i, xp_reduced, D1);\n        dy = (dy - 1) / precisions[i]; // Withdraw less to account for rounding errors\n\n        return (dy, dy_0 - dy);\n    }\n\n     /**\n     * @notice Calculate the fee charged when removing liquidity for a single coin\n     * @param _swap Address of the stable swap contract\n     * @param _token_amount Amount of liquidity tokens being withdrawn\n     * @param i Index of the coin to withdraw\n     */\n    function get_remove_liquidity_one_coin_fee(\n        address _swap,\n        uint256 _token_amount,\n        uint256 i\n    ) external view returns (uint256 adminFee) {\n        IStableSwap swap = IStableSwap(_swap);\n        (, uint256 dy_fee) = _calc_withdraw_one_coin(_swap, _token_amount, i);\n        adminFee = (dy_fee * swap.admin_fee()) / FEE_DENOMINATOR;\n    }\n\n    /**\n     * @notice get amountIn  with the given amount out  \n     * @param _swap: Addresses of pool conracts .\n     * @param i: the token index.\n     * @param j: the token index \n     * @param  dy :  the given amount out\n     * @param max_dx: the maximum of amount in \n     */\n    function get_dx(\n        address _swap,\n        uint256 i,\n        uint256 j,\n        uint256 dy,\n        uint256 max_dx\n    ) external view returns (uint256) {\n        IStableSwap swap = IStableSwap(_swap);\n        uint256[N_COINS] memory old_balances = balances(_swap);\n        uint256[N_COINS] memory xp = _xp_mem(_swap, old_balances);\n\n        uint256 dy_with_fee = (dy * FEE_DENOMINATOR) / (FEE_DENOMINATOR - swap.fee());\n        require(dy_with_fee < old_balances[j], \"Excess balance\");\n        uint256[N_COINS] memory rates = RATES(_swap);\n        uint256 y = xp[j] - (dy_with_fee * rates[j]) / PRECISION;\n        uint256 x = get_y(_swap, j, i, y, xp);\n\n        uint256 dx = x - xp[i];\n\n        // Convert all to real units\n        dx = (dx * PRECISION) / rates[i] + 1; // +1 for round lose.\n        require(dx <= max_dx, \"Exchange resulted in fewer coins than expected\");\n        return dx;\n    }\n}\n"
    },
    "contracts/StableSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IStableSwapRouter.sol\";\nimport \"./interfaces/IStableSwap.sol\";\nimport \"./interfaces/IWROSE.sol\";\nimport \"./libraries/SmartRouterHelper.sol\";\nimport \"./libraries/Constants.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"hardhat/console.sol\";\n\n/// @title Stable Swap Router\n/// @notice A router contract for excuting stable swaps between different stablecoins pairs through mutiple pools\n///         It allows users to swap stable coins efficiently\n/// @dev    This contract manages stable swap functionality, including executing swaps and caculating swap amounts\n\ncontract StableSwapRouter is IStableSwapRouter, Ownable, ReentrancyGuard {\n    address public WROSE;\n\n    address public stableSwapFactory;\n    address public stableSwapInfo;\n\n    address public constant ROSE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    bool public isKill;\n\n    /*╔══════════════════════════════╗\n     ║          EVENT               ║\n     ╚══════════════════════════════╝*/\n\n    event SetStableSwap(address indexed factory, address indexed info);\n\n    event StableExchange(\n        address indexed buyer,\n        uint256 amountIn,\n        address indexed token1,\n        uint256 amountOut,\n        address indexed token2,\n        address recipient\n    );\n\n    receive() external payable {}\n\n    /*╔══════════════════════════════╗\n      ║          CONSTRUCTOR         ║\n      ╚══════════════════════════════╝*/\n\n    constructor(address _stableSwapFactory, address _stableSwapInfo) {\n        stableSwapFactory = _stableSwapFactory;\n        stableSwapInfo = _stableSwapInfo;\n        isKill = false;\n    }\n\n    /*╔══════════════════════════════╗\n      ║          ADMIN FUNCTIONS     ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice Set Stable Swap Factory and Info\n     * @dev Only callable by contract owner\n     */\n    function setStableSwap(address _factory, address _info) external onlyOwner {\n        require(_factory != address(0) && _info != address(0));\n\n        stableSwapFactory = _factory;\n        stableSwapInfo = _info;\n\n        emit SetStableSwap(stableSwapFactory, stableSwapInfo);\n    }\n\n    /*╔══════════════════════════════╗\n      ║          FUNCTIONS           ║\n      ╚══════════════════════════════╝*/\n\n    function _swap(address[] memory path, uint256[] memory flag) private {\n        uint256 amountIn_;\n        require(path.length - 1 == flag.length);\n        for (uint256 i; i < flag.length; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (uint256 k, uint256 j, address swapContract) = SmartRouterHelper\n                .getStableInfo(stableSwapFactory, input, output, flag[i]);\n            if (input == ROSE) {\n                amountIn_ = address(this).balance;\n                IStableSwap(swapContract).exchange{value: amountIn_}(\n                    k,\n                    j,\n                    amountIn_,\n                    0\n                );\n            }\n            if (input != ROSE) {\n                amountIn_ = IERC20(input).balanceOf(address(this));\n                TransferHelper.safeApprove(input, swapContract, amountIn_);\n                IStableSwap(swapContract).exchange(k, j, amountIn_, 0);\n            }\n        }\n    }\n\n    /**\n     * @param path Array of token addresses in a stable swap pool.\n     * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\n     * @param amountIn Amount of the input token to be exchanged.\n     * @param amountOutMin Minimum expected amount of output tokens.\n     * @param to Recipient address to receive the exchanged tokens.\n     */\n    function exactInputStableSwap(\n        address[] calldata path,\n        uint256[] calldata flag,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address to\n    ) external payable nonReentrant returns (uint256 amountOut) {\n        require(!isKill, \"Contract is killed\");\n        address srcToken = path[0];\n        address dstToken = path[path.length - 1];\n\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\n\n        bool hasAlreadyPaid;\n        if (amountIn == Constants.CONTRACT_BALANCE) {\n            hasAlreadyPaid = true;\n            if (srcToken == ROSE) {\n                amountIn = address(this).balance;\n            } else {\n                amountIn = IERC20(srcToken).balanceOf(address(this));\n            }\n        }\n\n        if (!hasAlreadyPaid) {\n            if (srcToken == ROSE) {\n                require(msg.value >= amountIn, \"Invalid msg.value\");\n            } else {\n                pay(srcToken, msg.sender, address(this), amountIn);\n            }\n        }\n        _swap(path, flag);\n\n        if (dstToken == ROSE) {\n            amountOut = address(this).balance;\n        } else {\n            amountOut = IERC20(dstToken).balanceOf(address(this));\n        }\n\n        require(amountOut >= amountOutMin);\n\n        // find and replace to addresses\n        if (to == Constants.MSG_SENDER) to = msg.sender;\n        else if (to == Constants.ADDRESS_THIS) to = address(this);\n\n        if (to != address(this)) {\n            pay(dstToken, address(this), to, amountOut);\n        }\n\n        emit StableExchange(\n            msg.sender,\n            amountIn,\n            path[0],\n            amountOut,\n            path[path.length - 1],\n            to\n        );\n    }\n\n    /**\n     * @param path Array of token addresses in a stable swap pool.\n     * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\n     * @param amountIn Amount of the exchanged token .\n     * @param amountOutMin Minimum expected amount of output tokens.\n     */\n    function getOutputStableSwap(\n        address[] calldata path,\n        uint256[] calldata flag,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external view returns (uint256 amountOut) {\n        amountOut = SmartRouterHelper.getStableAmountsOut(\n            stableSwapFactory,\n            path,\n            flag,\n            amountIn\n        )[path.length - 1];\n        require(\n            amountOut >= amountOutMin,\n            \"The amount of token is smaller than expected\"\n        );\n        return amountOut;\n    }\n\n    /**\n     * @param path Array of token addresses in a stable swap pool.\n     * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\n     * @param amountOut Amount of the redeemed token .\n     * @param amountInMax Maximum expected amount of output tokens.\n     */\n    function getInputStableSwap(\n        address[] calldata path,\n        uint256[] calldata flag,\n        uint256 amountOut,\n        uint256 amountInMax\n    ) external view returns (uint256 amountIn) {\n        amountIn = SmartRouterHelper.getStableAmountsIn(\n            stableSwapFactory,\n            stableSwapInfo,\n            path,\n            flag,\n            amountOut\n        )[0];\n        require(\n            amountIn <= amountInMax,\n            \"The amount of token is greater than expected\"\n        );\n        return amountIn;\n    }\n\n    /**\n     * @dev Internal function to facilitate token payments between addresses.\n     * If the payer is this contract, it directly transfers tokens to the recipient.\n     * If the payer is not this contract, it transfers tokens from the payer to the recipient.\n     * @param token The address of the token being transferred.\n     * @param payer The address of the entity initiating the payment.\n     * @param recipient The address of the entity receiving the payment.\n     * @param value The amount of tokens to be transferred.\n     */\n    function pay(\n        address token,\n        address payer,\n        address recipient,\n        uint256 value\n    ) internal {\n        if (payer == address(this)) {\n            if (token == ROSE) {\n                TransferHelper.safeTransferROSE(recipient, value);\n            } else {\n                TransferHelper.safeTransfer(token, recipient, value);\n            }\n        } else {\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\n        }\n    }\n\n    function kill() external onlyOwner {\n        isKill = true;\n    }\n\n    function unKill() external onlyOwner {\n        isKill = false;\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}