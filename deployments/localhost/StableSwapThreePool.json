{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "token_amounts",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "fees",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "admin_fee",
          "type": "uint256"
        }
      ],
      "name": "CommitNewFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DonateAdminFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Kill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "admin_fee",
          "type": "uint256"
        }
      ],
      "name": "NewFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "old_A",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "new_A",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initial_time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "future_time",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "token_amounts",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "fees",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "token_amounts",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "fees",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RevertParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rose_gas",
          "type": "uint256"
        }
      ],
      "name": "SetROSEGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "A",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unkill",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ACTIONS_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KILL_DEADLINE_DT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ADMIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_A_CHANGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DECIMAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ROSE_gas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_RAMP_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_ROSE_gas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "N_COINS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PRECISION_MUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RATES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLESWAP_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256",
          "name": "min_mint_amount",
          "type": "uint256"
        }
      ],
      "name": "add_liquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_actions_deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "admin_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin_fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apply_new_fee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calc_token_amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "calc_withdraw_one_coin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coins",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "new_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_admin_fee",
          "type": "uint256"
        }
      ],
      "name": "commit_new_fee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donate_admin_fees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_dy",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "future_A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "future_A_time",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "future_admin_fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "future_fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "get_dy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "get_dy_underlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_virtual_price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initial_A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initial_A_time",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[3]",
          "name": "_coins",
          "type": "address[3]"
        },
        {
          "internalType": "uint256",
          "name": "_A",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_admin_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LP",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "is_killed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill_deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill_me",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_future_A",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_future_time",
          "type": "uint256"
        }
      ],
      "name": "ramp_A",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "min_amounts",
          "type": "uint256[3]"
        }
      ],
      "name": "remove_liquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256",
          "name": "max_burn_amount",
          "type": "uint256"
        }
      ],
      "name": "remove_liquidity_imbalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_amount",
          "type": "uint256"
        }
      ],
      "name": "remove_liquidity_one_coin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revert_new_parameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rose_gas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rose_gas",
          "type": "uint256"
        }
      ],
      "name": "set_rose_gas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop_rampget_A",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IStableSwapLP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unkill_me",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw_admin_fees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x566023119d132e25433ed4f198bc22e1c4677041deb4ef2d97613dd4dc201119",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "3379961",
    "logsBloom": "0x
    "blockHash": "0xf0fe6dc98fa3f78512bd077b4588170119a1f37a3c5a8dd8a3508c6c4df245d4",
    "transactionHash": "0x566023119d132e25433ed4f198bc22e1c4677041deb4ef2d97613dd4dc201119",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x566023119d132e25433ed4f198bc22e1c4677041deb4ef2d97613dd4dc201119",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf0fe6dc98fa3f78512bd077b4588170119a1f37a3c5a8dd8a3508c6c4df245d4"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "3379961",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1829c01f17cf3f9febab972c66c3c9e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"token_amounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"fees\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"admin_fee\",\"type\":\"uint256\"}],\"name\":\"CommitNewFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DonateAdminFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Kill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"admin_fee\",\"type\":\"uint256\"}],\"name\":\"NewFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"old_A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initial_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"future_time\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"token_amounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"fees\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"token_amounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"fees\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RevertParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rose_gas\",\"type\":\"uint256\"}],\"name\":\"SetROSEGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unkill\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ACTIONS_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KILL_DEADLINE_DT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A_CHANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ROSE_gas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RAMP_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_ROSE_gas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N_COINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRECISION_MUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RATES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLESWAP_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"min_mint_amount\",\"type\":\"uint256\"}],\"name\":\"add_liquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_actions_deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"admin_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apply_new_fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calc_token_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"calc_withdraw_one_coin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_admin_fee\",\"type\":\"uint256\"}],\"name\":\"commit_new_fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate_admin_fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_dy\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_A_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_admin_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"get_dy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"get_dy_underlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_virtual_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial_A_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"_coins\",\"type\":\"address[3]\"},{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_admin_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LP\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_killed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill_deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill_me\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_future_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_future_time\",\"type\":\"uint256\"}],\"name\":\"ramp_A\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"min_amounts\",\"type\":\"uint256[3]\"}],\"name\":\"remove_liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"max_burn_amount\",\"type\":\"uint256\"}],\"name\":\"remove_liquidity_imbalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"remove_liquidity_one_coin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revert_new_parameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rose_gas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rose_gas\",\"type\":\"uint256\"}],\"name\":\"set_rose_gas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop_rampget_A\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IStableSwapLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unkill_me\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_admin_fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add_liquidity(uint256[3],uint256)\":{\"params\":{\"amounts\":\": Amount of each coin being deposited\",\"min_mint_amount\":\": Minimum amount of LP tokens to mint from the deposit\"}},\"admin_balances(uint256)\":{\"params\":{\"i\":\": Index of the coin to get admin balance for\"}},\"calc_token_amount(uint256[3],bool)\":{\"params\":{\"amounts\":\": Amount of each coin being deposited\",\"deposit\":\": Set True for deposits, False for withdrawals\"}},\"calc_withdraw_one_coin(uint256,uint256)\":{\"params\":{\"_token_amount\":\": Amount of LP tokens to burn in the withdrawal\",\"i\":\": Index value of the coin to withdraw\"}},\"commit_new_fee(uint256,uint256)\":{\"params\":{\"new_admin_fee\":\": New admin fee (expressed as a percentage of the pool fee) Both the pool fee and the admin_fee are capped by the constants MAX_FEE and MAX_ADMIN_FEE, respectively. By default MAX_FEE is set at 50% and MAX_ADMIN_FEE at 100% (which is charged on the MAX_FEE amount).\",\"new_fee\":\": New pool fee\"}},\"exchange(uint256,uint256,uint256,uint256)\":{\"params\":{\"dx\":\": Amount of coin i to swap\",\"i\":\": Index of coin to swap from\",\"j\":\": Index of coin to swap to\",\"min_dy\":\": \\tMinimum amount of j to receive\"}},\"get_dy(uint256,uint256,uint256)\":{\"params\":{\"dx\":\": Amount of coin i to swap\",\"i\":\": Index of coin to swap from\",\"j\":\": Index of coin to swap to\"}},\"get_dy_underlying(uint256,uint256,uint256)\":{\"params\":{\"dx\":\"Amount of coin i to swap\",\"i\":\"Index of coin to swap from\",\"j\":\"Index of coin to swap to\"}},\"initialize(address[3],uint256,uint256,uint256,address,address)\":{\"params\":{\"_A\":\": Amplification coefficient multiplied by n * (n - 1)\",\"_LP\":\": LP address\",\"_admin_fee\":\": Admin fee\",\"_coins\":\": Addresses of ERC20 conracts of coins (c-tokens) involved\",\"_fee\":\": Fee to charge for exchanges\",\"_owner\":\": Owner\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ramp_A(uint256,uint256)\":{\"params\":{\"_future_A\":\": New future value of A\",\"_future_time\":\": Timestamp at which new A should take effect\"}},\"remove_liquidity(uint256,uint256[3])\":{\"params\":{\"_amount\":\": Quantity of LP tokens to burn in the withdrawal\",\"min_amounts\":\": Minimum amounts of underlying coins to receive\"}},\"remove_liquidity_imbalance(uint256[3],uint256)\":{\"params\":{\"amounts\":\": List of amounts of underlying coins to withdraw\",\"max_burn_amount\":\": Maximum amount of LP token to burn in the withdrawal\"}},\"remove_liquidity_one_coin(uint256,uint256,uint256)\":{\"params\":{\"_token_amount\":\": Amount of LP tokens to burn in the withdrawal\",\"i\":\": Index value of the coin to withdraw\",\"min_amount\":\": Minimum amount of coin to receive\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"set_rose_gas(uint256)\":{\"params\":{\"_rose_gas\":\"The gas limit to be set. The gas limit should be within the acceptable range defined by MIN_ROSE_gas and MAX_ROSE_gas.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"StableSwapThreePool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"A()\":{\"notice\":\"Getter for the amplification coefficient of the pool. The amplification coefficient A determines a pool\\u2019s tolerance for imbalance between the assets within it.\"},\"add_liquidity(uint256[3],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"admin_balances(uint256)\":{\"notice\":\"Get the admin balance for a single coin in the pool.\"},\"apply_new_fee()\":{\"notice\":\"Apply the previously committed new pool and admin fees for the pool.\"},\"calc_token_amount(uint256[3],bool)\":{\"notice\":\"Calculate addition or reduction in token supply from a deposit or withdrawal Returns the expected amount of LP tokens received. This calculation accounts for slippage, but not fees.\"},\"calc_withdraw_one_coin(uint256,uint256)\":{\"notice\":\"Calculate the amount received when withdrawing a single coin.\"},\"commit_new_fee(uint256,uint256)\":{\"notice\":\"The method commits new fee params: these fees do not take immediate effect.\"},\"constructor\":{\"notice\":\"constructor\"},\"donate_admin_fees()\":{\"notice\":\"Donate all admin fees to the pool\\u2019s liquidity providers.\"},\"exchange(uint256,uint256,uint256,uint256)\":{\"notice\":\"Perform an exchange between two coins.\"},\"get_dy(uint256,uint256,uint256)\":{\"notice\":\"Get the amount of coin j one would receive for swapping dx of coin i.\"},\"get_dy_underlying(uint256,uint256,uint256)\":{\"notice\":\"Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\"},\"get_virtual_price()\":{\"notice\":\"Current virtual price of the pool LP token relative to the underlying pool assets. Can get the absolute price by multiplying it with the price of the underlying assets. The method returns virtual_price as an integer with 1e18 precision.\"},\"initialize(address[3],uint256,uint256,uint256,address,address)\":{\"notice\":\"initialize\"},\"kill_me()\":{\"notice\":\"Pause a pool by setting the is_killed boolean flag to True.\"},\"ramp_A(uint256,uint256)\":{\"notice\":\"Ramp A up or down by setting a new A to take effect at a future point in time.\"},\"remove_liquidity(uint256,uint256[3])\":{\"notice\":\"Withdraw coins from the pool\"},\"remove_liquidity_imbalance(uint256[3],uint256)\":{\"notice\":\"Withdraw coins from the pool in an imbalanced amount\"},\"remove_liquidity_one_coin(uint256,uint256,uint256)\":{\"notice\":\"Withdraw a single coin from the pool\"},\"revert_new_parameters()\":{\"notice\":\"Resets any previously committed new fees.\"},\"set_rose_gas(uint256)\":{\"notice\":\"set the gas limit for transferring ROSE tokens.\"},\"stop_rampget_A()\":{\"notice\":\"Stop ramping A up or down and sets A to current A.\"},\"unkill_me()\":{\"notice\":\"Unpause a pool that was previously paused, re-enabling exchanges.\"},\"withdraw_admin_fees()\":{\"notice\":\"Withdraws and transfers admin fees of the pool to the pool owner.\"}},\"notice\":\"This contract facilitates liquidity addition, stable swapping, and liquidity removal in a stable swap system with three pools.It includes functions for adding liquidity, stable swapping, and removing liquidity, as well as parameter calculation for main operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableSwap/plain-pools/StableSwapThreePool.sol\":\"StableSwapThreePool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IStableSwapLP {\\n    /**\\n     * @notice Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates new tokens and assigns them to a specified address.\\n     * @param _to Address to which the newly created tokens will be assigned.\\n     * @param _amount Amount of tokens to be created and assigned.\\n     */\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burns a specific amount of tokens from a specified address.\\n     * @param _to Address from which tokens will be burned.\\n     * @param _amount Amount of tokens to be burned.\\n     */\\n    function burnFrom(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets a new minter address.\\n     * @param _newMinter Address of the new minter.\\n     */\\n    function setMinter(address _newMinter) external;\\n}\\n\",\"keccak256\":\"0xc0faa6d18f8b226a88026651b8e3b1dda1bb3eea3655db9de227654e53e0a83d\",\"license\":\"MIT\"},\"contracts/stableSwap/plain-pools/StableSwapThreePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../../interfaces/IStableSwapLP.sol\\\";\\n\\n/**\\n * @title StableSwapThreePool\\n * @notice This contract facilitates liquidity addition, stable swapping, and liquidity removal in a stable swap system with three pools.\\n * @notice It includes functions for adding liquidity, stable swapping, and removing liquidity, as well as parameter calculation for main operations.\\n */\\n\\ncontract StableSwapThreePool is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          CONSTANT            \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    uint256 public constant N_COINS = 3; //The number of coins within the pool\\n\\n    uint256 public constant MAX_DECIMAL = 18; //Maximum number of decimal places for the token balances\\n    uint256 public constant FEE_DENOMINATOR = 1e10; //The denominator used to calculate the fee, fees are expressed as a fraction of 1e10\\n    uint256 public constant PRECISION = 1e18; // The precision to which values are calculated, accurate up to 18 decimal places\\n    uint256[N_COINS] public PRECISION_MUL; //Array of integers that coin balances are multiplied by in order to adjust their precision to 18 decimal places\\n    uint256[N_COINS] public RATES; //Array of integers indicating the relative value of `1e18` tokens for each stablecoin\\n\\n    uint256 public constant MAX_ADMIN_FEE = 1e10;\\n    uint256 public constant MAX_FEE = 5e9;\\n    uint256 public constant MAX_A = 1e6;\\n    uint256 public constant MAX_A_CHANGE = 10;\\n    uint256 public constant MIN_ROSE_gas = 2300;\\n    uint256 public constant MAX_ROSE_gas = 23000;\\n\\n    uint256 public constant ADMIN_ACTIONS_DELAY = 3 days;\\n    uint256 public constant MIN_RAMP_TIME = 1 days;\\n\\n    address[N_COINS] public coins;\\n    uint256[N_COINS] public balances;\\n    uint256 public fee; // fee * 1e10.\\n    uint256 public admin_fee; // admin_fee * 1e10.\\n    uint256 public rose_gas = 4029; // transfer ROSE gas.\\n\\n    IStableSwapLP public token;\\n\\n    address constant ROSE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    bool support_ROSE;\\n\\n    uint256 public initial_A;\\n    uint256 public future_A;\\n    uint256 public initial_A_time;\\n    uint256 public future_A_time;\\n\\n    uint256 public admin_actions_deadline;\\n    uint256 public future_fee;\\n    uint256 public future_admin_fee;\\n\\n    uint256 public kill_deadline;\\n    uint256 public constant KILL_DEADLINE_DT = 2 * 30 days;\\n    bool public is_killed;\\n\\n    address public immutable STABLESWAP_FACTORY;\\n    bool public isInitialized;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          EVENT               \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 sold_id,\\n        uint256 tokens_sold,\\n        uint256 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[N_COINS] token_amounts,\\n        uint256[N_COINS] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[N_COINS] token_amounts,\\n        uint256[N_COINS] fees,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 index,\\n        uint256 token_amount,\\n        uint256 coin_amount\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[N_COINS] token_amounts,\\n        uint256[N_COINS] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event CommitNewFee(\\n        uint256 indexed deadline,\\n        uint256 fee,\\n        uint256 admin_fee\\n    );\\n    event NewFee(uint256 fee, uint256 admin_fee);\\n    event RampA(\\n        uint256 old_A,\\n        uint256 new_A,\\n        uint256 initial_time,\\n        uint256 future_time\\n    );\\n    event StopRampA(uint256 A, uint256 t);\\n    event SetROSEGas(uint256 rose_gas);\\n    event RevertParameters();\\n    event DonateAdminFees();\\n    event Kill();\\n    event Unkill();\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n     \\u2551          CONSTRUCTOR         \\u2551\\n     \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice constructor\\n     */\\n    constructor() {\\n        STABLESWAP_FACTORY = msg.sender;\\n    }\\n\\n    /**\\n     * @notice initialize\\n     * @param _coins: Addresses of ERC20 conracts of coins (c-tokens) involved\\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee: Fee to charge for exchanges\\n     * @param _admin_fee: Admin fee\\n     * @param _owner: Owner\\n     * @param _LP: LP address\\n     */\\n    function initialize(\\n        address[N_COINS] memory _coins,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee,\\n        address _owner,\\n        address _LP\\n    ) external {\\n        require(!isInitialized, \\\"Operations: Already initialized\\\");\\n        require(msg.sender == STABLESWAP_FACTORY, \\\"Operations: Not factory\\\");\\n        require(_A <= MAX_A, \\\"_A exceeds maximum\\\");\\n        require(_fee <= MAX_FEE, \\\"_fee exceeds maximum\\\");\\n        require(_admin_fee <= MAX_ADMIN_FEE, \\\"_admin_fee exceeds maximum\\\");\\n        isInitialized = true;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            require(_coins[i] != address(0), \\\"ZERO Address\\\");\\n            uint256 coinDecimal;\\n            if (_coins[i] == ROSE_ADDRESS) {\\n                coinDecimal = 18;\\n                support_ROSE = true;\\n            } else {\\n                coinDecimal = IERC20Metadata(_coins[i]).decimals();\\n            }\\n            require(\\n                coinDecimal <= MAX_DECIMAL,\\n                \\\"The maximum decimal cannot exceed 18\\\"\\n            );\\n            //set PRECISION_MUL and  RATES\\n            PRECISION_MUL[i] = 10 ** (MAX_DECIMAL - coinDecimal);\\n            RATES[i] = PRECISION * PRECISION_MUL[i];\\n        }\\n        coins = _coins;\\n        initial_A = _A;\\n        future_A = _A;\\n        fee = _fee;\\n        admin_fee = _admin_fee;\\n        kill_deadline = block.timestamp + KILL_DEADLINE_DT;\\n        token = IStableSwapLP(_LP);\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551         VIEW FUNCTIONS       \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice Retrieves the current value of parameter A.\\n     * Handles ramping A up or down over time if specified.\\n     */\\n    function get_A() internal view returns (uint256) {\\n        //Handle ramping A up or down\\n        uint256 t1 = future_A_time;\\n        uint256 A1 = future_A;\\n        if (block.timestamp < t1) {\\n            uint256 A0 = initial_A;\\n            uint256 t0 = initial_A_time;\\n            // Expressions in uint256 cannot have negative numbers, thus \\\"if\\\"\\n            if (A1 > A0) {\\n                return A0 + ((A1 - A0) * (block.timestamp - t0)) / (t1 - t0);\\n            } else {\\n                return A0 - ((A0 - A1) * (block.timestamp - t0)) / (t1 - t0);\\n            }\\n        } else {\\n            // when t1 == 0 or block.timestamp >= t1\\n            return A1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter for the amplification coefficient of the pool.\\n     * The amplification coefficient A determines a pool\\u2019s tolerance for imbalance between the assets within it.\\n     */\\n    function A() external view returns (uint256) {\\n        return get_A();\\n    }\\n\\n    /**\\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision\\n     */\\n    function _xp() internal view returns (uint256[N_COINS] memory result) {\\n        result = RATES;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            result[i] = (result[i] * balances[i]) / PRECISION;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision, using provided balances.\\n     * @param _balances The array of balances to calculate virtual balances from.\\n     */\\n    function _xp_mem(\\n        uint256[N_COINS] memory _balances\\n    ) internal view returns (uint256[N_COINS] memory result) {\\n        result = RATES;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            result[i] = (result[i] * _balances[i]) / PRECISION;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total value of the pool's assets (invariant D), given virtual balances and amplification factor.\\n     * @param xp Array of virtual balances for the pool, scaled by precision.\\n     * @param amp Amplification factor of the pool.\\n     * @return D The total value of the pool's assets (invariant D).\\n     */\\n    function get_D(\\n        uint256[N_COINS] memory xp,\\n        uint256 amp\\n    ) internal pure returns (uint256) {\\n        uint256 S;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            S += xp[i];\\n        }\\n        if (S == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev;\\n        uint256 D = S;\\n        uint256 Ann = amp * N_COINS;\\n        for (uint256 j = 0; j < 255; j++) {\\n            uint256 D_P = D;\\n            for (uint256 k = 0; k < N_COINS; k++) {\\n                D_P = (D_P * D) / (xp[k] * N_COINS); // If division by 0, this will be borked: only withdrawal will work. And that is good\\n            }\\n            Dprev = D;\\n            D =\\n                ((Ann * S + D_P * N_COINS) * D) /\\n                ((Ann - 1) * D + (N_COINS + 1) * D_P);\\n            // Equality with the precision of 1\\n            if (D > Dprev) {\\n                if (D - Dprev <= 1) {\\n                    return D;\\n                }\\n            } else {\\n                if (Dprev - D <= 1) {\\n                    return D;\\n                }\\n            }\\n        }\\n        revert(\\\"invariant calculation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Calculates the total value of the pool's assets (invariant D), given balances and amplification factor.\\n     * @param _balances Array of balances to calculate virtual balances from.\\n     * @param amp Amplification factor of the pool.\\n     */\\n    function get_D_mem(\\n        uint256[N_COINS] memory _balances,\\n        uint256 amp\\n    ) internal view returns (uint256) {\\n        return get_D(_xp_mem(_balances), amp);\\n    }\\n\\n    /**\\n     * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\\n     * Can get the absolute price by multiplying it with the price of the underlying assets.\\n     * The method returns virtual_price as an integer with 1e18 precision.\\n     */\\n    function get_virtual_price() external view returns (uint256) {\\n        /**\\n        Returns portfolio virtual price (for calculating profit)\\n        scaled up by 1e18\\n        */\\n        uint256 D = get_D(_xp(), get_A());\\n        /**\\n        D is in the units similar to DAI (e.g. converted to precision 1e18)\\n        When balanced, D = n * x_u - total virtual value of the portfolio\\n        */\\n        uint256 token_supply = token.totalSupply();\\n        return (D * PRECISION) / token_supply;\\n    }\\n\\n    /**\\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\\n     * Returns the expected amount of LP tokens received.\\n     * This calculation accounts for slippage, but not fees.\\n     * @param amounts: Amount of each coin being deposited\\n     * @param deposit: Set True for deposits, False for withdrawals\\n     */\\n    function calc_token_amount(\\n        uint256[N_COINS] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        /**\\n        Simplified method to calculate addition or reduction in token supply at\\n        deposit or withdrawal without taking fees into account (but looking at\\n        slippage).\\n        Needed to prevent front-running, not for precise calculations!\\n        */\\n        uint256[N_COINS] memory _balances = balances;\\n        uint256 amp = get_A();\\n        uint256 D0 = get_D_mem(_balances, amp);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (deposit) {\\n                _balances[i] += amounts[i];\\n            } else {\\n                _balances[i] -= amounts[i];\\n            }\\n        }\\n        uint256 D1 = get_D_mem(_balances, amp);\\n        uint256 token_amount = token.totalSupply();\\n        uint256 difference;\\n        if (deposit) {\\n            difference = D1 - D0;\\n        } else {\\n            difference = D0 - D1;\\n        }\\n        return (difference * token_amount) / D0;\\n    }\\n\\n    /**\\n     * @notice Get the amount of coin j one would receive for swapping x of coin i, using the current virtual balances.\\n     * @param i Index of coin to swap from.\\n     * @param j Index of coin to swap to\\n     * @param x Amount of coin i to swap\\n     * @param xp_ The array of virtual balances for the pool, scaled by precision.\\n     */\\n    function get_y(\\n        uint256 i,\\n        uint256 j,\\n        uint256 x,\\n        uint256[N_COINS] memory xp_\\n    ) internal view returns (uint256) {\\n        // x in the input is converted to the same price/precision\\n        require(\\n            (i != j) && (i < N_COINS) && (j < N_COINS),\\n            \\\"Illegal parameter\\\"\\n        );\\n        uint256 amp = get_A();\\n        uint256 D = get_D(xp_, amp);\\n        uint256 c = D;\\n        uint256 S_;\\n        uint256 Ann = amp * N_COINS;\\n\\n        uint256 _x;\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            if (k == i) {\\n                _x = x;\\n            } else if (k != j) {\\n                _x = xp_[k];\\n            } else {\\n                continue;\\n            }\\n            S_ += _x;\\n            c = (c * D) / (_x * N_COINS);\\n        }\\n        c = (c * D) / (Ann * N_COINS);\\n        uint256 b = S_ + D / Ann; // - D\\n        uint256 y_prev;\\n        uint256 y = D;\\n\\n        for (uint256 m = 0; m < 255; m++) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            // Equality with the precision of 1\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        revert(\\\"does not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\\n     * @param i: Index of coin to swap from\\n     * @param j: Index of coin to swap to\\n     * @param dx: Amount of coin i to swap\\n     */\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        // dx and dy in c-units\\n        uint256[N_COINS] memory rates = RATES;\\n        uint256[N_COINS] memory xp = _xp();\\n\\n        uint256 x = xp[i] + ((dx * rates[i]) / PRECISION);\\n        uint256 y = get_y(i, j, x, xp);\\n        uint256 dy = ((xp[j] - y - 1) * PRECISION) / rates[j];\\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\\n        return dy - _fee;\\n    }\\n\\n    /**\\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\\n     * @param i Index of coin to swap from\\n     * @param j Index of coin to swap to\\n     * @param dx Amount of coin i to swap\\n     */\\n    function get_dy_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        // dx and dy in underlying units\\n        uint256[N_COINS] memory xp = _xp();\\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\\n\\n        uint256 x = xp[i] + dx * precisions[i];\\n        uint256 y = get_y(i, j, x, xp);\\n        uint256 dy = (xp[j] - y - 1) / precisions[j];\\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\\n        return dy - _fee;\\n    }\\n\\n    /**\\n     * @notice Get the amount of coin i given a reduction in invariant D, considering a specific value of parameter A and current virtual balances.\\n     * @param A_ The value of parameter A.\\n     * @param i The index of the coin for which the output amount is calculated.\\n     * @param xp The array of virtual balances for the pool, scaled by precision.\\n     * @param D The new value of invariant D.\\n     */\\n    function get_y_D(\\n        uint256 A_,\\n        uint256 i,\\n        uint256[N_COINS] memory xp,\\n        uint256 D\\n    ) internal pure returns (uint256) {\\n        /**\\n        Calculate x[i] if one reduces D from being calculated for xp to D\\n\\n        Done by solving quadratic equation iteratively.\\n        x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n        x_1**2 + b*x_1 = c\\n\\n        x_1 = (x_1**2 + c) / (2*x_1 + b)\\n        */\\n        // x in the input is converted to the same price/precision\\n        require(i < N_COINS, \\\"dev: i above N_COINS\\\");\\n        uint256 c = D;\\n        uint256 S_;\\n        uint256 Ann = A_ * N_COINS;\\n\\n        uint256 _x;\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            if (k != i) {\\n                _x = xp[k];\\n            } else {\\n                continue;\\n            }\\n            S_ += _x;\\n            c = (c * D) / (_x * N_COINS);\\n        }\\n        c = (c * D) / (Ann * N_COINS);\\n        uint256 b = S_ + D / Ann;\\n        uint256 y_prev;\\n        uint256 y = D;\\n\\n        for (uint256 k = 0; k < 255; k++) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            // Equality with the precision of 1\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        revert(\\\"does not converge\\\");\\n    }\\n\\n    function _calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        uint256 i\\n    ) internal view returns (uint256, uint256) {\\n        // First, need to calculate\\n        // * Get current D\\n        // * Solve Eqn against y_i for D - _token_amount\\n        uint256 amp = get_A();\\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\\n        uint256 total_supply = token.totalSupply();\\n\\n        uint256[N_COINS] memory xp = _xp();\\n\\n        uint256 D0 = get_D(xp, amp);\\n        uint256 D1 = D0 - (_token_amount * D0) / total_supply;\\n        uint256[N_COINS] memory xp_reduced = xp;\\n\\n        uint256 new_y = get_y_D(amp, i, xp, D1);\\n        uint256 dy_0 = (xp[i] - new_y) / precisions[i]; // w/o fees\\n\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            uint256 dx_expected;\\n            if (k == i) {\\n                dx_expected = (xp[k] * D1) / D0 - new_y;\\n            } else {\\n                dx_expected = xp[k] - (xp[k] * D1) / D0;\\n            }\\n            xp_reduced[k] -= (_fee * dx_expected) / FEE_DENOMINATOR;\\n        }\\n        uint256 dy = xp_reduced[i] - get_y_D(amp, i, xp_reduced, D1);\\n        dy = (dy - 1) / precisions[i]; // Withdraw less to account for rounding errors\\n\\n        return (dy, dy_0 - dy);\\n    }\\n\\n    /**\\n     * @notice Calculate the amount received when withdrawing a single coin.\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\n     * @param i: Index value of the coin to withdraw\\n     */\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        uint256 i\\n    ) external view returns (uint256) {\\n        (uint256 dy, ) = _calc_withdraw_one_coin(_token_amount, i);\\n        return dy;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          USER FUNCTIONS      \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts: Amount of each coin being deposited\\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\\n     */\\n    function add_liquidity(\\n        uint256[N_COINS] memory amounts,\\n        uint256 min_mint_amount\\n    ) external payable nonReentrant {\\n        //Amounts is amounts of c-tokens\\n        require(!is_killed, \\\"Killed\\\");\\n        if (!support_ROSE) {\\n            require(msg.value == 0, \\\"Inconsistent quantity\\\"); // Avoid sending ROSE by mistake.\\n        }\\n        uint256[N_COINS] memory fees;\\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 _admin_fee = admin_fee;\\n        uint256 amp = get_A();\\n\\n        uint256 token_supply = token.totalSupply();\\n        //Initial invariant\\n        uint256 D0;\\n        uint256[N_COINS] memory old_balances = balances;\\n        if (token_supply > 0) {\\n            D0 = get_D_mem(old_balances, amp);\\n        }\\n        uint256[N_COINS] memory new_balances = [\\n            old_balances[0],\\n            old_balances[1],\\n            old_balances[2]\\n        ];\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (token_supply == 0) {\\n                require(amounts[i] > 0, \\\"Initial deposit requires all coins\\\");\\n            }\\n            // balances store amounts of c-tokens\\n            new_balances[i] = old_balances[i] + amounts[i];\\n        }\\n\\n        // Invariant after change\\n        uint256 D1 = get_D_mem(new_balances, amp);\\n        require(D1 > D0, \\\"D1 must be greater than D0\\\");\\n\\n        // We need to recalculate the invariant accounting for fees\\n        // to calculate fair user's share\\n        uint256 D2 = D1;\\n        if (token_supply > 0) {\\n            // Only account for fees if we are not the first to deposit\\n            for (uint256 i = 0; i < N_COINS; i++) {\\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n                uint256 difference;\\n                if (ideal_balance > new_balances[i]) {\\n                    difference = ideal_balance - new_balances[i];\\n                } else {\\n                    difference = new_balances[i] - ideal_balance;\\n                }\\n\\n                fees[i] = (_fee * difference) / FEE_DENOMINATOR;\\n                balances[i] =\\n                    new_balances[i] -\\n                    ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\\n                new_balances[i] -= fees[i];\\n            }\\n            D2 = get_D_mem(new_balances, amp);\\n        } else {\\n            balances = new_balances;\\n        }\\n\\n        // Calculate, how much pool tokens to mint\\n        uint256 mint_amount;\\n        if (token_supply == 0) {\\n            mint_amount = D1; // Take the dust if there was any\\n        } else {\\n            mint_amount = (token_supply * (D2 - D0)) / D0;\\n        }\\n        require(mint_amount >= min_mint_amount, \\\"Slippage screwed you\\\");\\n\\n        // Take coins from the sender\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 amount = amounts[i];\\n            address coin = coins[i];\\n            transfer_in(coin, amount);\\n        }\\n\\n        // Mint pool tokens\\n        token.mint(msg.sender, mint_amount);\\n\\n        emit AddLiquidity(\\n            msg.sender,\\n            amounts,\\n            fees,\\n            D1,\\n            token_supply + mint_amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Perform an exchange between two coins.\\n     * @param i: Index of coin to swap from\\n     * @param j: Index of coin to swap to\\n     * @param dx: Amount of coin i to swap\\n     * @param min_dy: \\tMinimum amount of j to receive\\n     */\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable nonReentrant {\\n        require(!is_killed, \\\"Killed\\\");\\n        if (!support_ROSE) {\\n            require(msg.value == 0, \\\"Inconsistent quantity\\\"); // Avoid sending ROSE by mistake.\\n        }\\n\\n        uint256[N_COINS] memory old_balances = balances;\\n        uint256[N_COINS] memory xp = _xp_mem(old_balances);\\n\\n        uint256 x = xp[i] + (dx * RATES[i]) / PRECISION;\\n        uint256 y = get_y(i, j, x, xp);\\n\\n        uint256 dy = xp[j] - y - 1; //  -1 just in case there were some rounding errors\\n        uint256 dy_fee = (dy * fee) / FEE_DENOMINATOR;\\n\\n        // Convert all to real units\\n        dy = ((dy - dy_fee) * PRECISION) / RATES[j];\\n        require(dy >= min_dy, \\\"Exchange resulted in fewer coins than expected\\\");\\n\\n        uint256 dy_admin_fee = (dy_fee * admin_fee) / FEE_DENOMINATOR;\\n        dy_admin_fee = (dy_admin_fee * PRECISION) / RATES[j];\\n\\n        // Change balances exactly in same way as we change actual ERC20 coin amounts\\n        balances[i] = old_balances[i] + dx;\\n        // When rounding errors happen, we undercharge admin fee in favor of LP\\n        balances[j] = old_balances[j] - dy - dy_admin_fee;\\n\\n        address iAddress = coins[i];\\n        if (iAddress == ROSE_ADDRESS) {\\n            require(dx == msg.value, \\\"Inconsistent quantity\\\");\\n        } else {\\n            IERC20(iAddress).safeTransferFrom(msg.sender, address(this), dx);\\n        }\\n        address jAddress = coins[j];\\n        transfer_out(jAddress, dy);\\n        emit TokenExchange(msg.sender, i, dx, j, dy);\\n    }\\n\\n    /**\\n     * @notice Withdraw coins from the pool\\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\\n     * @param min_amounts: Minimum amounts of underlying coins to receive\\n     */\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[N_COINS] memory min_amounts\\n    ) external nonReentrant {\\n        uint256 total_supply = token.totalSupply();\\n        uint256[N_COINS] memory amounts;\\n        uint256[N_COINS] memory fees; //Fees are unused but we've got them historically in event\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 value = (balances[i] * _amount) / total_supply;\\n            require(\\n                value >= min_amounts[i],\\n                \\\"Withdrawal resulted in fewer coins than expected\\\"\\n            );\\n            balances[i] -= value;\\n            amounts[i] = value;\\n            transfer_out(coins[i], value);\\n        }\\n\\n        token.burnFrom(msg.sender, _amount); // dev: insufficient funds\\n\\n        emit RemoveLiquidity(msg.sender, amounts, fees, total_supply - _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw coins from the pool in an imbalanced amount\\n     * @param amounts: List of amounts of underlying coins to withdraw\\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\\n     */\\n    function remove_liquidity_imbalance(\\n        uint256[N_COINS] memory amounts,\\n        uint256 max_burn_amount\\n    ) external nonReentrant {\\n        require(!is_killed, \\\"Killed\\\");\\n\\n        uint256 token_supply = token.totalSupply();\\n        require(token_supply > 0, \\\"dev: zero total supply\\\");\\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 _admin_fee = admin_fee;\\n        uint256 amp = get_A();\\n\\n        uint256[N_COINS] memory old_balances = balances;\\n        uint256[N_COINS] memory new_balances = [\\n            old_balances[0],\\n            old_balances[1],\\n            old_balances[2]\\n        ];\\n        uint256 D0 = get_D_mem(old_balances, amp);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            new_balances[i] -= amounts[i];\\n        }\\n        uint256 D1 = get_D_mem(new_balances, amp);\\n        uint256[N_COINS] memory fees;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n            uint256 difference;\\n            if (ideal_balance > new_balances[i]) {\\n                difference = ideal_balance - new_balances[i];\\n            } else {\\n                difference = new_balances[i] - ideal_balance;\\n            }\\n            fees[i] = (_fee * difference) / FEE_DENOMINATOR;\\n            balances[i] =\\n                new_balances[i] -\\n                ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\\n            new_balances[i] -= fees[i];\\n        }\\n        uint256 D2 = get_D_mem(new_balances, amp);\\n\\n        uint256 token_amount = ((D0 - D2) * token_supply) / D0;\\n        require(token_amount > 0, \\\"token_amount must be greater than 0\\\");\\n        token_amount += 1; // In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(token_amount <= max_burn_amount, \\\"Slippage screwed you\\\");\\n\\n        token.burnFrom(msg.sender, token_amount); // dev: insufficient funds\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (amounts[i] > 0) {\\n                transfer_out(coins[i], amounts[i]);\\n            }\\n        }\\n        token_supply -= token_amount;\\n        emit RemoveLiquidityImbalance(\\n            msg.sender,\\n            amounts,\\n            fees,\\n            D1,\\n            token_supply\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw a single coin from the pool\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\n     * @param i: Index value of the coin to withdraw\\n     * @param min_amount: Minimum amount of coin to receive\\n     */\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        uint256 i,\\n        uint256 min_amount\\n    ) external nonReentrant {\\n        // Remove _amount of liquidity all in a form of coin i\\n        require(!is_killed, \\\"Killed\\\");\\n        (uint256 dy, uint256 dy_fee) = _calc_withdraw_one_coin(\\n            _token_amount,\\n            i\\n        );\\n        require(dy >= min_amount, \\\"Not enough coins removed\\\");\\n\\n        balances[i] -= (dy + (dy_fee * admin_fee) / FEE_DENOMINATOR);\\n        token.burnFrom(msg.sender, _token_amount); // dev: insufficient funds\\n        transfer_out(coins[i], dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, i, _token_amount, dy);\\n    }\\n\\n    /**\\n     * @notice Internal function to transfer tokens using function \\\"safeTransfer\\\" of IERC20.\\n     * @param coin_address The address of the token to transfer.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function transfer_out(address coin_address, uint256 value) internal {\\n        if (coin_address == ROSE_ADDRESS) {\\n            _safeTransferROSE(msg.sender, value);\\n        } else {\\n            IERC20(coin_address).safeTransfer(msg.sender, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to transfer tokens using function \\\"safeTransferFrom\\\" of IERC20.\\n     * @param coin_address The address of the token to transfer.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function transfer_in(address coin_address, uint256 value) internal {\\n        if (coin_address == ROSE_ADDRESS) {\\n            require(value == msg.value, \\\"Inconsistent quantity\\\");\\n        } else {\\n            IERC20(coin_address).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                value\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to safely transfer ROSE tokens.\\n     * @param to The address to transfer the ROSE tokens to.\\n     * @param value The amount of ROSE tokens to transfer.\\n     */\\n    function _safeTransferROSE(address to, uint256 value) internal {\\n        (bool success, ) = to.call{gas: rose_gas, value: value}(\\\"\\\");\\n        require(success, \\\"ROSE transfer failed\\\");\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n     \\u2551          ADMIN FUNCTIONS     \\u2551\\n     \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice set the gas limit for transferring ROSE tokens.\\n     * @param _rose_gas The gas limit to be set.\\n     * The gas limit should be within the acceptable range defined by MIN_ROSE_gas and MAX_ROSE_gas.\\n     */\\n    function set_rose_gas(uint256 _rose_gas) external onlyOwner {\\n        require(\\n            _rose_gas >= MIN_ROSE_gas && _rose_gas <= MAX_ROSE_gas,\\n            \\\"Illegal gas\\\"\\n        );\\n        rose_gas = _rose_gas;\\n        emit SetROSEGas(_rose_gas);\\n    }\\n\\n    /**\\n     * @notice Ramp A up or down by setting a new A to take effect at a future point in time.\\n     * @param _future_A: New future value of A\\n     * @param _future_time: Timestamp at which new A should take effect\\n     */\\n    function ramp_A(\\n        uint256 _future_A,\\n        uint256 _future_time\\n    ) external onlyOwner {\\n        require(\\n            block.timestamp >= initial_A_time + MIN_RAMP_TIME,\\n            \\\"dev : too early\\\"\\n        );\\n        require(\\n            _future_time >= block.timestamp + MIN_RAMP_TIME,\\n            \\\"dev: insufficient time\\\"\\n        );\\n\\n        uint256 _initial_A = get_A();\\n        require(\\n            _future_A > 0 && _future_A < MAX_A,\\n            \\\"_future_A must be between 0 and MAX_A\\\"\\n        );\\n        require(\\n            (_future_A >= _initial_A &&\\n                _future_A <= _initial_A * MAX_A_CHANGE) ||\\n                (_future_A < _initial_A &&\\n                    _future_A * MAX_A_CHANGE >= _initial_A),\\n            \\\"Illegal parameter _future_A\\\"\\n        );\\n        initial_A = _initial_A;\\n        future_A = _future_A;\\n        initial_A_time = block.timestamp;\\n        future_A_time = _future_time;\\n\\n        emit RampA(_initial_A, _future_A, block.timestamp, _future_time);\\n    }\\n\\n    /**\\n     * @notice Stop ramping A up or down and sets A to current A.\\n     */\\n    function stop_rampget_A() external onlyOwner {\\n        uint256 current_A = get_A();\\n        initial_A = current_A;\\n        future_A = current_A;\\n        initial_A_time = block.timestamp;\\n        future_A_time = block.timestamp;\\n        // now (block.timestamp < t1) is always False, so we return saved A\\n\\n        emit StopRampA(current_A, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice The method commits new fee params: these fees do not take immediate effect.\\n     * @param new_fee: New pool fee\\n     * @param new_admin_fee: New admin fee (expressed as a percentage of the pool fee)\\n     * Both the pool fee and the admin_fee are capped by the constants MAX_FEE and MAX_ADMIN_FEE, respectively.\\n     * By default MAX_FEE is set at 50% and MAX_ADMIN_FEE at 100% (which is charged on the MAX_FEE amount).\\n     */\\n    function commit_new_fee(\\n        uint256 new_fee,\\n        uint256 new_admin_fee\\n    ) external onlyOwner {\\n        require(\\n            admin_actions_deadline == 0,\\n            \\\"admin_actions_deadline must be 0\\\"\\n        ); // dev: active action\\n        require(new_fee <= MAX_FEE, \\\"dev: fee exceeds maximum\\\");\\n        require(\\n            new_admin_fee <= MAX_ADMIN_FEE,\\n            \\\"dev: admin fee exceeds maximum\\\"\\n        );\\n\\n        admin_actions_deadline = block.timestamp + ADMIN_ACTIONS_DELAY;\\n        future_fee = new_fee;\\n        future_admin_fee = new_admin_fee;\\n\\n        emit CommitNewFee(admin_actions_deadline, new_fee, new_admin_fee);\\n    }\\n\\n    /**\\n     * @notice Apply the previously committed new pool and admin fees for the pool.\\n     */\\n    function apply_new_fee() external onlyOwner {\\n        require(\\n            block.timestamp >= admin_actions_deadline,\\n            \\\"dev: insufficient time\\\"\\n        );\\n        require(\\n            admin_actions_deadline != 0,\\n            \\\"admin_actions_deadline should not be 0\\\"\\n        );\\n\\n        admin_actions_deadline = 0;\\n        fee = future_fee;\\n        admin_fee = future_admin_fee;\\n\\n        emit NewFee(fee, admin_fee);\\n    }\\n\\n    /**\\n     * @notice Resets any previously committed new fees.\\n     */\\n    function revert_new_parameters() external onlyOwner {\\n        admin_actions_deadline = 0;\\n        emit RevertParameters();\\n    }\\n\\n    /**\\n     * @notice Get the admin balance for a single coin in the pool.\\n     * @param i: Index of the coin to get admin balance for\\n     */\\n    function admin_balances(uint256 i) external view returns (uint256) {\\n        if (coins[i] == ROSE_ADDRESS) {\\n            return address(this).balance - balances[i];\\n        } else {\\n            return IERC20(coins[i]).balanceOf(address(this)) - balances[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws and transfers admin fees of the pool to the pool owner.\\n     */\\n    function withdraw_admin_fees() external onlyOwner {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 value;\\n            if (coins[i] == ROSE_ADDRESS) {\\n                value = address(this).balance - balances[i];\\n            } else {\\n                value = IERC20(coins[i]).balanceOf(address(this)) - balances[i];\\n            }\\n            if (value > 0) {\\n                transfer_out(coins[i], value);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Donate all admin fees to the pool\\u2019s liquidity providers.\\n     */\\n    function donate_admin_fees() external onlyOwner {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (coins[i] == ROSE_ADDRESS) {\\n                balances[i] = address(this).balance;\\n            } else {\\n                balances[i] = IERC20(coins[i]).balanceOf(address(this));\\n            }\\n        }\\n        emit DonateAdminFees();\\n    }\\n\\n    /**\\n     * @notice Pause a pool by setting the is_killed boolean flag to True.\\n     */\\n    function kill_me() external onlyOwner {\\n        require(kill_deadline > block.timestamp, \\\"Exceeded deadline\\\");\\n        is_killed = true;\\n        emit Kill();\\n    }\\n\\n    /**\\n     * @notice Unpause a pool that was previously paused, re-enabling exchanges.\\n     */\\n    function unkill_me() external onlyOwner {\\n        is_killed = false;\\n        emit Unkill();\\n    }\\n}\\n\",\"keccak256\":\"0xdfadb6f15fa10a3afe5d6cd7cd2518baf7537e47b9e9f4dbd027d5ca553f95ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100795760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018055610fbd60105533608052613af7908161007f8239608051818181610b55015261199d0152f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816306e9481c1461295c57508063140522881461293e578063193d983f146129215780632081066c14612903578063226840fb146128bf578063270271a81461280e57806329357750146127f25780632a426896146127d45780633046f9721461278a57806330c540851461265d5780633883e1191461251a578063392e53cd146124f457806339698415146124d65780633c157e64146122a2578063405e28f8146122845780634515cef314611e625780634903b0d114611e355780634eac48351461191e5780634f12fe97146118435780634fb08c5e14611820578063524c3901146117245780635409491a14611706578063556d6e9f1461162b57806358680d0b1461160d5780635b41b908146113345780635b5a1467146111ce57806362203d74146111a15780636d4366b714611185578063715018a61461111e5780637dafa364146110f157806385f11d1e146110215780638da5cb5b14610ffb5780639c868ac014610fd85780639fdaea0c14610b79578063a6b0a71814610b35578063a97e1c9214610b18578063aaf5eb6814610af5578063ab5ac06114610ad9578063b2b8a2c514610abb578063b4b577ad14610a9d578063bb7b8b80146109d1578063bc063e1a146109b1578063c66106571461097a578063ca8ca15414610917578063d73792a914610309578063ddca3f43146108f9578063e2e7d264146108da578063e36988531461083e578063e382446214610820578063e5d9e90314610802578063ecb586a51461056b578063edfb78011461054d578063f1dc3cc9146103bd578063f2fde38b1461030e578063f3de036214610309578063f446c1d0146102e6578063fc0c546a146102bf5763fee3f7f91461029f57600080fd5b346102bc57806003193601126102bc576020600f54604051908152f35b80fd5b50346102bc57806003193601126102bc5760206001600160a01b0360115416604051908152f35b50346102bc57806003193601126102bc576020610301612e84565b604051908152f35b612a53565b50346102bc5760203660031901126102bc576004356001600160a01b0381168082036103b85761033c612d70565b1561034d5761034a906134cd565b80f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b600080fd5b50346102bc576103cc36612a39565b90916103d6612efb565b6103e560ff601a541615612b7f565b6103ef8382612f51565b90928310610508576402540be40061040d61041492600f5490612b00565b0483612af3565b60038410156104f45761042c84600b01918254612a73565b90556001600160a01b038060115416803b156104f05760405163079cc67960e41b81523360048201526024810184905290869081908390604490829084905af19182156104e35785926104c8575b505061048b91856008015416612dc8565b604051928352602083015260408201527f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a060603392a26001805580f35b6104d39192506129ab565b6104df5782853861047a565b8480fd5b50604051903d90823e3d90fd5b8580fd5b634e487b7160e01b85526032600452602485fd5b60405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820636f696e732072656d6f76656400000000000000006044820152606490fd5b50346102bc57806003193601126102bc576020604051624f1a008152f35b50346102bc5760803660031901126102bc5760043536604312156103b85760405161059581612979565b608491813684116103b8576024906024905b8582106107f25750506105b8612efb565b6001600160a01b03806011541693604051926318160ddd60e01b845260208460048183995afa9384156107e75788946107b3575b5090879291604051976105fe89612979565b6060368a376040519761061089612979565b6060368a37855b600381106106de57505050505060115416803b156106da5760405163079cc67960e41b8152336004820152602481018590529082908290604490829084905af180156106cf576106bb575b50506106899161067191612a73565b9161067f6040518095612c63565b6060840190612c63565b60c08201527fa49d4cf02656aebf8c771f5a8585638a2a15ee6c97cf7205d4208ed7c1df252d60e03392a26001805580f35b6106c4906129ab565b6104df578438610662565b6040513d84823e3d90fd5b5080fd5b8091929394959650600b018054906106ff896106fa8c85612b00565b612b13565b9161070a8489612acc565b51831061074a579180610730858f61073d956107298560019a99612a73565b9055612acc565b5288836008015416612dc8565b01908a9594939291610617565b60405162461bcd60e51b8152600481018690526030818901527f5769746864726177616c20726573756c74656420696e20666577657220636f6960448201527f6e73207468616e2065787065637465640000000000000000000000000000000060648201528690fd5b9093506020813d6020116107df575b816107cf602093836129bf565b810103126103b8575192386105ec565b3d91506107c2565b6040513d8a823e3d90fd5b81358152602091820191016105a7565b50346102bc57806003193601126102bc5760206040516203f4808152f35b50346102bc57806003193601126102bc576020601854604051908152f35b50346102bc57806003193601126102bc57610857612d70565b60195442101561089557600160ff19601a541617601a557fbe26733c2bf6ff3ea5ba8cfe744422bd49052ff9ed5685c9e81e6f9321dbaddd8180a180f35b60405162461bcd60e51b815260206004820152601160248201527f457863656564656420646561646c696e650000000000000000000000000000006044820152606490fd5b50346102bc5760203660031901126102bc576020610301600435612cad565b50346102bc57806003193601126102bc576020600e54604051908152f35b50346102bc57806003193601126102bc57610930612d70565b7f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc201938604061095b612e84565b806012558060135542601455426015558151908152426020820152a180f35b50346102bc5760203660031901126102bc576004359060038210156102bc5760206001600160a01b03836008015416604051908152f35b50346102bc57806003193601126102bc57602060405164012a05f2008152f35b50346102bc57806003193601126102bc576004906109fe6109f061312f565b6109f8612e84565b90613522565b9060206001600160a01b0360115416604051948580926318160ddd60e01b82525afa9283156104e3578193610a69575b50670de0b6b3a764000091828102928184041490151715610a555760206103018484612b13565b634e487b7160e01b81526011600452602490fd5b9092506020813d602011610a95575b81610a85602093836129bf565b810103126103b857519138610a2e565b3d9150610a78565b50346102bc57806003193601126102bc576020601354604051908152f35b50346102bc57806003193601126102bc576020601054604051908152f35b50346102bc57806003193601126102bc576020604051600a8152f35b50346102bc57806003193601126102bc576020604051670de0b6b3a76400008152f35b50346102bc57806003193601126102bc5760206040516108fc8152f35b50346102bc57806003193601126102bc5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346102bc5760803660031901126102bc576004610b96366129e1565b91610b9f612efb565b610bae60ff601a541615612b7f565b60206001600160a01b0360115416604051938480926318160ddd60e01b82525afa9182156104e3578192610fa4575b508115610f5f57600e54600381029080820460031490151715610f4b57600f5490610c06612e84565b610c0e612a96565b90604051610c1b81612979565b825181526020830151602082015260408301516040820152610c4582610c40856133ea565b613522565b92865b60038110610f1f5750908291610c65899a989994610c40846133ea565b9660405196610c7388612979565b60603689378a5b888c8b60038410610e34575050505050505091610caa610ca46106fa93610c40610caf97966133ea565b84612a73565b612b00565b948515610de3576001808701809711610dcf57610cd0606435881115612c17565b6001600160a01b0360115416803b15610dcb5760405163079cc67960e41b8152336004820152602481018990529087908290604490829084905af18015610dc057908791610dac575b505b60038110610d6d575050610d557f173599dbf9c6ca6f7c3b590df07ae98a45d74ff54065505141e7de6c46a624c2949596610d6392612a73565b604051938493339785612c8b565b0390a26001805580f35b80610d79839288612acc565b51610d85575b01610d1b565b610da76001600160a01b03826008015416610da0838a612acc565b5190612dc8565b610d7f565b610db5906129ab565b6104f0578538610d19565b6040513d89823e3d90fd5b8680fd5b634e487b7160e01b86526011600452602486fd5b60405162461bcd60e51b815260206004820152602360248201527f746f6b656e5f616d6f756e74206d75737420626520677265617465722074686160448201526206e20360ec1b6064820152608490fd5b8798995096610ec986610ec386610ebc8f610ed09897610e6b8e9f9260019d9e9f8694610e64866106fa93612acc565b5190612b00565b9050610e778289612acc565b51811115610f0b57610e9490610e8d838a612acc565b5190612a73565b965b8c610eab6402540be400998a9260031c612b00565b04610eb6838b612acc565b52612acc565b5195612acc565b51612b00565b0490612a73565b81600b0155610ef3610ee2828b612acc565b51610eed8389612acc565b51612a73565b610efd8288612acc565b5201908b9594939291610c7a565b610f1990610eed838a612acc565b96610e96565b80610f3a610f2f6001938d612acc565b51610eed8387612acc565b610f448286612acc565b5201610c48565b634e487b7160e01b82526011600452602482fd5b60405162461bcd60e51b815260206004820152601660248201527f6465763a207a65726f20746f74616c20737570706c79000000000000000000006044820152606490fd5b9091506020813d602011610fd0575b81610fc0602093836129bf565b810103126103b857519038610bdd565b3d9150610fb3565b50346102bc57806003193601126102bc57602060ff601a54166040519015158152f35b50346102bc57806003193601126102bc576001600160a01b036020915416604051908152f35b50346102bc5761103036612a39565b90918261103b61312f565b91604051809485916002906000905b600382106110d45750505084610eed938561108f856110896110959661107461109b9c9b99612979565b610e6486611082818a612acc565b5194612acc565b90612af3565b916131bb565b92612acc565b600019810193908411610a555760206103016110c2866110bb8787612acc565b5190612b13565b6402540be400610ec982600e54612b00565b82548152899650889450600192830192919091019060200161104a565b50346102bc5760203660031901126102bc5760043560038110156106da5760209060020154604051908152f35b50346102bc57806003193601126102bc57611137612d70565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346102bc57806003193601126102bc57602060405160128152f35b50346102bc5760203660031901126102bc5760043560038110156106da5760209060050154604051908152f35b50346102bc576111dd36612a23565b906111e6612d70565b6016546112f05764012a05f20081116112ab576402540be4008211611266576203f480420191824211611252577f351fc5da2fbf480f2225debf3664a4bc90fa9923743aad58b4603f648e931fe09160409184601655816017558060185582519182526020820152a280f35b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b815260206004820152601e60248201527f6465763a2061646d696e206665652065786365656473206d6178696d756d00006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f6465763a206665652065786365656473206d6178696d756d00000000000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f61646d696e5f616374696f6e735f646561646c696e65206d75737420626520306044820152fd5b5060803660031901126102bc576024906004358235604435611354612efb565b61136360ff601a541615612b7f565b60ff60115460a01c16156115fe575b61137a612a96565b94611384866133ea565b61138e8582612acc565b5160038610156115eb5781610eed866110956113c396956113ca6113d1968c670de0b6b3a76400009a8b91600501548d612b00565b0490612af3565b838c6131bb565b6000198101929083116115d8576402540be400916113fd836113f5600e5487612b00565b048095612a73565b92828402938085048414901517156115c55760038710156115b25761142787600501548095612b13565b94606435861061154857600f5461143d91612b00565b048281029281840414901517156115365750856114ab84610eed887fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989a9b9c6114a18a61149b611494610d639c9b6114b09b612b13565b9884612acc565b51612af3565b8d600b0155612acc565b612a73565b84600b01556114ff816001600160a01b03808960080154168673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82146000146115245750506114f4348714612bcb565b866008015416612dc8565b6040519384933397859094939260609260808301968352602083015260408201520152565b6115319130903390613477565b6114f4565b634e487b7160e01b8852601160045287fd5b60405162461bcd60e51b815260206004820152602e818501527f45786368616e676520726573756c74656420696e20666577657220636f696e7360448201527f207468616e2065787065637465640000000000000000000000000000000000006064820152608490fd5b50634e487b7160e01b8852603260045287fd5b50634e487b7160e01b8852601160045287fd5b50634e487b7160e01b8652601160045285fd5b634e487b7160e01b875260326004528287fd5b6116083415612bcb565b611372565b50346102bc57806003193601126102bc576020601754604051908152f35b50346102bc5761163a36612a39565b928160409392935192836005906000905b600382106116ec5750505061165f84612979565b61166761312f565b9081836116748383612acc565b51670de0b6b3a7640000809a61168a868b612acc565b5161169491612b00565b0461169e91612af3565b906116a8936131bb565b916116b291612acc565b51906116bd91612a73565b6000198101908111610f4b57848102948186041490151715610a555760206103016110c2866110bb8787612acc565b82548152879450600192830192919091019060200161164b565b50346102bc57806003193601126102bc576020601254604051908152f35b50346102bc57806003193601126102bc5761173d612d70565b805b6003811061176f57507f2c7203581ca666b8c5094c11c03f0b19b3750234a9d281bcbc88a260bcb006de8180a180f35b60088101546001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82036117aa57600191504781600b01555b0161173f565b60405180926370a0823160e01b825230600483015281602460209384935afa9081156118155784916117e6575b506001925081600b01556117a4565b905082813d831161180e575b6117fc81836129bf565b810103126103b85760019151386117d7565b503d6117f2565b6040513d86823e3d90fd5b50346102bc57602061183a61183436612a23565b90612f51565b50604051908152f35b50346102bc57806003193601126102bc5761185c612d70565b60165461186b81421015612b33565b156118b357806016557fbe12859b636aed607d5230b2cc2711f68d70e51060e6cca1f575ef5d2fcc95d1604060175480600e5560185480600f5582519182526020820152a180f35b60405162461bcd60e51b815260206004820152602660248201527f61646d696e5f616374696f6e735f646561646c696e652073686f756c64206e6f60448201527f74206265203000000000000000000000000000000000000000000000000000006064820152608490fd5b50346102bc576101003660031901126102bc5736602312156102bc5760405161194681612979565b8036606411611e31576004905b60648210611e115750506001600160a01b0360c4351660c435036103b85760e435906001600160a01b03821682036103b857601a5460ff8160081c16611dcc576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303611d8757620f424060643511611d425764012a05f20060843511611cfd576402540be40060a43511611cb85761ff00191661010017601a55825b60038110611ab55750825b60038110611a97575050606435601255606435601355608435600e5560a435600f55624f1a004201804211611a8357906001600160a01b03916019551673ffffffffffffffffffffffffffffffffffffffff196011541617601155611a67612d70565b6001600160a01b0360c435161561034d5761034a60c4356134cd565b634e487b7160e01b83526011600452602483fd5b60019060206001600160a01b03845116930192816008015501611a04565b6001600160a01b03611ac78284612acc565b511615611c735773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03611af58385612acc565b511603611be95760126011740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8254161790555b601290818111611b98578103908111611b8457604d8111611b8457600a0a808260020155670de0b6b3a76400009080820291820403611b845760058201556001016119f9565b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b8152602060048201526024808201527f546865206d6178696d756d20646563696d616c2063616e6e6f742065786365656044820152630c84062760e31b6064820152608490fd5b6001600160a01b03611bfb8284612acc565b5116604051809163313ce56760e01b825281600460209384935afa908115611c68578691611c2f575b5060ff915016611b3e565b905081813d8311611c61575b611c4581836129bf565b810103126104df575160ff811681036104df5760ff9038611c24565b503d611c3b565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152600c60248201527f5a45524f204164647265737300000000000000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f5f61646d696e5f6665652065786365656473206d6178696d756d0000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601460248201527f5f6665652065786365656473206d6178696d756d0000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527f5f412065786365656473206d6178696d756d00000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4f7065726174696f6e733a204e6f7420666163746f72790000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f4f7065726174696f6e733a20416c726561647920696e697469616c697a6564006044820152606490fd5b81356001600160a01b03811681036103b857815260209182019101611953565b8280fd5b50346102bc5760203660031901126102bc5760043560038110156106da57602090600b0154604051908152f35b5060803660031901126102bc57611e78366129e1565b90611e81612efb565b611e9060ff601a541615612b7f565b6011549160ff8360a01c1615612275575b604051611ead81612979565b6060368237600e549060038202918083046003149015171561125257600f546001600160a01b03956020611edf612e84565b916004604051809a81936318160ddd60e01b8352165afa968715611c68578697612241575b508591611f0f612a96565b8861222c575b60405191611f2283612979565b815183526020820151602084015260408201516040840152885b600381106121935750611f5284610c40856133ea565b968588111561214e57878b156121225750895b878b888b600385106120d557505050505050505090610c40611f86926133ea565b905b866120ba575050815b611f9f606435821015612c17565b845b6003811061205e57506001600160a01b0360115416803b156104f0576040516340c10f1960e01b8152336004820152602481018390529086908290604490829084905af18015611c6857612021575b50610d55610d63917f423f6495a08fc652425cf4ed0d1f9e37e571d9b9529b1c1c23cce780b2e7df0d959697612af3565b610d63917f423f6495a08fc652425cf4ed0d1f9e37e571d9b9529b1c1c23cce780b2e7df0d9596612054610d55936129ab565b9695509150611ff0565b8061206b60019287612acc565b5160088201546001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82036120a8576120a291503414612bcb565b01611fa1565b6120b59130903390613477565b6120a2565b6106fa6120ca826120d094612a73565b88612b00565b611f91565b610ec987610ec387610ebc816120ff988f978f996106fa610e6b9260019f9e9c86610e6491612acc565b81600b0155612111610ee2828b612acc565b61211b8288612acc565b5201611f65565b959450505050865b60038110612139575050611f88565b6001906020835193019281600b01550161212a565b60405162461bcd60e51b815260206004820152601a60248201527f4431206d7573742062652067726561746572207468616e2044300000000000006044820152606490fd5b8a156121cd575b806121bc6121aa60019386612acc565b516121b5838d612acc565b5190612af3565b6121c68287612acc565b5201611f3c565b6121d7818a612acc565b5161219a5760405162461bcd60e51b815260206004820152602260248201527f496e697469616c206465706f73697420726571756972657320616c6c20636f696044820152616e7360f01b6064820152608490fd5b925061223b82610c40856133ea565b92611f15565b9096506020813d60201161226d575b8161225d602093836129bf565b810103126104f057519538611f04565b3d9150612250565b61227f3415612bcb565b611ea1565b50346102bc57806003193601126102bc576020601654604051908152f35b50346102bc576122b136612a23565b906122ba612d70565b6014546201518090818101809111611b84574210612491574201804211611252576122e790831015612b33565b6122ef612e84565b908015801580612485575b1561241a57828210801591826123e9575b82156123be575b505015612379576123737fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c25493836012558260135542601455806015556040519384934291859094939260609260808301968352602083015260408201520152565b0390a180f35b60405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c20706172616d65746572205f6675747572655f4100000000006044820152606490fd5b909150816123cf575b503880612312565b600a8381029250838304141715611b8457821115386123c7565b9150600a8402848104600a1485151715612406578311159161230b565b634e487b7160e01b87526011600452602487fd5b60405162461bcd60e51b815260206004820152602560248201527f5f6675747572655f41206d757374206265206265747765656e203020616e642060448201527f4d41585f410000000000000000000000000000000000000000000000000000006064820152608490fd5b50620f424082106122fa565b60405162461bcd60e51b815260206004820152600f60248201527f646576203a20746f6f206561726c7900000000000000000000000000000000006044820152606490fd5b50346102bc57806003193601126102bc576020604051620f42408152f35b50346102bc57806003193601126102bc57602060ff601a5460081c166040519015158152f35b50346102bc5760803660031901126102bc57612535366129e1565b6064359182151583036102bc5761254a612a96565b612552612e84565b9061256082610c40836133ea565b93835b6003811061260d57505060049491610c4061257d926133ea565b9160206001600160a01b0360115416604051968780926318160ddd60e01b82525afa9485156104e35781956125d7575b50938392610301946106fa93602097506000146125cd57610caa91612a73565b90610caa91612a73565b9094506020813d602011612605575b816125f3602093836129bf565b810103126104df5751936103016125ad565b3d91506125e6565b60019087156126405761262e6126238285612acc565b5161149b8387612acc565b6126388286612acc565b525b01612563565b61264d610f2f8285612acc565b6126578286612acc565b5261263a565b50346102bc57806003193601126102bc57612676612d70565b805b600381101561278657816001600160a01b0382600801541673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81146000146127025747826104f457600b8401546126c291612a73565b915b826126d5575b505050600101612678565b6126ee57600192916126e691612dc8565b9038806126ca565b634e487b7160e01b84526032600452602484fd5b6040516370a0823160e01b8152306004820152602092508281602481855afa92831561277b578593612747575b5050612741849284600b015490612a73565b916126c4565b9080929350813d8311612774575b61275f81836129bf565b81010312612770575190388061272f565b8380fd5b503d612755565b6040513d87823e3d90fd5b5080f35b50346102bc57806003193601126102bc576127a3612d70565b60ff19601a5416601a557f061284ffa2814ace135f62907c78a7cff0f070efe7e6a0a42740ea1da2c8bdc88180a180f35b50346102bc57806003193601126102bc576020601954604051908152f35b50346102bc57806003193601126102bc57602060405160038152f35b50346102bc5760203660031901126102bc5760043561282b612d70565b6108fc811015806128b3575b1561286e576020817f535533646ff25874ff322c27a44e684b16c906ef818ae694d70794ec40860e2e92601055604051908152a180f35b60405162461bcd60e51b815260206004820152600b60248201527f496c6c6567616c206761730000000000000000000000000000000000000000006044820152606490fd5b506159d8811115612837565b50346102bc57806003193601126102bc576128d8612d70565b806016557f1b4883af197c705114490f8d84f9ce30bef6a6199f7b7b649e845577cf0769a18180a180f35b50346102bc57806003193601126102bc576020601454604051908152f35b50346102bc57806003193601126102bc5760206040516159d88152f35b50346102bc57806003193601126102bc576020601554604051908152f35b9050346106da57816003193601126106da57806201518060209252f35b6060810190811067ffffffffffffffff82111761299557604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161299557604052565b90601f8019910116810190811067ffffffffffffffff82111761299557604052565b80602312156103b857604051906129f782612979565b816064916064116103b8576004905b828210612a135750505090565b8135815260209182019101612a06565b60409060031901126103b8576004359060243590565b60609060031901126103b857600435906024359060443590565b346103b85760003660031901126103b85760206040516402540be4008152f35b91908203918211612a8057565b634e487b7160e01b600052601160045260246000fd5b60405190600b6000835b60038210612ab657505050612ab482612979565b565b6001602081928554815201930191019091612aa0565b906003811015612add5760051b0190565b634e487b7160e01b600052603260045260246000fd5b91908201809211612a8057565b81810292918115918404141715612a8057565b8115612b1d570490565b634e487b7160e01b600052601260045260246000fd5b15612b3a57565b60405162461bcd60e51b815260206004820152601660248201527f6465763a20696e73756666696369656e742074696d65000000000000000000006044820152606490fd5b15612b8657565b60405162461bcd60e51b815260206004820152600660248201527f4b696c6c656400000000000000000000000000000000000000000000000000006044820152606490fd5b15612bd257565b60405162461bcd60e51b815260206004820152601560248201527f496e636f6e73697374656e74207175616e7469747900000000000000000000006044820152606490fd5b15612c1e57565b60405162461bcd60e51b815260206004820152601460248201527f536c697070616765207363726577656420796f750000000000000000000000006044820152606490fd5b6000915b60038310612c7457505050565b600190825181526020809101920192019190612c67565b90949392612ca460e09361067f84610100810199612c63565b60c08201520152565b6003811015612add5760088101546001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8203612cf257600b0154612cef915047612a73565b90565b6020602492604051938480926370a0823160e01b82523060048301525afa908115612d6457600091612d2e575b612cef9250600b015490612a73565b90506020823d602011612d5c575b81612d49602093836129bf565b810103126103b857612cef915190612d1f565b3d9150612d3c565b6040513d6000823e3d90fd5b6001600160a01b03600054163303612d8457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8103612e4d575060008080809333601054f1612e006136fe565b5015612e0857565b60405162461bcd60e51b815260206004820152601460248201527f524f5345207472616e73666572206661696c65640000000000000000000000006044820152606490fd5b60405163a9059cbb60e01b6020820152336024820152604480820193909352918252612ab49190612e7f6064836129bf565b6138fa565b601554601354814210600014612ef657601254601454909182811115612ed85792612ed261108992612ecc612ebc86612cef98612a73565b612ec68342612a73565b90612b00565b92612a73565b90612b13565b92612ed2612ef092612ecc612ebc612cef9787612a73565b90612a73565b905090565b600260015414612f0c576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9190612f5b612e84565b90600e5491600392600381029080820460031490151715612a805760031c60405193846002906000905b83821061311957505050600490612f9b86612979565b60206001600160a01b0360115416604051938480926318160ddd60e01b82525afa918215612d64576000926130e5575b50612ff5612fef612fda61312f565b936106fa612fe88887613522565b809c612b00565b89612a73565b926130028484888861373e565b9861301e6130148b610eed8a88612acc565b6110bb898b612acc565b9960005b8885821061306f579250505061304c9594925083915061304581612ef095612acc565b519461373e565b6000198101908111612a80576110bb61306892612cef94612acc565b8093612a73565b906130ad6402540be4006130a286868c868d60019982146000146130be576114ab92610ec36120ca96936106fa93612acc565b04610eed838a612acc565b6130b78289612acc565b5201613022565b9250926106fa612ef092610ec3866130d96130e09888612acc565b5196612acc565b6120ca565b9091506020813d602011613111575b81613101602093836129bf565b810103126103b857519038612fcb565b3d91506130f4565b6001602081928554815201930191019091612f85565b606060405161313d81612979565b3690376040519060056000835b600382106131a55750505061315e82612979565b8160005b6003811061316e575050565b80670de0b6b3a764000061319361318760019486612acc565b5183600b015490612b00565b0461319e8285612acc565b5201613162565b600160208192855481520193019101909161314a565b92909182841415806133e0575b806133d6575b15613391576131db612e84565b916131e68382613522565b80956000936003938487029787890486148815171561240657918994939187935b87851061331557505050505060099161321f91612b00565b9302908482041484151715612a805761323e6110899161324594612b13565b9385612b13565b918060005b60ff81106132975760405162461bcd60e51b815260206004820152601160248201527f646f6573206e6f7420636f6e76657267650000000000000000000000000000006044820152606490fd5b816132ab856132a68380612b00565b612af3565b906001916001600160ff1b0382168203612a8057612ed2866114ab8a6132d295871b612af3565b9283818111156132fe57906132e691612a73565b11156132f6576001905b0161324a565b509250505090565b61330791612a73565b11156132f6576001906132f0565b919395509193968486146000146133675761333b8b613335868094612af3565b99612b00565b87820291808304891490151715612a805760019161335891612b13565b955b019290918a959492613207565b8582146133875761333b8b61333561337f8987612acc565b518094612af3565b969460019061335a565b60405162461bcd60e51b815260206004820152601160248201527f496c6c6567616c20706172616d657465720000000000000000000000000000006044820152606490fd5b50600383106131ce565b50600384106131c8565b9060606040516133f981612979565b3690376040519160056000845b600382106134615750505061341a83612979565b8260005b6003811061342b57505050565b80670de0b6b3a764000061344f61344460019486612acc565b51610e648488612acc565b0461345a8285612acc565b520161341e565b6001602081928554815201930191019091613406565b9290604051926323b872dd60e01b60208501526001600160a01b03809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761299557612ab4926040526138fa565b600054906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b90600091825b600381106136e6575082156136de5782600380840293808504821490151715612a8057909360001984018481119290919060005b60ff81106135cf5760405162461bcd60e51b815260206004820152602660248201527f696e76617269616e742063616c63756c6174696f6e20646964206e6f7420636f60448201527f6e766572676500000000000000000000000000000000000000000000000000006064820152608490fd5b8260005b8381106136995750836135e68a8a612b00565b9084830291838304861484151715612a805781610caa8a9461360793612af3565b91612a80576136169087612b00565b907f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168303612a8057612ed26136539260019460021b90612af3565b938481811115613682579061366791612a73565b1115613677576001905b0161355c565b505094505050505090565b61368b91612a73565b111561367757600190613671565b9690846136a8919a939a612b00565b6136b28883612acc565b519084820291808304861490151715612a80576001916136d191612b13565b97019891989690966135d3565b505050600090565b926136f76001916121b58685612acc565b9301613528565b3d15613739573d9067ffffffffffffffff8211612995576040519161372d601f8201601f1916602001846129bf565b82523d6000602084013e565b606090565b906003808210156138b5578460009282850295858704841486151715611b845787929185915b85831061385c5750505060099161377a91612b00565b9302908482041484151715612a805761323e6110899161379994612b13565b918060005b60ff81106137eb5760405162461bcd60e51b815260206004820152601160248201527f646f6573206e6f7420636f6e76657267650000000000000000000000000000006044820152606490fd5b816137fa856132a68380612b00565b906001916001600160ff1b0382168203612a8057612ed2866114ab8a61382195871b612af3565b928381811115613845579061383591612a73565b11156132f6576001905b0161379e565b61384e91612a73565b11156132f65760019061383f565b929591935091908284146138ab576138818961387b61337f8786612acc565b97612b00565b85820291808304871490151715612a805760019161389e91612b13565b935b019091889392613764565b94926001906138a0565b60405162461bcd60e51b815260206004820152601460248201527f6465763a20692061626f7665204e5f434f494e530000000000000000000000006044820152606490fd5b6001600160a01b031690604051604081019080821067ffffffffffffffff8311176129955761396d916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af16139676136fe565b91613a16565b8051918215918483156139f2575b5050509050156139885750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9193818094500103126106da578201519081151582036102bc57508038808461397b565b91929015613a785750815115613a2a575090565b3b15613a335790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015613a8b5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510613ad1575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350613aae56fea164736f6c6343000818000a",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816306e9481c1461295c57508063140522881461293e578063193d983f146129215780632081066c14612903578063226840fb146128bf578063270271a81461280e57806329357750146127f25780632a426896146127d45780633046f9721461278a57806330c540851461265d5780633883e1191461251a578063392e53cd146124f457806339698415146124d65780633c157e64146122a2578063405e28f8146122845780634515cef314611e625780634903b0d114611e355780634eac48351461191e5780634f12fe97146118435780634fb08c5e14611820578063524c3901146117245780635409491a14611706578063556d6e9f1461162b57806358680d0b1461160d5780635b41b908146113345780635b5a1467146111ce57806362203d74146111a15780636d4366b714611185578063715018a61461111e5780637dafa364146110f157806385f11d1e146110215780638da5cb5b14610ffb5780639c868ac014610fd85780639fdaea0c14610b79578063a6b0a71814610b35578063a97e1c9214610b18578063aaf5eb6814610af5578063ab5ac06114610ad9578063b2b8a2c514610abb578063b4b577ad14610a9d578063bb7b8b80146109d1578063bc063e1a146109b1578063c66106571461097a578063ca8ca15414610917578063d73792a914610309578063ddca3f43146108f9578063e2e7d264146108da578063e36988531461083e578063e382446214610820578063e5d9e90314610802578063ecb586a51461056b578063edfb78011461054d578063f1dc3cc9146103bd578063f2fde38b1461030e578063f3de036214610309578063f446c1d0146102e6578063fc0c546a146102bf5763fee3f7f91461029f57600080fd5b346102bc57806003193601126102bc576020600f54604051908152f35b80fd5b50346102bc57806003193601126102bc5760206001600160a01b0360115416604051908152f35b50346102bc57806003193601126102bc576020610301612e84565b604051908152f35b612a53565b50346102bc5760203660031901126102bc576004356001600160a01b0381168082036103b85761033c612d70565b1561034d5761034a906134cd565b80f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b600080fd5b50346102bc576103cc36612a39565b90916103d6612efb565b6103e560ff601a541615612b7f565b6103ef8382612f51565b90928310610508576402540be40061040d61041492600f5490612b00565b0483612af3565b60038410156104f45761042c84600b01918254612a73565b90556001600160a01b038060115416803b156104f05760405163079cc67960e41b81523360048201526024810184905290869081908390604490829084905af19182156104e35785926104c8575b505061048b91856008015416612dc8565b604051928352602083015260408201527f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a060603392a26001805580f35b6104d39192506129ab565b6104df5782853861047a565b8480fd5b50604051903d90823e3d90fd5b8580fd5b634e487b7160e01b85526032600452602485fd5b60405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820636f696e732072656d6f76656400000000000000006044820152606490fd5b50346102bc57806003193601126102bc576020604051624f1a008152f35b50346102bc5760803660031901126102bc5760043536604312156103b85760405161059581612979565b608491813684116103b8576024906024905b8582106107f25750506105b8612efb565b6001600160a01b03806011541693604051926318160ddd60e01b845260208460048183995afa9384156107e75788946107b3575b5090879291604051976105fe89612979565b6060368a376040519761061089612979565b6060368a37855b600381106106de57505050505060115416803b156106da5760405163079cc67960e41b8152336004820152602481018590529082908290604490829084905af180156106cf576106bb575b50506106899161067191612a73565b9161067f6040518095612c63565b6060840190612c63565b60c08201527fa49d4cf02656aebf8c771f5a8585638a2a15ee6c97cf7205d4208ed7c1df252d60e03392a26001805580f35b6106c4906129ab565b6104df578438610662565b6040513d84823e3d90fd5b5080fd5b8091929394959650600b018054906106ff896106fa8c85612b00565b612b13565b9161070a8489612acc565b51831061074a579180610730858f61073d956107298560019a99612a73565b9055612acc565b5288836008015416612dc8565b01908a9594939291610617565b60405162461bcd60e51b8152600481018690526030818901527f5769746864726177616c20726573756c74656420696e20666577657220636f6960448201527f6e73207468616e2065787065637465640000000000000000000000000000000060648201528690fd5b9093506020813d6020116107df575b816107cf602093836129bf565b810103126103b8575192386105ec565b3d91506107c2565b6040513d8a823e3d90fd5b81358152602091820191016105a7565b50346102bc57806003193601126102bc5760206040516203f4808152f35b50346102bc57806003193601126102bc576020601854604051908152f35b50346102bc57806003193601126102bc57610857612d70565b60195442101561089557600160ff19601a541617601a557fbe26733c2bf6ff3ea5ba8cfe744422bd49052ff9ed5685c9e81e6f9321dbaddd8180a180f35b60405162461bcd60e51b815260206004820152601160248201527f457863656564656420646561646c696e650000000000000000000000000000006044820152606490fd5b50346102bc5760203660031901126102bc576020610301600435612cad565b50346102bc57806003193601126102bc576020600e54604051908152f35b50346102bc57806003193601126102bc57610930612d70565b7f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc201938604061095b612e84565b806012558060135542601455426015558151908152426020820152a180f35b50346102bc5760203660031901126102bc576004359060038210156102bc5760206001600160a01b03836008015416604051908152f35b50346102bc57806003193601126102bc57602060405164012a05f2008152f35b50346102bc57806003193601126102bc576004906109fe6109f061312f565b6109f8612e84565b90613522565b9060206001600160a01b0360115416604051948580926318160ddd60e01b82525afa9283156104e3578193610a69575b50670de0b6b3a764000091828102928184041490151715610a555760206103018484612b13565b634e487b7160e01b81526011600452602490fd5b9092506020813d602011610a95575b81610a85602093836129bf565b810103126103b857519138610a2e565b3d9150610a78565b50346102bc57806003193601126102bc576020601354604051908152f35b50346102bc57806003193601126102bc576020601054604051908152f35b50346102bc57806003193601126102bc576020604051600a8152f35b50346102bc57806003193601126102bc576020604051670de0b6b3a76400008152f35b50346102bc57806003193601126102bc5760206040516108fc8152f35b50346102bc57806003193601126102bc5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346102bc5760803660031901126102bc576004610b96366129e1565b91610b9f612efb565b610bae60ff601a541615612b7f565b60206001600160a01b0360115416604051938480926318160ddd60e01b82525afa9182156104e3578192610fa4575b508115610f5f57600e54600381029080820460031490151715610f4b57600f5490610c06612e84565b610c0e612a96565b90604051610c1b81612979565b825181526020830151602082015260408301516040820152610c4582610c40856133ea565b613522565b92865b60038110610f1f5750908291610c65899a989994610c40846133ea565b9660405196610c7388612979565b60603689378a5b888c8b60038410610e34575050505050505091610caa610ca46106fa93610c40610caf97966133ea565b84612a73565b612b00565b948515610de3576001808701809711610dcf57610cd0606435881115612c17565b6001600160a01b0360115416803b15610dcb5760405163079cc67960e41b8152336004820152602481018990529087908290604490829084905af18015610dc057908791610dac575b505b60038110610d6d575050610d557f173599dbf9c6ca6f7c3b590df07ae98a45d74ff54065505141e7de6c46a624c2949596610d6392612a73565b604051938493339785612c8b565b0390a26001805580f35b80610d79839288612acc565b51610d85575b01610d1b565b610da76001600160a01b03826008015416610da0838a612acc565b5190612dc8565b610d7f565b610db5906129ab565b6104f0578538610d19565b6040513d89823e3d90fd5b8680fd5b634e487b7160e01b86526011600452602486fd5b60405162461bcd60e51b815260206004820152602360248201527f746f6b656e5f616d6f756e74206d75737420626520677265617465722074686160448201526206e20360ec1b6064820152608490fd5b8798995096610ec986610ec386610ebc8f610ed09897610e6b8e9f9260019d9e9f8694610e64866106fa93612acc565b5190612b00565b9050610e778289612acc565b51811115610f0b57610e9490610e8d838a612acc565b5190612a73565b965b8c610eab6402540be400998a9260031c612b00565b04610eb6838b612acc565b52612acc565b5195612acc565b51612b00565b0490612a73565b81600b0155610ef3610ee2828b612acc565b51610eed8389612acc565b51612a73565b610efd8288612acc565b5201908b9594939291610c7a565b610f1990610eed838a612acc565b96610e96565b80610f3a610f2f6001938d612acc565b51610eed8387612acc565b610f448286612acc565b5201610c48565b634e487b7160e01b82526011600452602482fd5b60405162461bcd60e51b815260206004820152601660248201527f6465763a207a65726f20746f74616c20737570706c79000000000000000000006044820152606490fd5b9091506020813d602011610fd0575b81610fc0602093836129bf565b810103126103b857519038610bdd565b3d9150610fb3565b50346102bc57806003193601126102bc57602060ff601a54166040519015158152f35b50346102bc57806003193601126102bc576001600160a01b036020915416604051908152f35b50346102bc5761103036612a39565b90918261103b61312f565b91604051809485916002906000905b600382106110d45750505084610eed938561108f856110896110959661107461109b9c9b99612979565b610e6486611082818a612acc565b5194612acc565b90612af3565b916131bb565b92612acc565b600019810193908411610a555760206103016110c2866110bb8787612acc565b5190612b13565b6402540be400610ec982600e54612b00565b82548152899650889450600192830192919091019060200161104a565b50346102bc5760203660031901126102bc5760043560038110156106da5760209060020154604051908152f35b50346102bc57806003193601126102bc57611137612d70565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346102bc57806003193601126102bc57602060405160128152f35b50346102bc5760203660031901126102bc5760043560038110156106da5760209060050154604051908152f35b50346102bc576111dd36612a23565b906111e6612d70565b6016546112f05764012a05f20081116112ab576402540be4008211611266576203f480420191824211611252577f351fc5da2fbf480f2225debf3664a4bc90fa9923743aad58b4603f648e931fe09160409184601655816017558060185582519182526020820152a280f35b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b815260206004820152601e60248201527f6465763a2061646d696e206665652065786365656473206d6178696d756d00006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f6465763a206665652065786365656473206d6178696d756d00000000000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f61646d696e5f616374696f6e735f646561646c696e65206d75737420626520306044820152fd5b5060803660031901126102bc576024906004358235604435611354612efb565b61136360ff601a541615612b7f565b60ff60115460a01c16156115fe575b61137a612a96565b94611384866133ea565b61138e8582612acc565b5160038610156115eb5781610eed866110956113c396956113ca6113d1968c670de0b6b3a76400009a8b91600501548d612b00565b0490612af3565b838c6131bb565b6000198101929083116115d8576402540be400916113fd836113f5600e5487612b00565b048095612a73565b92828402938085048414901517156115c55760038710156115b25761142787600501548095612b13565b94606435861061154857600f5461143d91612b00565b048281029281840414901517156115365750856114ab84610eed887fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989a9b9c6114a18a61149b611494610d639c9b6114b09b612b13565b9884612acc565b51612af3565b8d600b0155612acc565b612a73565b84600b01556114ff816001600160a01b03808960080154168673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82146000146115245750506114f4348714612bcb565b866008015416612dc8565b6040519384933397859094939260609260808301968352602083015260408201520152565b6115319130903390613477565b6114f4565b634e487b7160e01b8852601160045287fd5b60405162461bcd60e51b815260206004820152602e818501527f45786368616e676520726573756c74656420696e20666577657220636f696e7360448201527f207468616e2065787065637465640000000000000000000000000000000000006064820152608490fd5b50634e487b7160e01b8852603260045287fd5b50634e487b7160e01b8852601160045287fd5b50634e487b7160e01b8652601160045285fd5b634e487b7160e01b875260326004528287fd5b6116083415612bcb565b611372565b50346102bc57806003193601126102bc576020601754604051908152f35b50346102bc5761163a36612a39565b928160409392935192836005906000905b600382106116ec5750505061165f84612979565b61166761312f565b9081836116748383612acc565b51670de0b6b3a7640000809a61168a868b612acc565b5161169491612b00565b0461169e91612af3565b906116a8936131bb565b916116b291612acc565b51906116bd91612a73565b6000198101908111610f4b57848102948186041490151715610a555760206103016110c2866110bb8787612acc565b82548152879450600192830192919091019060200161164b565b50346102bc57806003193601126102bc576020601254604051908152f35b50346102bc57806003193601126102bc5761173d612d70565b805b6003811061176f57507f2c7203581ca666b8c5094c11c03f0b19b3750234a9d281bcbc88a260bcb006de8180a180f35b60088101546001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82036117aa57600191504781600b01555b0161173f565b60405180926370a0823160e01b825230600483015281602460209384935afa9081156118155784916117e6575b506001925081600b01556117a4565b905082813d831161180e575b6117fc81836129bf565b810103126103b85760019151386117d7565b503d6117f2565b6040513d86823e3d90fd5b50346102bc57602061183a61183436612a23565b90612f51565b50604051908152f35b50346102bc57806003193601126102bc5761185c612d70565b60165461186b81421015612b33565b156118b357806016557fbe12859b636aed607d5230b2cc2711f68d70e51060e6cca1f575ef5d2fcc95d1604060175480600e5560185480600f5582519182526020820152a180f35b60405162461bcd60e51b815260206004820152602660248201527f61646d696e5f616374696f6e735f646561646c696e652073686f756c64206e6f60448201527f74206265203000000000000000000000000000000000000000000000000000006064820152608490fd5b50346102bc576101003660031901126102bc5736602312156102bc5760405161194681612979565b8036606411611e31576004905b60648210611e115750506001600160a01b0360c4351660c435036103b85760e435906001600160a01b03821682036103b857601a5460ff8160081c16611dcc576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303611d8757620f424060643511611d425764012a05f20060843511611cfd576402540be40060a43511611cb85761ff00191661010017601a55825b60038110611ab55750825b60038110611a97575050606435601255606435601355608435600e5560a435600f55624f1a004201804211611a8357906001600160a01b03916019551673ffffffffffffffffffffffffffffffffffffffff196011541617601155611a67612d70565b6001600160a01b0360c435161561034d5761034a60c4356134cd565b634e487b7160e01b83526011600452602483fd5b60019060206001600160a01b03845116930192816008015501611a04565b6001600160a01b03611ac78284612acc565b511615611c735773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03611af58385612acc565b511603611be95760126011740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8254161790555b601290818111611b98578103908111611b8457604d8111611b8457600a0a808260020155670de0b6b3a76400009080820291820403611b845760058201556001016119f9565b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b8152602060048201526024808201527f546865206d6178696d756d20646563696d616c2063616e6e6f742065786365656044820152630c84062760e31b6064820152608490fd5b6001600160a01b03611bfb8284612acc565b5116604051809163313ce56760e01b825281600460209384935afa908115611c68578691611c2f575b5060ff915016611b3e565b905081813d8311611c61575b611c4581836129bf565b810103126104df575160ff811681036104df5760ff9038611c24565b503d611c3b565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152600c60248201527f5a45524f204164647265737300000000000000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f5f61646d696e5f6665652065786365656473206d6178696d756d0000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601460248201527f5f6665652065786365656473206d6178696d756d0000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527f5f412065786365656473206d6178696d756d00000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4f7065726174696f6e733a204e6f7420666163746f72790000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f4f7065726174696f6e733a20416c726561647920696e697469616c697a6564006044820152606490fd5b81356001600160a01b03811681036103b857815260209182019101611953565b8280fd5b50346102bc5760203660031901126102bc5760043560038110156106da57602090600b0154604051908152f35b5060803660031901126102bc57611e78366129e1565b90611e81612efb565b611e9060ff601a541615612b7f565b6011549160ff8360a01c1615612275575b604051611ead81612979565b6060368237600e549060038202918083046003149015171561125257600f546001600160a01b03956020611edf612e84565b916004604051809a81936318160ddd60e01b8352165afa968715611c68578697612241575b508591611f0f612a96565b8861222c575b60405191611f2283612979565b815183526020820151602084015260408201516040840152885b600381106121935750611f5284610c40856133ea565b968588111561214e57878b156121225750895b878b888b600385106120d557505050505050505090610c40611f86926133ea565b905b866120ba575050815b611f9f606435821015612c17565b845b6003811061205e57506001600160a01b0360115416803b156104f0576040516340c10f1960e01b8152336004820152602481018390529086908290604490829084905af18015611c6857612021575b50610d55610d63917f423f6495a08fc652425cf4ed0d1f9e37e571d9b9529b1c1c23cce780b2e7df0d959697612af3565b610d63917f423f6495a08fc652425cf4ed0d1f9e37e571d9b9529b1c1c23cce780b2e7df0d9596612054610d55936129ab565b9695509150611ff0565b8061206b60019287612acc565b5160088201546001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82036120a8576120a291503414612bcb565b01611fa1565b6120b59130903390613477565b6120a2565b6106fa6120ca826120d094612a73565b88612b00565b611f91565b610ec987610ec387610ebc816120ff988f978f996106fa610e6b9260019f9e9c86610e6491612acc565b81600b0155612111610ee2828b612acc565b61211b8288612acc565b5201611f65565b959450505050865b60038110612139575050611f88565b6001906020835193019281600b01550161212a565b60405162461bcd60e51b815260206004820152601a60248201527f4431206d7573742062652067726561746572207468616e2044300000000000006044820152606490fd5b8a156121cd575b806121bc6121aa60019386612acc565b516121b5838d612acc565b5190612af3565b6121c68287612acc565b5201611f3c565b6121d7818a612acc565b5161219a5760405162461bcd60e51b815260206004820152602260248201527f496e697469616c206465706f73697420726571756972657320616c6c20636f696044820152616e7360f01b6064820152608490fd5b925061223b82610c40856133ea565b92611f15565b9096506020813d60201161226d575b8161225d602093836129bf565b810103126104f057519538611f04565b3d9150612250565b61227f3415612bcb565b611ea1565b50346102bc57806003193601126102bc576020601654604051908152f35b50346102bc576122b136612a23565b906122ba612d70565b6014546201518090818101809111611b84574210612491574201804211611252576122e790831015612b33565b6122ef612e84565b908015801580612485575b1561241a57828210801591826123e9575b82156123be575b505015612379576123737fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c25493836012558260135542601455806015556040519384934291859094939260609260808301968352602083015260408201520152565b0390a180f35b60405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c20706172616d65746572205f6675747572655f4100000000006044820152606490fd5b909150816123cf575b503880612312565b600a8381029250838304141715611b8457821115386123c7565b9150600a8402848104600a1485151715612406578311159161230b565b634e487b7160e01b87526011600452602487fd5b60405162461bcd60e51b815260206004820152602560248201527f5f6675747572655f41206d757374206265206265747765656e203020616e642060448201527f4d41585f410000000000000000000000000000000000000000000000000000006064820152608490fd5b50620f424082106122fa565b60405162461bcd60e51b815260206004820152600f60248201527f646576203a20746f6f206561726c7900000000000000000000000000000000006044820152606490fd5b50346102bc57806003193601126102bc576020604051620f42408152f35b50346102bc57806003193601126102bc57602060ff601a5460081c166040519015158152f35b50346102bc5760803660031901126102bc57612535366129e1565b6064359182151583036102bc5761254a612a96565b612552612e84565b9061256082610c40836133ea565b93835b6003811061260d57505060049491610c4061257d926133ea565b9160206001600160a01b0360115416604051968780926318160ddd60e01b82525afa9485156104e35781956125d7575b50938392610301946106fa93602097506000146125cd57610caa91612a73565b90610caa91612a73565b9094506020813d602011612605575b816125f3602093836129bf565b810103126104df5751936103016125ad565b3d91506125e6565b60019087156126405761262e6126238285612acc565b5161149b8387612acc565b6126388286612acc565b525b01612563565b61264d610f2f8285612acc565b6126578286612acc565b5261263a565b50346102bc57806003193601126102bc57612676612d70565b805b600381101561278657816001600160a01b0382600801541673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81146000146127025747826104f457600b8401546126c291612a73565b915b826126d5575b505050600101612678565b6126ee57600192916126e691612dc8565b9038806126ca565b634e487b7160e01b84526032600452602484fd5b6040516370a0823160e01b8152306004820152602092508281602481855afa92831561277b578593612747575b5050612741849284600b015490612a73565b916126c4565b9080929350813d8311612774575b61275f81836129bf565b81010312612770575190388061272f565b8380fd5b503d612755565b6040513d87823e3d90fd5b5080f35b50346102bc57806003193601126102bc576127a3612d70565b60ff19601a5416601a557f061284ffa2814ace135f62907c78a7cff0f070efe7e6a0a42740ea1da2c8bdc88180a180f35b50346102bc57806003193601126102bc576020601954604051908152f35b50346102bc57806003193601126102bc57602060405160038152f35b50346102bc5760203660031901126102bc5760043561282b612d70565b6108fc811015806128b3575b1561286e576020817f535533646ff25874ff322c27a44e684b16c906ef818ae694d70794ec40860e2e92601055604051908152a180f35b60405162461bcd60e51b815260206004820152600b60248201527f496c6c6567616c206761730000000000000000000000000000000000000000006044820152606490fd5b506159d8811115612837565b50346102bc57806003193601126102bc576128d8612d70565b806016557f1b4883af197c705114490f8d84f9ce30bef6a6199f7b7b649e845577cf0769a18180a180f35b50346102bc57806003193601126102bc576020601454604051908152f35b50346102bc57806003193601126102bc5760206040516159d88152f35b50346102bc57806003193601126102bc576020601554604051908152f35b9050346106da57816003193601126106da57806201518060209252f35b6060810190811067ffffffffffffffff82111761299557604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161299557604052565b90601f8019910116810190811067ffffffffffffffff82111761299557604052565b80602312156103b857604051906129f782612979565b816064916064116103b8576004905b828210612a135750505090565b8135815260209182019101612a06565b60409060031901126103b8576004359060243590565b60609060031901126103b857600435906024359060443590565b346103b85760003660031901126103b85760206040516402540be4008152f35b91908203918211612a8057565b634e487b7160e01b600052601160045260246000fd5b60405190600b6000835b60038210612ab657505050612ab482612979565b565b6001602081928554815201930191019091612aa0565b906003811015612add5760051b0190565b634e487b7160e01b600052603260045260246000fd5b91908201809211612a8057565b81810292918115918404141715612a8057565b8115612b1d570490565b634e487b7160e01b600052601260045260246000fd5b15612b3a57565b60405162461bcd60e51b815260206004820152601660248201527f6465763a20696e73756666696369656e742074696d65000000000000000000006044820152606490fd5b15612b8657565b60405162461bcd60e51b815260206004820152600660248201527f4b696c6c656400000000000000000000000000000000000000000000000000006044820152606490fd5b15612bd257565b60405162461bcd60e51b815260206004820152601560248201527f496e636f6e73697374656e74207175616e7469747900000000000000000000006044820152606490fd5b15612c1e57565b60405162461bcd60e51b815260206004820152601460248201527f536c697070616765207363726577656420796f750000000000000000000000006044820152606490fd5b6000915b60038310612c7457505050565b600190825181526020809101920192019190612c67565b90949392612ca460e09361067f84610100810199612c63565b60c08201520152565b6003811015612add5760088101546001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8203612cf257600b0154612cef915047612a73565b90565b6020602492604051938480926370a0823160e01b82523060048301525afa908115612d6457600091612d2e575b612cef9250600b015490612a73565b90506020823d602011612d5c575b81612d49602093836129bf565b810103126103b857612cef915190612d1f565b3d9150612d3c565b6040513d6000823e3d90fd5b6001600160a01b03600054163303612d8457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8103612e4d575060008080809333601054f1612e006136fe565b5015612e0857565b60405162461bcd60e51b815260206004820152601460248201527f524f5345207472616e73666572206661696c65640000000000000000000000006044820152606490fd5b60405163a9059cbb60e01b6020820152336024820152604480820193909352918252612ab49190612e7f6064836129bf565b6138fa565b601554601354814210600014612ef657601254601454909182811115612ed85792612ed261108992612ecc612ebc86612cef98612a73565b612ec68342612a73565b90612b00565b92612a73565b90612b13565b92612ed2612ef092612ecc612ebc612cef9787612a73565b90612a73565b905090565b600260015414612f0c576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9190612f5b612e84565b90600e5491600392600381029080820460031490151715612a805760031c60405193846002906000905b83821061311957505050600490612f9b86612979565b60206001600160a01b0360115416604051938480926318160ddd60e01b82525afa918215612d64576000926130e5575b50612ff5612fef612fda61312f565b936106fa612fe88887613522565b809c612b00565b89612a73565b926130028484888861373e565b9861301e6130148b610eed8a88612acc565b6110bb898b612acc565b9960005b8885821061306f579250505061304c9594925083915061304581612ef095612acc565b519461373e565b6000198101908111612a80576110bb61306892612cef94612acc565b8093612a73565b906130ad6402540be4006130a286868c868d60019982146000146130be576114ab92610ec36120ca96936106fa93612acc565b04610eed838a612acc565b6130b78289612acc565b5201613022565b9250926106fa612ef092610ec3866130d96130e09888612acc565b5196612acc565b6120ca565b9091506020813d602011613111575b81613101602093836129bf565b810103126103b857519038612fcb565b3d91506130f4565b6001602081928554815201930191019091612f85565b606060405161313d81612979565b3690376040519060056000835b600382106131a55750505061315e82612979565b8160005b6003811061316e575050565b80670de0b6b3a764000061319361318760019486612acc565b5183600b015490612b00565b0461319e8285612acc565b5201613162565b600160208192855481520193019101909161314a565b92909182841415806133e0575b806133d6575b15613391576131db612e84565b916131e68382613522565b80956000936003938487029787890486148815171561240657918994939187935b87851061331557505050505060099161321f91612b00565b9302908482041484151715612a805761323e6110899161324594612b13565b9385612b13565b918060005b60ff81106132975760405162461bcd60e51b815260206004820152601160248201527f646f6573206e6f7420636f6e76657267650000000000000000000000000000006044820152606490fd5b816132ab856132a68380612b00565b612af3565b906001916001600160ff1b0382168203612a8057612ed2866114ab8a6132d295871b612af3565b9283818111156132fe57906132e691612a73565b11156132f6576001905b0161324a565b509250505090565b61330791612a73565b11156132f6576001906132f0565b919395509193968486146000146133675761333b8b613335868094612af3565b99612b00565b87820291808304891490151715612a805760019161335891612b13565b955b019290918a959492613207565b8582146133875761333b8b61333561337f8987612acc565b518094612af3565b969460019061335a565b60405162461bcd60e51b815260206004820152601160248201527f496c6c6567616c20706172616d657465720000000000000000000000000000006044820152606490fd5b50600383106131ce565b50600384106131c8565b9060606040516133f981612979565b3690376040519160056000845b600382106134615750505061341a83612979565b8260005b6003811061342b57505050565b80670de0b6b3a764000061344f61344460019486612acc565b51610e648488612acc565b0461345a8285612acc565b520161341e565b6001602081928554815201930191019091613406565b9290604051926323b872dd60e01b60208501526001600160a01b03809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761299557612ab4926040526138fa565b600054906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b90600091825b600381106136e6575082156136de5782600380840293808504821490151715612a8057909360001984018481119290919060005b60ff81106135cf5760405162461bcd60e51b815260206004820152602660248201527f696e76617269616e742063616c63756c6174696f6e20646964206e6f7420636f60448201527f6e766572676500000000000000000000000000000000000000000000000000006064820152608490fd5b8260005b8381106136995750836135e68a8a612b00565b9084830291838304861484151715612a805781610caa8a9461360793612af3565b91612a80576136169087612b00565b907f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168303612a8057612ed26136539260019460021b90612af3565b938481811115613682579061366791612a73565b1115613677576001905b0161355c565b505094505050505090565b61368b91612a73565b111561367757600190613671565b9690846136a8919a939a612b00565b6136b28883612acc565b519084820291808304861490151715612a80576001916136d191612b13565b97019891989690966135d3565b505050600090565b926136f76001916121b58685612acc565b9301613528565b3d15613739573d9067ffffffffffffffff8211612995576040519161372d601f8201601f1916602001846129bf565b82523d6000602084013e565b606090565b906003808210156138b5578460009282850295858704841486151715611b845787929185915b85831061385c5750505060099161377a91612b00565b9302908482041484151715612a805761323e6110899161379994612b13565b918060005b60ff81106137eb5760405162461bcd60e51b815260206004820152601160248201527f646f6573206e6f7420636f6e76657267650000000000000000000000000000006044820152606490fd5b816137fa856132a68380612b00565b906001916001600160ff1b0382168203612a8057612ed2866114ab8a61382195871b612af3565b928381811115613845579061383591612a73565b11156132f6576001905b0161379e565b61384e91612a73565b11156132f65760019061383f565b929591935091908284146138ab576138818961387b61337f8786612acc565b97612b00565b85820291808304871490151715612a805760019161389e91612b13565b935b019091889392613764565b94926001906138a0565b60405162461bcd60e51b815260206004820152601460248201527f6465763a20692061626f7665204e5f434f494e530000000000000000000000006044820152606490fd5b6001600160a01b031690604051604081019080821067ffffffffffffffff8311176129955761396d916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af16139676136fe565b91613a16565b8051918215918483156139f2575b5050509050156139885750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9193818094500103126106da578201519081151582036102bc57508038808461397b565b91929015613a785750815115613a2a575090565b3b15613a335790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015613a8b5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510613ad1575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350613aae56fea164736f6c6343000818000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add_liquidity(uint256[3],uint256)": {
        "params": {
          "amounts": ": Amount of each coin being deposited",
          "min_mint_amount": ": Minimum amount of LP tokens to mint from the deposit"
        }
      },
      "admin_balances(uint256)": {
        "params": {
          "i": ": Index of the coin to get admin balance for"
        }
      },
      "calc_token_amount(uint256[3],bool)": {
        "params": {
          "amounts": ": Amount of each coin being deposited",
          "deposit": ": Set True for deposits, False for withdrawals"
        }
      },
      "calc_withdraw_one_coin(uint256,uint256)": {
        "params": {
          "_token_amount": ": Amount of LP tokens to burn in the withdrawal",
          "i": ": Index value of the coin to withdraw"
        }
      },
      "commit_new_fee(uint256,uint256)": {
        "params": {
          "new_admin_fee": ": New admin fee (expressed as a percentage of the pool fee) Both the pool fee and the admin_fee are capped by the constants MAX_FEE and MAX_ADMIN_FEE, respectively. By default MAX_FEE is set at 50% and MAX_ADMIN_FEE at 100% (which is charged on the MAX_FEE amount).",
          "new_fee": ": New pool fee"
        }
      },
      "exchange(uint256,uint256,uint256,uint256)": {
        "params": {
          "dx": ": Amount of coin i to swap",
          "i": ": Index of coin to swap from",
          "j": ": Index of coin to swap to",
          "min_dy": ": \tMinimum amount of j to receive"
        }
      },
      "get_dy(uint256,uint256,uint256)": {
        "params": {
          "dx": ": Amount of coin i to swap",
          "i": ": Index of coin to swap from",
          "j": ": Index of coin to swap to"
        }
      },
      "get_dy_underlying(uint256,uint256,uint256)": {
        "params": {
          "dx": "Amount of coin i to swap",
          "i": "Index of coin to swap from",
          "j": "Index of coin to swap to"
        }
      },
      "initialize(address[3],uint256,uint256,uint256,address,address)": {
        "params": {
          "_A": ": Amplification coefficient multiplied by n * (n - 1)",
          "_LP": ": LP address",
          "_admin_fee": ": Admin fee",
          "_coins": ": Addresses of ERC20 conracts of coins (c-tokens) involved",
          "_fee": ": Fee to charge for exchanges",
          "_owner": ": Owner"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ramp_A(uint256,uint256)": {
        "params": {
          "_future_A": ": New future value of A",
          "_future_time": ": Timestamp at which new A should take effect"
        }
      },
      "remove_liquidity(uint256,uint256[3])": {
        "params": {
          "_amount": ": Quantity of LP tokens to burn in the withdrawal",
          "min_amounts": ": Minimum amounts of underlying coins to receive"
        }
      },
      "remove_liquidity_imbalance(uint256[3],uint256)": {
        "params": {
          "amounts": ": List of amounts of underlying coins to withdraw",
          "max_burn_amount": ": Maximum amount of LP token to burn in the withdrawal"
        }
      },
      "remove_liquidity_one_coin(uint256,uint256,uint256)": {
        "params": {
          "_token_amount": ": Amount of LP tokens to burn in the withdrawal",
          "i": ": Index value of the coin to withdraw",
          "min_amount": ": Minimum amount of coin to receive"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "set_rose_gas(uint256)": {
        "params": {
          "_rose_gas": "The gas limit to be set. The gas limit should be within the acceptable range defined by MIN_ROSE_gas and MAX_ROSE_gas."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "StableSwapThreePool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "A()": {
        "notice": "Getter for the amplification coefficient of the pool. The amplification coefficient A determines a pool’s tolerance for imbalance between the assets within it."
      },
      "add_liquidity(uint256[3],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "admin_balances(uint256)": {
        "notice": "Get the admin balance for a single coin in the pool."
      },
      "apply_new_fee()": {
        "notice": "Apply the previously committed new pool and admin fees for the pool."
      },
      "calc_token_amount(uint256[3],bool)": {
        "notice": "Calculate addition or reduction in token supply from a deposit or withdrawal Returns the expected amount of LP tokens received. This calculation accounts for slippage, but not fees."
      },
      "calc_withdraw_one_coin(uint256,uint256)": {
        "notice": "Calculate the amount received when withdrawing a single coin."
      },
      "commit_new_fee(uint256,uint256)": {
        "notice": "The method commits new fee params: these fees do not take immediate effect."
      },
      "constructor": {
        "notice": "constructor"
      },
      "donate_admin_fees()": {
        "notice": "Donate all admin fees to the pool’s liquidity providers."
      },
      "exchange(uint256,uint256,uint256,uint256)": {
        "notice": "Perform an exchange between two coins."
      },
      "get_dy(uint256,uint256,uint256)": {
        "notice": "Get the amount of coin j one would receive for swapping dx of coin i."
      },
      "get_dy_underlying(uint256,uint256,uint256)": {
        "notice": "Get the amount of coin j one would receive for swapping dx of coin i, in underlying units."
      },
      "get_virtual_price()": {
        "notice": "Current virtual price of the pool LP token relative to the underlying pool assets. Can get the absolute price by multiplying it with the price of the underlying assets. The method returns virtual_price as an integer with 1e18 precision."
      },
      "initialize(address[3],uint256,uint256,uint256,address,address)": {
        "notice": "initialize"
      },
      "kill_me()": {
        "notice": "Pause a pool by setting the is_killed boolean flag to True."
      },
      "ramp_A(uint256,uint256)": {
        "notice": "Ramp A up or down by setting a new A to take effect at a future point in time."
      },
      "remove_liquidity(uint256,uint256[3])": {
        "notice": "Withdraw coins from the pool"
      },
      "remove_liquidity_imbalance(uint256[3],uint256)": {
        "notice": "Withdraw coins from the pool in an imbalanced amount"
      },
      "remove_liquidity_one_coin(uint256,uint256,uint256)": {
        "notice": "Withdraw a single coin from the pool"
      },
      "revert_new_parameters()": {
        "notice": "Resets any previously committed new fees."
      },
      "set_rose_gas(uint256)": {
        "notice": "set the gas limit for transferring ROSE tokens."
      },
      "stop_rampget_A()": {
        "notice": "Stop ramping A up or down and sets A to current A."
      },
      "unkill_me()": {
        "notice": "Unpause a pool that was previously paused, re-enabling exchanges."
      },
      "withdraw_admin_fees()": {
        "notice": "Withdraws and transfers admin fees of the pool to the pool owner."
      }
    },
    "notice": "This contract facilitates liquidity addition, stable swapping, and liquidity removal in a stable swap system with three pools.It includes functions for adding liquidity, stable swapping, and removing liquidity, as well as parameter calculation for main operations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1693,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "PRECISION_MUL",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 1697,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "RATES",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 1725,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "coins",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)3_storage"
      },
      {
        "astId": 1729,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "balances",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 1731,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "fee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1733,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "admin_fee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1736,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "rose_gas",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1739,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "token",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IStableSwapLP)1290"
      },
      {
        "astId": 1744,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "support_ROSE",
        "offset": 20,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 1746,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "initial_A",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 1748,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "future_A",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 1750,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "initial_A_time",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 1752,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "future_A_time",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 1754,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "admin_actions_deadline",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 1756,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "future_fee",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 1758,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "future_admin_fee",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 1760,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "kill_deadline",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 1767,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "is_killed",
        "offset": 0,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 1771,
        "contract": "contracts/stableSwap/plain-pools/StableSwapThreePool.sol:StableSwapThreePool",
        "label": "isInitialized",
        "offset": 1,
        "slot": "26",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)3_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStableSwapLP)1290": {
        "encoding": "inplace",
        "label": "contract IStableSwapLP",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}