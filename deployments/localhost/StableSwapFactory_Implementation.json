{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAdminr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "ApplyOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "CommitOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swapContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenC",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "LP",
          "type": "address"
        }
      ],
      "name": "NewStableSwapPair",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LPFactory",
      "outputs": [
        {
          "internalType": "contract IStableSwapLPFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SwapThreePoolDeployer",
      "outputs": [
        {
          "internalType": "contract IStableSwapDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SwapTwoPoolDeployer",
      "outputs": [
        {
          "internalType": "contract IStableSwapDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapContract",
          "type": "address"
        }
      ],
      "name": "addPairInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_A",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_admin_fee",
          "type": "uint256"
        }
      ],
      "name": "createSwapPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenC",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_A",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_admin_fee",
          "type": "uint256"
        }
      ],
      "name": "createThreePoolPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getPairInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "swapContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "LPContract",
              "type": "address"
            }
          ],
          "internalType": "struct StableSwapFactory.StableSwapPairInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getThreePoolPairInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "swapContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token2",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "LPContract",
              "type": "address"
            }
          ],
          "internalType": "struct StableSwapFactory.StableSwapThreePoolPairInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStableSwapLPFactory",
          "name": "_LPFactory",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwapDeployer",
          "name": "_SwapTwoPoolDeployer",
          "type": "address"
        },
        {
          "internalType": "contract IStableSwapDeployer",
          "name": "_SwapThreePoolDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stableSwapPairInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "swapContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "LPContract",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapPairContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdminship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ff5f214b3e046dadfb3a2354498d5c9b407b9cf58251db336b0a20ba87ddca9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "1202952",
    "logsBloom": "0x
    "blockHash": "0x7f74c50510a45947801b25d76d32f593e21f00f91aafcf0510e8b0a51ac731e5",
    "transactionHash": "0x0ff5f214b3e046dadfb3a2354498d5c9b407b9cf58251db336b0a20ba87ddca9",
    "logs": [],
    "blockNumber": 21,
    "cumulativeGasUsed": "1202952",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e22a307acdeecde468fe7734fd170cc0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdminr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ApplyOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CommitOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"LP\",\"type\":\"address\"}],\"name\":\"NewStableSwapPair\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPFactory\",\"outputs\":[{\"internalType\":\"contract IStableSwapLPFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwapThreePoolDeployer\",\"outputs\":[{\"internalType\":\"contract IStableSwapDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwapTwoPoolDeployer\",\"outputs\":[{\"internalType\":\"contract IStableSwapDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapContract\",\"type\":\"address\"}],\"name\":\"addPairInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_admin_fee\",\"type\":\"uint256\"}],\"name\":\"createSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenC\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_admin_fee\",\"type\":\"uint256\"}],\"name\":\"createThreePoolPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getPairInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LPContract\",\"type\":\"address\"}],\"internalType\":\"struct StableSwapFactory.StableSwapPairInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getThreePoolPairInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LPContract\",\"type\":\"address\"}],\"internalType\":\"struct StableSwapFactory.StableSwapThreePoolPairInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableSwapLPFactory\",\"name\":\"_LPFactory\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwapDeployer\",\"name\":\"_SwapTwoPoolDeployer\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwapDeployer\",\"name\":\"_SwapThreePoolDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableSwapPairInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LPContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPairContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract manages the creations of stable swap pools and provides access to their information\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addPairInfo(address)\":{\"params\":{\"_swapContract\":\": Addresses of stable swap contracts.\"}},\"createSwapPair(address,address,uint256,uint256,uint256)\":{\"params\":{\"_A\":\": Amplification coefficient multiplied by n * (n - 1)\",\"_admin_fee\":\": Admin fee\",\"_fee\":\": Fee to charge for exchanges\",\"_tokenA\":\": Addresses of ERC20 conracts .\",\"_tokenB\":\": Addresses of ERC20 conracts .\"}},\"createThreePoolPair(address,address,address,uint256,uint256,uint256)\":{\"params\":{\"_A\":\": Amplification coefficient multiplied by n * (n - 1)\",\"_admin_fee\":\": Admin fee\",\"_fee\":\": Fee to charge for exchanges\",\"_tokenA\":\": Addresses of ERC20 conracts .\",\"_tokenB\":\": Addresses of ERC20 conracts .\",\"_tokenC\":\": Addresses of ERC20 conracts .\"}},\"getPairInfo(address,address)\":{\"params\":{\"_tokenA\":\": Addresses of ERC20 conracts.\",\"_tokenB\":\": Addresses of ERC20 conracts.\"}},\"getThreePoolPairInfo(address,address)\":{\"params\":{\"_tokenA\":\": Addresses of ERC20 conracts.\",\"_tokenB\":\": Addresses of ERC20 conracts.\"}},\"transferAdminship(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Stable swap factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPairInfo(address)\":{\"notice\":\"Adds information about a stable swap contract.\"},\"createSwapPair(address,address,uint256,uint256,uint256)\":{\"notice\":\"createSwapPair\"},\"createThreePoolPair(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"createThreePoolPair\"},\"getPairInfo(address,address)\":{\"notice\":\"Retrieves information of two pool.\"},\"getThreePoolPairInfo(address,address)\":{\"notice\":\"Retrieves information of three pool by two tokens.\"},\"initialize(address,address,address,address)\":{\"notice\":\"constructor _LPFactory: LP factory _SwapTwoPoolDeployer: Swap two pool deployer _SwapThreePoolDeployer: Swap three pool deployer\"}},\"notice\":\"A factory contract for creating new pool and providing pool information\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableSwap/StableSwapFactory.sol\":\"StableSwapFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(\\n                _initialized < version,\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x555e3d93be2d7930c349f530b2076a4dbd5c558266797cea4a758f7de3c9e2e7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IStableSwap {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the LP token of the two pool\\r\\n     */\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balances of each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function balances(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of coins within the pool\\r\\n     */\\r\\n    function N_COINS() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the exchange rates for each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function RATES(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the address of coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the precision multipliers for each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function PRECISION_MUL(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The pool swap fee.\\r\\n     * The method returns fee as an integer with 1e10 precision.\\r\\n     */\\r\\n    function fee() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The percentage of the swap fee that is taken as an admin fee.\\r\\n     * The method returns an integer with with 1e10 precision.\\r\\n     */\\r\\n    function admin_fee() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for the amplification coefficient of the pool.\\r\\n     * The amplification coefficient A determines a pool\\u2019s tolerance for imbalance between the assets within it.\\r\\n     */\\r\\n    function A() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\\r\\n    * Can get the absolute price by multiplying it with the price of the underlying assets.\\r\\n    * The method returns virtual_price as an integer with 1e18 precision.\\r\\n    */\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\\r\\n     * Returns the expected amount of LP tokens received. \\r\\n     * This calculation accounts for slippage, but not fees.\\r\\n     * @param amounts: Amount of each coin being deposited\\r\\n     * @param deposit: Set True for deposits, False for withdrawals\\r\\n     */\\r\\n    function calc_token_amount(uint256[2] memory amounts, bool deposit) external view returns (uint256);\\r\\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\\r\\n     * @param i: Index of coin to swap from\\r\\n     * @param j: Index of coin to swap to\\r\\n     * @param dx: Amount of coin i to swap\\r\\n     */\\r\\n    function get_dy(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\\r\\n    * @param i Index of coin to swap from\\r\\n    * @param j Index of coin to swap to\\r\\n    * @param dx Amount of coin i to swap\\r\\n    */\\r\\n    function get_dy_underlying(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount received when withdrawing a single coin.\\r\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\r\\n     * @param i: Index value of the coin to withdraw\\r\\n     */\\r\\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit coins into the pool\\r\\n     * @param amounts: Amount of each coin being deposited\\r\\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\\r\\n     */\\r\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Perform an exchange between two coins.\\r\\n     * @param i: Index of coin to swap from\\r\\n     * @param j: Index of coin to swap to\\r\\n     * @param dx: Amount of coin i to swap\\r\\n     * @param min_dy: \\tMinimum amount of j to receive\\r\\n     */\\r\\n    function exchange(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) external payable;\\r\\n\\r\\n     /**\\r\\n     * @notice Withdraw coins from the pool\\r\\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\\r\\n     * @param min_amounts: Minimum amounts of underlying coins to receive\\r\\n     */\\r\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external;\\r\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw coins from the pool in an imbalanced amount\\r\\n     * @param amounts: List of amounts of underlying coins to withdraw\\r\\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\\r\\n     */\\r\\n    function remove_liquidity_imbalance(uint256[2] memory amounts, uint256 max_burn_amount) external;\\r\\n    function remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw a single coin from the pool\\r\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\r\\n     * @param i: Index value of the coin to withdraw\\r\\n     * @param min_amount: Minimum amount of coin to receive\\r\\n     */\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 _token_amount,\\r\\n        uint256 i,\\r\\n        uint256 min_amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7d247b3b5a55e627ed93503380327de7e4b508f529a423f39dcf26cc9cb10589\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IStableSwapDeployer {\\n\\n    /**\\n     * @dev onlyOwner\\n     * @param _tokenA: Addresses of ERC20 conracts .\\n     * @param _tokenB: Addresses of ERC20 conracts .\\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee: Fee to charge for exchanges\\n     * @param _admin_fee: Admin fee\\n     * @param _admin: Admin\\n     * @param _LP: LP\\n     */\\n    function createSwapPair(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee,\\n        address _admin,\\n        address _LP\\n    ) external returns (address);\\n\\n    /**\\n     * @dev onlyOwner\\n     * @param _tokenA: Addresses of ERC20 conracts .\\n     * @param _tokenB: Addresses of ERC20 conracts .\\n     * @param _tokenC: Addresses of ERC20 conracts .\\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee: Fee to charge for exchanges\\n     * @param _admin_fee: Admin fee\\n     * @param _admin: Admin\\n     * @param _LP: LP\\n     */\\n    function createSwapPair(\\n        address _tokenA,\\n        address _tokenB,\\n        address _tokenC,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee,\\n        address _admin,\\n        address _LP\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xfe47eb8acfd144792ce0f3666ad68395a569fd42a4ca7e9f483cc76ed7bee990\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IStableSwapLP {\\n    /**\\n     * @notice Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates new tokens and assigns them to a specified address.\\n     * @param _to Address to which the newly created tokens will be assigned.\\n     * @param _amount Amount of tokens to be created and assigned.\\n     */\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burns a specific amount of tokens from a specified address.\\n     * @param _to Address from which tokens will be burned.\\n     * @param _amount Amount of tokens to be burned.\\n     */\\n    function burnFrom(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets a new minter address.\\n     * @param _newMinter Address of the new minter.\\n     */\\n    function setMinter(address _newMinter) external;\\n}\\n\",\"keccak256\":\"0xc0faa6d18f8b226a88026651b8e3b1dda1bb3eea3655db9de227654e53e0a83d\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapLPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IStableSwapLPFactory {\\n\\n    /**\\n     * @notice createSwapLP\\n     * @param _tokenA: Addresses of ERC20 conracts .\\n     * @param _tokenB: Addresses of ERC20 conracts .\\n     * @param _tokenC: Addresses of ERC20 conracts .\\n     * @param _minter: Minter address\\n     */\\n    function createSwapLP(\\n        address _tokenA,\\n        address _tokenB,\\n        address _tokenC,\\n        address _minter\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x445ddca54dab304848df8de1e1693e974db827c719a6d6c9b20ce9ec3ad5a641\",\"license\":\"MIT\"},\"contracts/stableSwap/StableSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/IStableSwap.sol\\\";\\nimport \\\"../interfaces/IStableSwapLP.sol\\\";\\nimport \\\"../interfaces/IStableSwapDeployer.sol\\\";\\nimport \\\"../interfaces/IStableSwapLPFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Stable swap factory\\n * @notice A factory contract for creating new pool and providing pool information\\n * @dev  This contract manages the creations of stable swap pools and provides access to their information\\n */\\n\\ncontract StableSwapFactory is Initializable {\\n    struct StableSwapPairInfo {\\n        address swapContract;\\n        address token0;\\n        address token1;\\n        address LPContract;\\n    }\\n    struct StableSwapThreePoolPairInfo {\\n        address swapContract;\\n        address token0;\\n        address token1;\\n        address token2;\\n        address LPContract;\\n    }\\n\\n    mapping(address => mapping(address => mapping(address => StableSwapThreePoolPairInfo)))\\n        public stableSwapPairInfo;\\n    // Query three pool pair infomation by two tokens.\\n    mapping(address => mapping(address => StableSwapThreePoolPairInfo)) threePoolInfo;\\n    mapping(uint256 => address) public swapPairContract;\\n\\n    IStableSwapLPFactory public LPFactory;\\n    IStableSwapDeployer public SwapTwoPoolDeployer;\\n    IStableSwapDeployer public SwapThreePoolDeployer;\\n\\n    address constant ZEROADDRESS = address(0);\\n    address public admin;\\n\\n    uint256 public pairLength;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Admin only\\\");\\n        _;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          EVENT               \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    event CommitOwnership(address admin);\\n    event ApplyOwnership(address admin);\\n    event NewStableSwapPair(\\n        address indexed swapContract,\\n        address tokenA,\\n        address tokenB,\\n        address tokenC,\\n        address LP\\n    );\\n    event AdminshipTransferred(\\n        address indexed previousAdminr,\\n        address indexed newAdmin\\n    );\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          CONSTRUCTOR         \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice constructor\\n     * _LPFactory: LP factory\\n     * _SwapTwoPoolDeployer: Swap two pool deployer\\n     * _SwapThreePoolDeployer: Swap three pool deployer\\n     */\\n\\n    function initialize(\\n        IStableSwapLPFactory _LPFactory,\\n        IStableSwapDeployer _SwapTwoPoolDeployer,\\n        IStableSwapDeployer _SwapThreePoolDeployer,\\n        address _admin\\n    ) external initializer {\\n        LPFactory = _LPFactory;\\n        SwapTwoPoolDeployer = _SwapTwoPoolDeployer;\\n        SwapThreePoolDeployer = _SwapThreePoolDeployer;\\n        admin = _admin;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          ADMIN FUNCTIONS     \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice createSwapPair\\n     * @param _tokenA: Addresses of ERC20 conracts .\\n     * @param _tokenB: Addresses of ERC20 conracts .\\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee: Fee to charge for exchanges\\n     * @param _admin_fee: Admin fee\\n     */\\n\\n    function createSwapPair(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee\\n    ) external onlyAdmin {\\n        require(\\n            _tokenA != ZEROADDRESS &&\\n                _tokenB != ZEROADDRESS &&\\n                _tokenA != _tokenB,\\n            \\\"Illegal token\\\"\\n        );\\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\\n        address LP = LPFactory.createSwapLP(t0, t1, ZEROADDRESS, address(this));\\n        address swapContract = SwapTwoPoolDeployer.createSwapPair(\\n            t0,\\n            t1,\\n            _A,\\n            _fee,\\n            _admin_fee,\\n            msg.sender,\\n            LP\\n        );\\n        IStableSwapLP(LP).setMinter(swapContract);\\n        addPairInfoInternal(swapContract, t0, t1, ZEROADDRESS, LP);\\n    }\\n\\n    /**\\n     * @notice Sorts three token addresses in a consistent order.\\n     * @param tokenA: Addresses of ERC20 conracts .\\n     * @param tokenB: Addresses of ERC20 conracts .\\n     */\\n    function sortTokens(\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Adds information about a stable swap pool pair to the contract's storage.\\n     * @param _swapContract: Addresses of stable swap pool contracts .\\n     * @param _t0: Addresses of ERC20 conracts .\\n     * @param _t1: Addresses of ERC20 conracts .\\n     * @param _t2: Addresses of ERC20 conracts .\\n     * @param _LP: Addresses of LP token for stable swap pool contracts .\\n     */\\n    function addPairInfoInternal(\\n        address _swapContract,\\n        address _t0,\\n        address _t1,\\n        address _t2,\\n        address _LP\\n    ) internal {\\n        StableSwapThreePoolPairInfo storage info = stableSwapPairInfo[_t0][_t1][\\n            _t2\\n        ];\\n        info.swapContract = _swapContract;\\n        info.token0 = _t0;\\n        info.token1 = _t1;\\n        info.token2 = _t2;\\n        info.LPContract = _LP;\\n        swapPairContract[pairLength] = _swapContract;\\n        pairLength += 1;\\n        if (_t2 != ZEROADDRESS) {\\n            addThreePoolPairInfo(_t0, _t1, _t2, info);\\n        }\\n\\n        emit NewStableSwapPair(_swapContract, _t0, _t1, _t2, _LP);\\n    }\\n\\n    /**\\n     * @notice createThreePoolPair\\n     * @param _tokenA: Addresses of ERC20 conracts .\\n     * @param _tokenB: Addresses of ERC20 conracts .\\n     * @param _tokenC: Addresses of ERC20 conracts .\\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee: Fee to charge for exchanges\\n     * @param _admin_fee: Admin fee\\n     */\\n    function createThreePoolPair(\\n        address _tokenA,\\n        address _tokenB,\\n        address _tokenC,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee\\n    ) external onlyAdmin {\\n        require(\\n            _tokenA != ZEROADDRESS &&\\n                _tokenB != ZEROADDRESS &&\\n                _tokenC != ZEROADDRESS &&\\n                _tokenA != _tokenB &&\\n                _tokenA != _tokenC &&\\n                _tokenB != _tokenC,\\n            \\\"Illegal token\\\"\\n        );\\n        (address t0, address t1, address t2) = sortTokens(\\n            _tokenA,\\n            _tokenB,\\n            _tokenC\\n        );\\n        address LP = LPFactory.createSwapLP(t0, t1, t2, address(this));\\n        address swapContract = SwapThreePoolDeployer.createSwapPair(\\n            t0,\\n            t1,\\n            t2,\\n            _A,\\n            _fee,\\n            _admin_fee,\\n            msg.sender,\\n            LP\\n        );\\n        IStableSwapLP(LP).setMinter(swapContract);\\n        addPairInfoInternal(swapContract, t0, t1, t2, LP);\\n    }\\n\\n    /**\\n     * @notice Adds information about a stable swap contract.\\n     * @param _swapContract: Addresses of stable swap contracts.\\n     */\\n    function addPairInfo(address _swapContract) external onlyAdmin {\\n        IStableSwap swap = IStableSwap(_swapContract);\\n        uint256 N_COINS = swap.N_COINS();\\n        if (N_COINS == 2) {\\n            addPairInfoInternal(\\n                _swapContract,\\n                swap.coins(0),\\n                swap.coins(1),\\n                ZEROADDRESS,\\n                swap.token()\\n            );\\n        } else if (N_COINS == 3) {\\n            addPairInfoInternal(\\n                _swapContract,\\n                swap.coins(0),\\n                swap.coins(1),\\n                swap.coins(2),\\n                swap.token()\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Sorts three token addresses in a consistent order.\\n     * @param tokenA: Addresses of ERC20 conracts .\\n     * @param tokenB: Addresses of ERC20 conracts .\\n     * @param tokenC: Addresses of ERC20 conracts .\\n     */\\n    function sortTokens(\\n        address tokenA,\\n        address tokenB,\\n        address tokenC\\n    ) internal pure returns (address, address, address) {\\n        require(\\n            tokenA != tokenB && tokenA != tokenC && tokenB != tokenC,\\n            \\\"IDENTICAL_ADDRESSES\\\"\\n        );\\n        address tmp;\\n        if (tokenA > tokenB) {\\n            tmp = tokenA;\\n            tokenA = tokenB;\\n            tokenB = tmp;\\n        }\\n        if (tokenB > tokenC) {\\n            tmp = tokenB;\\n            tokenB = tokenC;\\n            tokenC = tmp;\\n            if (tokenA > tokenB) {\\n                tmp = tokenA;\\n                tokenA = tokenB;\\n                tokenB = tmp;\\n            }\\n        }\\n        return (tokenA, tokenB, tokenC);\\n    }\\n\\n    /**\\n     * @notice Adds stable swap three pool pair information,facilitating query three pool pair by two tokens .\\n     * @param _t0: Addresses of ERC20 conracts .\\n     * @param _t1: Addresses of ERC20 conracts .\\n     * @param _t2: Addresses of ERC20 conracts .\\n     * @param info: Addresses of three pool pair information contracts .\\n     */\\n    function addThreePoolPairInfo(\\n        address _t0,\\n        address _t1,\\n        address _t2,\\n        StableSwapThreePoolPairInfo memory info\\n    ) internal {\\n        threePoolInfo[_t0][_t1] = info;\\n        threePoolInfo[_t0][_t2] = info;\\n        threePoolInfo[_t1][_t2] = info;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551         VIEW FUNCTIONS       \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice Retrieves information of two pool.\\n     * @param _tokenA : Addresses of ERC20 conracts.\\n     * @param _tokenB : Addresses of ERC20 conracts.\\n     */\\n    function getPairInfo(\\n        address _tokenA,\\n        address _tokenB\\n    ) external view returns (StableSwapPairInfo memory info) {\\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\\n        StableSwapThreePoolPairInfo memory pairInfo = stableSwapPairInfo[t0][\\n            t1\\n        ][ZEROADDRESS];\\n        info.swapContract = pairInfo.swapContract;\\n        info.token0 = pairInfo.token0;\\n        info.token1 = pairInfo.token1;\\n        info.LPContract = pairInfo.LPContract;\\n    }\\n\\n    /**\\n     * @notice Retrieves information of three pool by two tokens.\\n     * @param _tokenA : Addresses of ERC20 conracts.\\n     * @param _tokenB : Addresses of ERC20 conracts.\\n     */\\n    function getThreePoolPairInfo(\\n        address _tokenA,\\n        address _tokenB\\n    ) external view returns (StableSwapThreePoolPairInfo memory info) {\\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\\n        info = threePoolInfo[t0][t1];\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferAdminship(address newAdmin) public virtual onlyAdmin {\\n        require(\\n            newAdmin != address(0),\\n            \\\"Ownable: new Admin is the zero address\\\"\\n        );\\n        _transferAdminship(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Transfers Adminship of the contract to a new account (`newAdmin`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferAdminship(address _admin) internal virtual {\\n        address oldAdmin = admin;\\n        admin = _admin;\\n        emit AdminshipTransferred(oldAdmin, _admin);\\n    }\\n}\\n\",\"keccak256\":\"0xa31e28da6a7306d766acf090dea394664e7c4875577ba0d9e1b766dfd6e67b55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576114cc908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826314c77a6d14610cf95750816321420c4b14610cd157816338802f1a14610c3b578163400f7a1e14610b545781634205381b146108825781635be7cc16146107a2578163636e66a01461077157816368fae3f314610749578163923093cb14610695578163b3c0e846146103d257838263ec69a024146101ec57508163f851a440146101c4578163f8c8765e146100e2575063fcc9136c146100c157600080fd5b346100de57816003193601126100de576020906008549051908152f35b5080fd5b9050346101c05760803660031901126101c05780356001600160a01b03908181168091036101bc57610112610d35565b9161011b610d4b565b606435938285168095036101b757829061013361147f565b96876101a5575b6001600160a01b031995868254161790551683600554161760055516816006541617600655600754161760075561016f575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b895461ff001916610100178a5561013a565b600080fd5b8480fd5b8280fd5b5050346100de57816003193601126100de576020906001600160a01b03600754169051908152f35b929150346103ce5760a03660031901126103ce57610208610d1f565b918361024e610215610d35565b6001600160a01b039561022d87600754163314610e17565b61024987821680151590816103c2575b816103b5575b50610e63565b610f1a565b93909285825416815196635920110d60e11b88528086169182858a0152818816908160248b0152600060448b01523060648b01528960848160209d8e945af198891561038a57908a91879a610394575b5090899160e4846005541695898689519687958694639013148d60e01b86528d86015260248501526044356044850152606435606485015260843560848501523360a485015216978860c48401525af1998a1561038a57869a61035b575b5050813b156101bc5760248986809486519788958694637e51dad560e11b865216908401525af1908115610352575061033e575b505061033b93610f41565b80f35b61034790610d61565b6101bc578438610330565b513d84823e3d90fd5b61037b929a50803d10610383575b6103738183610da7565b810190610eaf565b9738806102fc565b503d610369565b84513d88823e3d90fd5b826103ad92939b503d8c11610383576103738183610da7565b98903861029e565b9050888416141538610243565b848a161515915061023d565b5050fd5b9050346101c05760209081600319360112610691576103ef610d1f565b906001600160a01b0361040781600754163314610e17565b8216918451630293577560e41b815284818481875afa9081156104cf578791610660575b5060028103610521575084519163c661065760e01b80845287828501528584602481885afa9384156104f8578894610502575b5086519081526001828201528581602481885afa9485156104f857869189966104d9575b508751637e062a3560e11b815292839182905afa9485156104cf5761033b965087956104b0575b5050610f41565b6104c7929550803d10610383576103738183610da7565b9238806104a9565b86513d89823e3d90fd5b6104f1919650823d8411610383576103738183610da7565b9438610482565b87513d8a823e3d90fd5b61051a919450863d8811610383576103738183610da7565b923861045e565b600314610531575b505050505080f35b84519063c661065760e01b9283835287818401528583602481885afa9283156104f8578893610641575b508651938085526001828601528685602481895afa948515610618578995610622575b5087519081526002828201528681602481895afa9586156106185787918a976105f9575b508851637e062a3560e11b815292839182905afa9586156104f8576105d0975088966105da575b5050611032565b3880808080610529565b6105f1929650803d10610383576103738183610da7565b9338806105c9565b610611919750823d8411610383576103738183610da7565b95386105a2565b88513d8b823e3d90fd5b61063a919550873d8911610383576103738183610da7565b933861057e565b610659919350863d8811610383576103738183610da7565b913861055b565b90508481813d831161068a575b6106778183610da7565b8101031261068657513861042b565b8680fd5b503d61066d565b8380fd5b5050346100de57806003193601126100de5760a0916106e76106b5610d1f565b6106bd610d35565b9083608086516106cc81610d8b565b82815282602082015282888201528260608201520152610f1a565b90836001600160a01b03938480931681526002602052209116600052602052608061071483600020610dc9565b835193838251168552836020830151166020860152838183015116908501528260608201511660608501520151166080820152f35b5050346100de57816003193601126100de576020906001600160a01b03600554169051908152f35b9050346101c05760203660031901126101c057816020936001600160a01b0392358152600385522054169051908152f35b9050346101c05760203660031901126101c0576107bd610d1f565b90600754906001600160a01b03808316936107d9853314610e17565b169384156108195750506001600160a01b03191682176007557f2931ebb3d190545dcf6801c37aa686b74f2e1000e753d0fac6e471a2aa5a62138380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e65772041646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8383346100de5760c03660031901126100de5761089d610d1f565b6108a5610d35565b6108ad610d4b565b6001600160a01b03956108c587600754163314610e17565b8684169182151580610b49575b80610b3e575b80610b32575b80610b26575b80610b18575b6108f390610e63565b80948481948a8216908181141580610b0c575b80610b00575b61091590610ece565b11610af4575b5050878116908189861611610ad7575b505080548551635920110d60e11b81526001600160a01b03808516828501908152818716602082810191909152918816604082015230606082015290999197928a91899184169082908c90829060800103925af1968715610acd57888a918199610a87575b50839183610104888894838e818f8f829081600654169c519b8c9a8b99634cedbfc760e01b8b5216908901521660248701521660448501526064356064850152608435608485015260a43560a48501523360c485015216968760e48401525af19a8b15610a7d578a9b610a5e575b5050803b15610a5a579060248a8a809486519788958694637e51dad560e11b865216908401525af1908115610a515750610a3e575b5061033b9495611032565b94610a4b61033b96610d61565b94610a33565b513d88823e3d90fd5b8880fd5b610a75929b50803d10610383576103738183610da7565b988a806109fe565b84513d8c823e3d90fd5b8899509183888888948380808b99883d8a11610ac6575b610aa88183610da7565b8101610ab391610eaf565b9f50505050945050505091989798610990565b503d610a9e565b82513d8a823e3d90fd5b939450839083891611610aeb575b8061092b565b91925087610ae5565b9094509250888061091b565b50848c1682141561090c565b508b8516811415610906565b5083881681891614156108ea565b508781168314156108e4565b508784168314156108de565b5087811615156108d8565b5087841615156108d2565b8383346100de57806003193601126100de57610b6e610d1f565b610b76610d35565b928251936080850185811067ffffffffffffffff821117610c2857608096509084929183528186526020808701838152610bbd8589019385855260608a0197868952610f1a565b91908a610bf26001600160a01b039a8b9889968780961682526001895285838320911682528852818120818052885220610dc9565b82815116809c52828682015116845282898201511687520151168752855198895251169087015251169084015251166060820152f35b634e487b7160e01b835260418752602483fd5b9050346101c05760603660031901126101c0579160a09282610c5b610d1f565b92610c64610d35565b610c6c610d4b565b906001600160a01b03809616835260016020528584842091168352602052848383209116825260205220908282541693836001840154169380600285015416928160038601541694015416938151958652602086015284015260608301526080820152f35b5050346100de57816003193601126100de576020906001600160a01b03600654169051908152f35b8434610d1c5780600319360112610d1c57506001600160a01b0360209254168152f35b80fd5b600435906001600160a01b03821682036101b757565b602435906001600160a01b03821682036101b757565b604435906001600160a01b03821682036101b757565b67ffffffffffffffff8111610d7557604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117610d7557604052565b90601f8019910116810190811067ffffffffffffffff821117610d7557604052565b90604051610dd681610d8b565b6080819360046001600160a01b0391828154168552826001820154166020860152826002820154166040860152826003820154166060860152015416910152565b15610e1e57565b60405162461bcd60e51b815260206004820152600a60248201527f41646d696e206f6e6c79000000000000000000000000000000000000000000006044820152606490fd5b15610e6a57565b60405162461bcd60e51b815260206004820152600d60248201527f496c6c6567616c20746f6b656e000000000000000000000000000000000000006044820152606490fd5b908160209103126101b757516001600160a01b03811681036101b75790565b15610ed557565b60405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f414444524553534553000000000000000000000000006044820152606490fd5b6001600160a01b03808316908216610f3482821415610ece565b1015610f3d5791565b9091565b919290926001600160a01b03809416926000918483526001602052604091868385209216918285526020528284208480526020528683852091169660046001600160a01b0319928984825416178155600181018985825416179055600281018585825416179055600381018481541690550195169485828254161790556008548452600360205286838520918254161790556008546001810180911161101e576008558151948552602085015283015260608201527f48dc7a1b156fe3e70ed5ed0afcb307661905edf536f15bb5786e327ea193353290608090a2565b634e487b7160e01b84526011600452602484fd5b926001600160a01b038216600052600160205260406000206001600160a01b03841660005260205260406000206001600160a01b0382166000526020526001600160a01b036040600020941694856001600160a01b0319865416178555600185016001600160a01b0384166001600160a01b0319825416179055600285016001600160a01b0385166001600160a01b0319825416179055600385016001600160a01b0383166001600160a01b0319825416179055600485016001600160a01b0382166001600160a01b031982541617905560085460005260036020526040600020866001600160a01b031982541617905560085491600183018093116113f7577f48dc7a1b156fe3e70ed5ed0afcb307661905edf536f15bb5786e327ea19335329561119c936008556001600160a01b0382166111a1575b50604080516001600160a01b039586168152958516602087015290841690850152909116606083015281906080820190565b0390a2565b6111aa90610dc9565b6001600160a01b038516600052600260205260406000206001600160a01b03871660005260205260406000206001600160a01b038251166001600160a01b03198254161781556001600160a01b036020830151166001600160a01b03196001830154161760018201556001600160a01b036040830151166001600160a01b03196002830154161760028201556001600160a01b036060830151166001600160a01b031960038301541617600382015560046001600160a01b036080840151166001600160a01b03198284015416179101556001600160a01b038516600052600260205260406000206001600160a01b038316600052602052600460406000206001600160a01b038351166001600160a01b0319825416178155600181016001600160a01b036020850151166001600160a01b0319825416179055600281016001600160a01b036040850151166001600160a01b0319825416179055600381016001600160a01b036060850151166001600160a01b0319825416179055016001600160a01b036080830151166001600160a01b03198254161790556001600160a01b038616600052600260205260406000206001600160a01b0383166000526020526001600160a01b03608060046040600020838551166001600160a01b031982541617815560018101846020870151166001600160a01b031982541617905560028101846040870151166001600160a01b031982541617905560038101846060870151166001600160a01b031982541617905501920151166001600160a01b03198254161790553861116a565b634e487b7160e01b600052601160045260246000fd5b1561141457565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b60005460ff8160081c166000146114a1575061149c303b1561140d565b600090565b806114b2600160ff8194161061140d565b60ff19161760005560019056fea164736f6c6343000818000a",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826314c77a6d14610cf95750816321420c4b14610cd157816338802f1a14610c3b578163400f7a1e14610b545781634205381b146108825781635be7cc16146107a2578163636e66a01461077157816368fae3f314610749578163923093cb14610695578163b3c0e846146103d257838263ec69a024146101ec57508163f851a440146101c4578163f8c8765e146100e2575063fcc9136c146100c157600080fd5b346100de57816003193601126100de576020906008549051908152f35b5080fd5b9050346101c05760803660031901126101c05780356001600160a01b03908181168091036101bc57610112610d35565b9161011b610d4b565b606435938285168095036101b757829061013361147f565b96876101a5575b6001600160a01b031995868254161790551683600554161760055516816006541617600655600754161760075561016f575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b895461ff001916610100178a5561013a565b600080fd5b8480fd5b8280fd5b5050346100de57816003193601126100de576020906001600160a01b03600754169051908152f35b929150346103ce5760a03660031901126103ce57610208610d1f565b918361024e610215610d35565b6001600160a01b039561022d87600754163314610e17565b61024987821680151590816103c2575b816103b5575b50610e63565b610f1a565b93909285825416815196635920110d60e11b88528086169182858a0152818816908160248b0152600060448b01523060648b01528960848160209d8e945af198891561038a57908a91879a610394575b5090899160e4846005541695898689519687958694639013148d60e01b86528d86015260248501526044356044850152606435606485015260843560848501523360a485015216978860c48401525af1998a1561038a57869a61035b575b5050813b156101bc5760248986809486519788958694637e51dad560e11b865216908401525af1908115610352575061033e575b505061033b93610f41565b80f35b61034790610d61565b6101bc578438610330565b513d84823e3d90fd5b61037b929a50803d10610383575b6103738183610da7565b810190610eaf565b9738806102fc565b503d610369565b84513d88823e3d90fd5b826103ad92939b503d8c11610383576103738183610da7565b98903861029e565b9050888416141538610243565b848a161515915061023d565b5050fd5b9050346101c05760209081600319360112610691576103ef610d1f565b906001600160a01b0361040781600754163314610e17565b8216918451630293577560e41b815284818481875afa9081156104cf578791610660575b5060028103610521575084519163c661065760e01b80845287828501528584602481885afa9384156104f8578894610502575b5086519081526001828201528581602481885afa9485156104f857869189966104d9575b508751637e062a3560e11b815292839182905afa9485156104cf5761033b965087956104b0575b5050610f41565b6104c7929550803d10610383576103738183610da7565b9238806104a9565b86513d89823e3d90fd5b6104f1919650823d8411610383576103738183610da7565b9438610482565b87513d8a823e3d90fd5b61051a919450863d8811610383576103738183610da7565b923861045e565b600314610531575b505050505080f35b84519063c661065760e01b9283835287818401528583602481885afa9283156104f8578893610641575b508651938085526001828601528685602481895afa948515610618578995610622575b5087519081526002828201528681602481895afa9586156106185787918a976105f9575b508851637e062a3560e11b815292839182905afa9586156104f8576105d0975088966105da575b5050611032565b3880808080610529565b6105f1929650803d10610383576103738183610da7565b9338806105c9565b610611919750823d8411610383576103738183610da7565b95386105a2565b88513d8b823e3d90fd5b61063a919550873d8911610383576103738183610da7565b933861057e565b610659919350863d8811610383576103738183610da7565b913861055b565b90508481813d831161068a575b6106778183610da7565b8101031261068657513861042b565b8680fd5b503d61066d565b8380fd5b5050346100de57806003193601126100de5760a0916106e76106b5610d1f565b6106bd610d35565b9083608086516106cc81610d8b565b82815282602082015282888201528260608201520152610f1a565b90836001600160a01b03938480931681526002602052209116600052602052608061071483600020610dc9565b835193838251168552836020830151166020860152838183015116908501528260608201511660608501520151166080820152f35b5050346100de57816003193601126100de576020906001600160a01b03600554169051908152f35b9050346101c05760203660031901126101c057816020936001600160a01b0392358152600385522054169051908152f35b9050346101c05760203660031901126101c0576107bd610d1f565b90600754906001600160a01b03808316936107d9853314610e17565b169384156108195750506001600160a01b03191682176007557f2931ebb3d190545dcf6801c37aa686b74f2e1000e753d0fac6e471a2aa5a62138380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e65772041646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8383346100de5760c03660031901126100de5761089d610d1f565b6108a5610d35565b6108ad610d4b565b6001600160a01b03956108c587600754163314610e17565b8684169182151580610b49575b80610b3e575b80610b32575b80610b26575b80610b18575b6108f390610e63565b80948481948a8216908181141580610b0c575b80610b00575b61091590610ece565b11610af4575b5050878116908189861611610ad7575b505080548551635920110d60e11b81526001600160a01b03808516828501908152818716602082810191909152918816604082015230606082015290999197928a91899184169082908c90829060800103925af1968715610acd57888a918199610a87575b50839183610104888894838e818f8f829081600654169c519b8c9a8b99634cedbfc760e01b8b5216908901521660248701521660448501526064356064850152608435608485015260a43560a48501523360c485015216968760e48401525af19a8b15610a7d578a9b610a5e575b5050803b15610a5a579060248a8a809486519788958694637e51dad560e11b865216908401525af1908115610a515750610a3e575b5061033b9495611032565b94610a4b61033b96610d61565b94610a33565b513d88823e3d90fd5b8880fd5b610a75929b50803d10610383576103738183610da7565b988a806109fe565b84513d8c823e3d90fd5b8899509183888888948380808b99883d8a11610ac6575b610aa88183610da7565b8101610ab391610eaf565b9f50505050945050505091989798610990565b503d610a9e565b82513d8a823e3d90fd5b939450839083891611610aeb575b8061092b565b91925087610ae5565b9094509250888061091b565b50848c1682141561090c565b508b8516811415610906565b5083881681891614156108ea565b508781168314156108e4565b508784168314156108de565b5087811615156108d8565b5087841615156108d2565b8383346100de57806003193601126100de57610b6e610d1f565b610b76610d35565b928251936080850185811067ffffffffffffffff821117610c2857608096509084929183528186526020808701838152610bbd8589019385855260608a0197868952610f1a565b91908a610bf26001600160a01b039a8b9889968780961682526001895285838320911682528852818120818052885220610dc9565b82815116809c52828682015116845282898201511687520151168752855198895251169087015251169084015251166060820152f35b634e487b7160e01b835260418752602483fd5b9050346101c05760603660031901126101c0579160a09282610c5b610d1f565b92610c64610d35565b610c6c610d4b565b906001600160a01b03809616835260016020528584842091168352602052848383209116825260205220908282541693836001840154169380600285015416928160038601541694015416938151958652602086015284015260608301526080820152f35b5050346100de57816003193601126100de576020906001600160a01b03600654169051908152f35b8434610d1c5780600319360112610d1c57506001600160a01b0360209254168152f35b80fd5b600435906001600160a01b03821682036101b757565b602435906001600160a01b03821682036101b757565b604435906001600160a01b03821682036101b757565b67ffffffffffffffff8111610d7557604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117610d7557604052565b90601f8019910116810190811067ffffffffffffffff821117610d7557604052565b90604051610dd681610d8b565b6080819360046001600160a01b0391828154168552826001820154166020860152826002820154166040860152826003820154166060860152015416910152565b15610e1e57565b60405162461bcd60e51b815260206004820152600a60248201527f41646d696e206f6e6c79000000000000000000000000000000000000000000006044820152606490fd5b15610e6a57565b60405162461bcd60e51b815260206004820152600d60248201527f496c6c6567616c20746f6b656e000000000000000000000000000000000000006044820152606490fd5b908160209103126101b757516001600160a01b03811681036101b75790565b15610ed557565b60405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f414444524553534553000000000000000000000000006044820152606490fd5b6001600160a01b03808316908216610f3482821415610ece565b1015610f3d5791565b9091565b919290926001600160a01b03809416926000918483526001602052604091868385209216918285526020528284208480526020528683852091169660046001600160a01b0319928984825416178155600181018985825416179055600281018585825416179055600381018481541690550195169485828254161790556008548452600360205286838520918254161790556008546001810180911161101e576008558151948552602085015283015260608201527f48dc7a1b156fe3e70ed5ed0afcb307661905edf536f15bb5786e327ea193353290608090a2565b634e487b7160e01b84526011600452602484fd5b926001600160a01b038216600052600160205260406000206001600160a01b03841660005260205260406000206001600160a01b0382166000526020526001600160a01b036040600020941694856001600160a01b0319865416178555600185016001600160a01b0384166001600160a01b0319825416179055600285016001600160a01b0385166001600160a01b0319825416179055600385016001600160a01b0383166001600160a01b0319825416179055600485016001600160a01b0382166001600160a01b031982541617905560085460005260036020526040600020866001600160a01b031982541617905560085491600183018093116113f7577f48dc7a1b156fe3e70ed5ed0afcb307661905edf536f15bb5786e327ea19335329561119c936008556001600160a01b0382166111a1575b50604080516001600160a01b039586168152958516602087015290841690850152909116606083015281906080820190565b0390a2565b6111aa90610dc9565b6001600160a01b038516600052600260205260406000206001600160a01b03871660005260205260406000206001600160a01b038251166001600160a01b03198254161781556001600160a01b036020830151166001600160a01b03196001830154161760018201556001600160a01b036040830151166001600160a01b03196002830154161760028201556001600160a01b036060830151166001600160a01b031960038301541617600382015560046001600160a01b036080840151166001600160a01b03198284015416179101556001600160a01b038516600052600260205260406000206001600160a01b038316600052602052600460406000206001600160a01b038351166001600160a01b0319825416178155600181016001600160a01b036020850151166001600160a01b0319825416179055600281016001600160a01b036040850151166001600160a01b0319825416179055600381016001600160a01b036060850151166001600160a01b0319825416179055016001600160a01b036080830151166001600160a01b03198254161790556001600160a01b038616600052600260205260406000206001600160a01b0383166000526020526001600160a01b03608060046040600020838551166001600160a01b031982541617815560018101846020870151166001600160a01b031982541617905560028101846040870151166001600160a01b031982541617905560038101846060870151166001600160a01b031982541617905501920151166001600160a01b03198254161790553861116a565b634e487b7160e01b600052601160045260246000fd5b1561141457565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b60005460ff8160081c166000146114a1575061149c303b1561140d565b600090565b806114b2600160ff8194161061140d565b60ff19161760005560019056fea164736f6c6343000818000a",
  "devdoc": {
    "details": "This contract manages the creations of stable swap pools and provides access to their information",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addPairInfo(address)": {
        "params": {
          "_swapContract": ": Addresses of stable swap contracts."
        }
      },
      "createSwapPair(address,address,uint256,uint256,uint256)": {
        "params": {
          "_A": ": Amplification coefficient multiplied by n * (n - 1)",
          "_admin_fee": ": Admin fee",
          "_fee": ": Fee to charge for exchanges",
          "_tokenA": ": Addresses of ERC20 conracts .",
          "_tokenB": ": Addresses of ERC20 conracts ."
        }
      },
      "createThreePoolPair(address,address,address,uint256,uint256,uint256)": {
        "params": {
          "_A": ": Amplification coefficient multiplied by n * (n - 1)",
          "_admin_fee": ": Admin fee",
          "_fee": ": Fee to charge for exchanges",
          "_tokenA": ": Addresses of ERC20 conracts .",
          "_tokenB": ": Addresses of ERC20 conracts .",
          "_tokenC": ": Addresses of ERC20 conracts ."
        }
      },
      "getPairInfo(address,address)": {
        "params": {
          "_tokenA": ": Addresses of ERC20 conracts.",
          "_tokenB": ": Addresses of ERC20 conracts."
        }
      },
      "getThreePoolPairInfo(address,address)": {
        "params": {
          "_tokenA": ": Addresses of ERC20 conracts.",
          "_tokenB": ": Addresses of ERC20 conracts."
        }
      },
      "transferAdminship(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Stable swap factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPairInfo(address)": {
        "notice": "Adds information about a stable swap contract."
      },
      "createSwapPair(address,address,uint256,uint256,uint256)": {
        "notice": "createSwapPair"
      },
      "createThreePoolPair(address,address,address,uint256,uint256,uint256)": {
        "notice": "createThreePoolPair"
      },
      "getPairInfo(address,address)": {
        "notice": "Retrieves information of two pool."
      },
      "getThreePoolPairInfo(address,address)": {
        "notice": "Retrieves information of three pool by two tokens."
      },
      "initialize(address,address,address,address)": {
        "notice": "constructor _LPFactory: LP factory _SwapTwoPoolDeployer: Swap two pool deployer _SwapThreePoolDeployer: Swap three pool deployer"
      }
    },
    "notice": "A factory contract for creating new pool and providing pool information",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 867,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "stableSwapPairInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_struct(StableSwapThreePoolPairInfo)858_storage)))"
      },
      {
        "astId": 874,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "threePoolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(StableSwapThreePoolPairInfo)858_storage))"
      },
      {
        "astId": 878,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "swapPairContract",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 881,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "LPFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IStableSwapLPFactory)827"
      },
      {
        "astId": 884,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "SwapTwoPoolDeployer",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IStableSwapDeployer)779"
      },
      {
        "astId": 887,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "SwapThreePoolDeployer",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IStableSwapDeployer)779"
      },
      {
        "astId": 895,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "admin",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 897,
        "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
        "label": "pairLength",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStableSwapDeployer)779": {
        "encoding": "inplace",
        "label": "contract IStableSwapDeployer",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwapLPFactory)827": {
        "encoding": "inplace",
        "label": "contract IStableSwapLPFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_struct(StableSwapThreePoolPairInfo)858_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => struct StableSwapFactory.StableSwapThreePoolPairInfo)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_struct(StableSwapThreePoolPairInfo)858_storage))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(StableSwapThreePoolPairInfo)858_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct StableSwapFactory.StableSwapThreePoolPairInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(StableSwapThreePoolPairInfo)858_storage)"
      },
      "t_mapping(t_address,t_struct(StableSwapThreePoolPairInfo)858_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StableSwapFactory.StableSwapThreePoolPairInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StableSwapThreePoolPairInfo)858_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(StableSwapThreePoolPairInfo)858_storage": {
        "encoding": "inplace",
        "label": "struct StableSwapFactory.StableSwapThreePoolPairInfo",
        "members": [
          {
            "astId": 849,
            "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
            "label": "swapContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 851,
            "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
            "label": "token0",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 853,
            "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
            "label": "token1",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 855,
            "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
            "label": "token2",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 857,
            "contract": "contracts/stableSwap/StableSwapFactory.sol:StableSwapFactory",
            "label": "LPContract",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}