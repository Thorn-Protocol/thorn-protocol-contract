{
  "address": "0x27b7158C6Ab336F8ed4B744Bc295a10194653846",
  "abi": [
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "N_COINS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        }
      ],
      "name": "PRECISION_MUL",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "swapPRECISION_MUL",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        }
      ],
      "name": "RATES",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "swapRATES",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_balances",
          "type": "uint256[3]"
        }
      ],
      "name": "_xp_mem",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "result",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "swapBalances",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calc_coins_amount",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_balances",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256",
          "name": "amp",
          "type": "uint256"
        }
      ],
      "name": "get_D_mem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        }
      ],
      "name": "get_add_liquidity_fee",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "liquidityFee",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        }
      ],
      "name": "get_add_liquidity_mint_amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_dx",
          "type": "uint256"
        }
      ],
      "name": "get_dx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "get_exchange_fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exAdminFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        }
      ],
      "name": "get_remove_liquidity_imbalance_fee",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "liquidityFee",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_token_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "get_remove_liquidity_one_coin_fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swap",
          "type": "address"
        }
      ],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9805d940fd16acd123bb482dd1e1c947a0ea71c967f38ad5b3ea523c32662bc",
  "receipt": {
    "to": null,
    "from": "0x48d66a65693dB44d3ca05CBb54e0a806096e2eDA",
    "contractAddress": "0x27b7158C6Ab336F8ed4B744Bc295a10194653846",
    "transactionIndex": 1,
    "gasUsed": "1813444",
    "logsBloom": "0x
    "blockHash": "0x5bf15b32ea0e3064416dcdc36ad2d9b303ff71683107bd31e71a5ca604d8cf75",
    "transactionHash": "0xa9805d940fd16acd123bb482dd1e1c947a0ea71c967f38ad5b3ea523c32662bc",
    "logs": [],
    "blockNumber": 5884507,
    "cumulativeGasUsed": "1835587",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e01055ca5ec021cf1427f0131726ccb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N_COINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"PRECISION_MUL\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"swapPRECISION_MUL\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"RATES\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"swapRATES\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_balances\",\"type\":\"uint256[3]\"}],\"name\":\"_xp_mem\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"result\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"swapBalances\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calc_coins_amount\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_balances\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"amp\",\"type\":\"uint256\"}],\"name\":\"get_D_mem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"}],\"name\":\"get_add_liquidity_fee\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"liquidityFee\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"}],\"name\":\"get_add_liquidity_mint_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_dx\",\"type\":\"uint256\"}],\"name\":\"get_dx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"get_exchange_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exAdminFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"}],\"name\":\"get_remove_liquidity_imbalance_fee\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"liquidityFee\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"get_remove_liquidity_one_coin_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract provides utility functions for retrieving information and calculating fees related to stable swaps with three coins.\",\"kind\":\"dev\",\"methods\":{\"PRECISION_MUL(address)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\"}},\"RATES(address)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\"}},\"_xp_mem(address,uint256[3])\":{\"params\":{\"_balances\":\"The array of balances to calculate virtual balances from.\"}},\"balances(address)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\"}},\"calc_coins_amount(address,uint256)\":{\"params\":{\"_amount\":\"Amount of LP tokens to burn in the withdrawal\",\"_swap\":\"Address of the stable swap contract\"}},\"get_D_mem(address,uint256[3],uint256)\":{\"params\":{\"_balances\":\"Array of balances to calculate virtual balances from.\",\"amp\":\"Amplification factor of the pool.\"}},\"get_add_liquidity_fee(address,uint256[3])\":{\"params\":{\"_swap\":\"Address of the stable swap contract\",\"amounts\":\"Array of amounts for each coin being deposited\"}},\"get_add_liquidity_mint_amount(address,uint256[3])\":{\"params\":{\"_swap\":\"Address of the stable swap contract\",\"amounts\":\"Array of amounts for each coin being deposited\"}},\"get_dx(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_swap\":\": Addresses of pool conracts .\",\"dy\":\":  the given amount out\",\"i\":\": the token index.\",\"j\":\": the token index \",\"max_dx\":\": the maximum of amount in \"}},\"get_exchange_fee(address,uint256,uint256,uint256)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\",\"dx\":\"Amount of token to swap from\",\"i\":\"Index of the token to swap from\",\"j\":\"Index of the token to swap to\"},\"returns\":{\"exAdminFee\":\"Admin fee for the swap\",\"exFee\":\"Exchange fee for the swap\"}},\"get_remove_liquidity_imbalance_fee(address,uint256[3])\":{\"params\":{\"_swap\":\"Address of the stable swap contract\",\"amounts\":\"Array of amounts for each coin being withdrawn\"}},\"get_remove_liquidity_one_coin_fee(address,uint256,uint256)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\",\"_token_amount\":\"Amount of liquidity tokens being withdrawn\",\"i\":\"Index of the coin to withdraw\"}},\"token(address)\":{\"params\":{\"_swap\":\"Address of the stable swap contract\"}}},\"title\":\"StableSwapThreePoolInfo\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PRECISION_MUL(address)\":{\"notice\":\"Get the precision multipliers for each coin in the pool\"},\"RATES(address)\":{\"notice\":\"Get the exchange rates for each coin in the pool\"},\"_xp_mem(address,uint256[3])\":{\"notice\":\"Calculates the array of virtual balances for the pool, scaled by precision, using provided balances.\"},\"balances(address)\":{\"notice\":\"Get the balances of each coin in the pool\"},\"calc_coins_amount(address,uint256)\":{\"notice\":\"Calculate the amount of each coin received when removing liquidity \"},\"get_D_mem(address,uint256[3],uint256)\":{\"notice\":\"Calculates the total value of the pool's assets (invariant D), given balances and amplification factor.\"},\"get_add_liquidity_fee(address,uint256[3])\":{\"notice\":\"Calculate the fee charged when adding liquidity\"},\"get_add_liquidity_mint_amount(address,uint256[3])\":{\"notice\":\"Calculate the amount of LP token received when adding liquidity\"},\"get_dx(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"get amountIn  with the given amount out  \"},\"get_exchange_fee(address,uint256,uint256,uint256)\":{\"notice\":\"Calculates the exchange fee and admin fee for a token swap\"},\"get_remove_liquidity_imbalance_fee(address,uint256[3])\":{\"notice\":\"Calculate the fee charged when removing liquidity\"},\"get_remove_liquidity_one_coin_fee(address,uint256,uint256)\":{\"notice\":\"Calculate the fee charged when removing liquidity for a single coin\"},\"token(address)\":{\"notice\":\"Get the LP token of the two pool\"}},\"notice\":\"Contract for retrieving information about stable swaps with three coins\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableSwap/utils/StableSwapThreePoolInfo.sol\":\"StableSwapThreePoolInfo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IStableSwap {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the LP token of the two pool\\r\\n     */\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balances of each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function balances(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of coins within the pool\\r\\n     */\\r\\n    function N_COINS() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the exchange rates for each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function RATES(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the address of coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the precision multipliers for each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function PRECISION_MUL(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The pool swap fee.\\r\\n     * The method returns fee as an integer with 1e10 precision.\\r\\n     */\\r\\n    function fee() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The percentage of the swap fee that is taken as an admin fee.\\r\\n     * The method returns an integer with with 1e10 precision.\\r\\n     */\\r\\n    function admin_fee() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for the amplification coefficient of the pool.\\r\\n     * The amplification coefficient A determines a pool\\u2019s tolerance for imbalance between the assets within it.\\r\\n     */\\r\\n    function A() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\\r\\n    * Can get the absolute price by multiplying it with the price of the underlying assets.\\r\\n    * The method returns virtual_price as an integer with 1e18 precision.\\r\\n    */\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\\r\\n     * Returns the expected amount of LP tokens received. \\r\\n     * This calculation accounts for slippage, but not fees.\\r\\n     * @param amounts: Amount of each coin being deposited\\r\\n     * @param deposit: Set True for deposits, False for withdrawals\\r\\n     */\\r\\n    function calc_token_amount(uint256[2] memory amounts, bool deposit) external view returns (uint256);\\r\\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\\r\\n     * @param i: Index of coin to swap from\\r\\n     * @param j: Index of coin to swap to\\r\\n     * @param dx: Amount of coin i to swap\\r\\n     */\\r\\n    function get_dy(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\\r\\n    * @param i Index of coin to swap from\\r\\n    * @param j Index of coin to swap to\\r\\n    * @param dx Amount of coin i to swap\\r\\n    */\\r\\n    function get_dy_underlying(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount received when withdrawing a single coin.\\r\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\r\\n     * @param i: Index value of the coin to withdraw\\r\\n     */\\r\\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit coins into the pool\\r\\n     * @param amounts: Amount of each coin being deposited\\r\\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\\r\\n     */\\r\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Perform an exchange between two coins.\\r\\n     * @param i: Index of coin to swap from\\r\\n     * @param j: Index of coin to swap to\\r\\n     * @param dx: Amount of coin i to swap\\r\\n     * @param min_dy: \\tMinimum amount of j to receive\\r\\n     */\\r\\n    function exchange(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) external payable;\\r\\n\\r\\n     /**\\r\\n     * @notice Withdraw coins from the pool\\r\\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\\r\\n     * @param min_amounts: Minimum amounts of underlying coins to receive\\r\\n     */\\r\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external;\\r\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw coins from the pool in an imbalanced amount\\r\\n     * @param amounts: List of amounts of underlying coins to withdraw\\r\\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\\r\\n     */\\r\\n    function remove_liquidity_imbalance(uint256[2] memory amounts, uint256 max_burn_amount) external;\\r\\n    function remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw a single coin from the pool\\r\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\r\\n     * @param i: Index value of the coin to withdraw\\r\\n     * @param min_amount: Minimum amount of coin to receive\\r\\n     */\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 _token_amount,\\r\\n        uint256 i,\\r\\n        uint256 min_amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7d247b3b5a55e627ed93503380327de7e4b508f529a423f39dcf26cc9cb10589\",\"license\":\"MIT\"},\"contracts/stableSwap/utils/StableSwapThreePoolInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/IStableSwap.sol\\\";\\n\\n/**\\n * @title StableSwapThreePoolInfo\\n * @notice Contract for retrieving information about stable swaps with three coins\\n * @dev This contract provides utility functions for retrieving information and calculating fees related to stable swaps with three coins.\\n */\\ncontract StableSwapThreePoolInfo {\\n    uint256 public constant N_COINS = 3;\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    uint256 public constant PRECISION = 1e18;\\n\\n    /**\\n     * @notice Get the LP token of the two pool\\n     * @param _swap Address of the stable swap contract\\n     */\\n    function token(address _swap) public view returns (IERC20) {\\n        return IERC20(IStableSwap(_swap).token());\\n    }\\n\\n    /**\\n     * @notice Get the balances of each coin in the pool\\n     * @param _swap Address of the stable swap contract\\n     */\\n    function balances(address _swap) public view returns (uint256[N_COINS] memory swapBalances) {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            swapBalances[i] = IStableSwap(_swap).balances(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the exchange rates for each coin in the pool\\n     * @param _swap Address of the stable swap contract\\n     */\\n    function RATES(address _swap) public view returns (uint256[N_COINS] memory swapRATES) {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            swapRATES[i] = IStableSwap(_swap).RATES(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the precision multipliers for each coin in the pool\\n     * @param _swap Address of the stable swap contract\\n     */\\n    function PRECISION_MUL(address _swap) public view returns (uint256[N_COINS] memory swapPRECISION_MUL) {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            swapPRECISION_MUL[i] = IStableSwap(_swap).PRECISION_MUL(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of each coin received when removing liquidity \\n     * @param _swap Address of the stable swap contract\\n     * @param _amount Amount of LP tokens to burn in the withdrawal\\n     */\\n    function calc_coins_amount(address _swap, uint256 _amount) external view returns (uint256[N_COINS] memory) {\\n        uint256 total_supply = token(_swap).totalSupply();\\n        uint256[N_COINS] memory amounts;\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 value = (IStableSwap(_swap).balances(i) * _amount) / total_supply;\\n            amounts[i] = value;\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n    * @notice Calculates the total value of the pool's assets (invariant D), given balances and amplification factor.\\n    * @param _balances Array of balances to calculate virtual balances from.\\n    * @param amp Amplification factor of the pool.\\n    */\\n    function get_D_mem(\\n        address _swap,\\n        uint256[N_COINS] memory _balances,\\n        uint256 amp\\n    ) public view returns (uint256) {\\n        return get_D(_xp_mem(_swap, _balances), amp);\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of LP token received when adding liquidity\\n     * @param _swap Address of the stable swap contract\\n     * @param amounts Array of amounts for each coin being deposited\\n     */\\n    function get_add_liquidity_mint_amount(address _swap, uint256[N_COINS] memory amounts)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256[N_COINS] memory fees;\\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 amp = swap.A();\\n\\n        uint256 token_supply = token(_swap).totalSupply();\\n        //Initial invariant\\n        uint256 D0;\\n        uint256[N_COINS] memory old_balances = balances(_swap);\\n        if (token_supply > 0) {\\n            D0 = get_D_mem(_swap, old_balances, amp);\\n        }\\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1], old_balances[2]];\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (token_supply == 0) {\\n                require(amounts[i] > 0, \\\"Initial deposit requires all coins\\\");\\n            }\\n            // balances store amounts of c-tokens\\n            new_balances[i] = old_balances[i] + amounts[i];\\n        }\\n\\n        // Invariant after change\\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\\n        require(D1 > D0, \\\"D1 must be greater than D0\\\");\\n\\n        // We need to recalculate the invariant accounting for fees\\n        // to calculate fair user's share\\n        uint256 D2 = D1;\\n        if (token_supply > 0) {\\n            // Only account for fees if we are not the first to deposit\\n            for (uint256 i = 0; i < N_COINS; i++) {\\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n                uint256 difference;\\n                if (ideal_balance > new_balances[i]) {\\n                    difference = ideal_balance - new_balances[i];\\n                } else {\\n                    difference = new_balances[i] - ideal_balance;\\n                }\\n\\n                fees[i] = (_fee * difference) / FEE_DENOMINATOR;\\n                new_balances[i] -= fees[i];\\n            }\\n            D2 = get_D_mem(_swap, new_balances, amp);\\n        }\\n\\n        // Calculate, how much pool tokens to mint\\n        uint256 mint_amount;\\n        if (token_supply == 0) {\\n            mint_amount = D1; // Take the dust if there was any\\n        } else {\\n            mint_amount = (token_supply * (D2 - D0)) / D0;\\n        }\\n        return mint_amount;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee charged when adding liquidity\\n     * @param _swap Address of the stable swap contract\\n     * @param amounts Array of amounts for each coin being deposited\\n     */\\n    function get_add_liquidity_fee(address _swap, uint256[N_COINS] memory amounts)\\n        external\\n        view\\n        returns (uint256[N_COINS] memory liquidityFee)\\n    {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 _admin_fee = swap.admin_fee();\\n        uint256 amp = swap.A();\\n\\n        uint256 token_supply = token(_swap).totalSupply();\\n        //Initial invariant\\n        uint256 D0;\\n        uint256[N_COINS] memory old_balances = balances(_swap);\\n        if (token_supply > 0) {\\n            D0 = get_D_mem(_swap, old_balances, amp);\\n        }\\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1], old_balances[2]];\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (token_supply == 0) {\\n                require(amounts[i] > 0, \\\"Initial deposit requires all coins\\\");\\n            }\\n            new_balances[i] = old_balances[i] + amounts[i];\\n        }\\n\\n        // Invariant after change\\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\\n        require(D1 > D0, \\\"D1 must be greater than D0\\\");\\n        if (token_supply > 0) {\\n            // Only account for fees if we are not the first to deposit\\n            for (uint256 i = 0; i < N_COINS; i++) {\\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n                uint256 difference;\\n                if (ideal_balance > new_balances[i]) {\\n                    difference = ideal_balance - new_balances[i];\\n                } else {\\n                    difference = new_balances[i] - ideal_balance;\\n                }\\n                uint256 coinFee;\\n                coinFee = (_fee * difference) / FEE_DENOMINATOR;\\n                liquidityFee[i] = ((coinFee * _admin_fee) / FEE_DENOMINATOR);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the fee charged when removing liquidity\\n     * @param _swap Address of the stable swap contract\\n     * @param amounts Array of amounts for each coin being withdrawn\\n     */\\n    function get_remove_liquidity_imbalance_fee(address _swap, uint256[N_COINS] memory amounts)\\n        external\\n        view\\n        returns (uint256[N_COINS] memory liquidityFee)\\n    {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 _admin_fee = swap.admin_fee();\\n        uint256 amp = swap.A();\\n\\n        uint256[N_COINS] memory old_balances = balances(_swap);\\n        uint256[N_COINS] memory new_balances = [old_balances[0], old_balances[1], old_balances[2]];\\n        uint256 D0 = get_D_mem(_swap, old_balances, amp);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            new_balances[i] -= amounts[i];\\n        }\\n        uint256 D1 = get_D_mem(_swap, new_balances, amp);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n            uint256 difference;\\n            if (ideal_balance > new_balances[i]) {\\n                difference = ideal_balance - new_balances[i];\\n            } else {\\n                difference = new_balances[i] - ideal_balance;\\n            }\\n            uint256 coinFee;\\n            coinFee = (_fee * difference) / FEE_DENOMINATOR;\\n            liquidityFee[i] = ((coinFee * _admin_fee) / FEE_DENOMINATOR);\\n        }\\n    }\\n\\n    /**\\n    * @notice Calculates the array of virtual balances for the pool, scaled by precision, using provided balances.\\n    * @param _balances The array of balances to calculate virtual balances from.\\n    */\\n    function _xp_mem(address _swap, uint256[N_COINS] memory _balances)\\n        public\\n        view\\n        returns (uint256[N_COINS] memory result)\\n    {\\n        result = RATES(_swap);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            result[i] = (result[i] * _balances[i]) / PRECISION;\\n        }\\n    }\\n\\n    /**\\n    * @notice Calculates the total value of the pool's assets (invariant D), given virtual balances and amplification factor.\\n    * @param xp Array of virtual balances for the pool, scaled by precision.\\n    * @param amp Amplification factor of the pool.\\n    * @return D The total value of the pool's assets (invariant D).\\n    */\\n    function get_D(uint256[N_COINS] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 S;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            S += xp[i];\\n        }\\n        if (S == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev;\\n        uint256 D = S;\\n        uint256 Ann = amp * N_COINS;\\n        for (uint256 j = 0; j < 255; j++) {\\n            uint256 D_P = D;\\n            for (uint256 k = 0; k < N_COINS; k++) {\\n                D_P = (D_P * D) / (xp[k] * N_COINS); // If division by 0, this will be borked: only withdrawal will work. And that is good\\n            }\\n            Dprev = D;\\n            D = ((Ann * S + D_P * N_COINS) * D) / ((Ann - 1) * D + (N_COINS + 1) * D_P);\\n            // Equality with the precision of 1\\n            if (D > Dprev) {\\n                if (D - Dprev <= 1) {\\n                    return D;\\n                }\\n            } else {\\n                if (Dprev - D <= 1) {\\n                    return D;\\n                }\\n            }\\n        }\\n        revert(\\\"invariant calculation did not converge\\\");\\n    }\\n\\n    /**\\n    * @notice Get the amount of coin j one would receive for swapping x of coin i, using the current virtual balances.\\n    * @param i Index of coin to swap from.\\n    * @param j Index of coin to swap to\\n    * @param x Amount of coin i to swap\\n    * @param xp_ The array of virtual balances for the pool, scaled by precision.\\n    */\\n    function get_y(\\n        address _swap,\\n        uint256 i,\\n        uint256 j,\\n        uint256 x,\\n        uint256[N_COINS] memory xp_\\n    ) internal view returns (uint256) {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256 amp = swap.A();\\n        uint256 D = get_D(xp_, amp);\\n        uint256 c = D;\\n        uint256 S_;\\n        uint256 Ann = amp * N_COINS;\\n\\n        uint256 _x;\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            if (k == i) {\\n                _x = x;\\n            } else if (k != j) {\\n                _x = xp_[k];\\n            } else {\\n                continue;\\n            }\\n            S_ += _x;\\n            c = (c * D) / (_x * N_COINS);\\n        }\\n        c = (c * D) / (Ann * N_COINS);\\n        uint256 b = S_ + D / Ann; // - D\\n        uint256 y_prev;\\n        uint256 y = D;\\n\\n        for (uint256 m = 0; m < 255; m++) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            // Equality with the precision of 1\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        revert(\\\"does not converge\\\");\\n    }\\n\\n    /**\\n    * @notice Calculates the exchange fee and admin fee for a token swap\\n    * @param _swap Address of the stable swap contract\\n    * @param i Index of the token to swap from\\n    * @param j Index of the token to swap to\\n    * @param dx Amount of token to swap from\\n    * @return exFee Exchange fee for the swap\\n    * @return exAdminFee Admin fee for the swap\\n    */\\n    function get_exchange_fee(\\n        address _swap,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256 exFee, uint256 exAdminFee) {\\n        IStableSwap swap = IStableSwap(_swap);\\n\\n        uint256[N_COINS] memory old_balances = balances(_swap);\\n        uint256[N_COINS] memory xp = _xp_mem(_swap, old_balances);\\n        uint256[N_COINS] memory rates = RATES(_swap);\\n        uint256 x = xp[i] + (dx * rates[i]) / PRECISION;\\n        uint256 y = get_y(_swap, i, j, x, xp);\\n\\n        uint256 dy = xp[j] - y - 1; //  -1 just in case there were some rounding errors\\n        uint256 dy_fee = (dy * swap.fee()) / FEE_DENOMINATOR;\\n\\n        uint256 dy_admin_fee = (dy_fee * swap.admin_fee()) / FEE_DENOMINATOR;\\n        dy_fee = (dy_fee * PRECISION) / rates[j];\\n        dy_admin_fee = (dy_admin_fee * PRECISION) / rates[j];\\n        exFee = dy_fee;\\n        exAdminFee = dy_admin_fee;\\n    }\\n\\n    /**\\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision\\n     */\\n    function _xp(address _swap) internal view returns (uint256[N_COINS] memory result) {\\n        result = RATES(_swap);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            result[i] = (result[i] * IStableSwap(_swap).balances(i)) / PRECISION;\\n        }\\n    }\\n\\n    /**\\n    * @notice Get the amount of coin i given a reduction in invariant D, considering a specific value of parameter A and current virtual balances.\\n    * @param A_ The value of parameter A.\\n    * @param i The index of the coin for which the output amount is calculated.\\n    * @param xp The array of virtual balances for the pool, scaled by precision.\\n    * @param D The new value of invariant D.\\n    */\\n    function get_y_D(\\n        uint256 A_,\\n        uint256 i,\\n        uint256[N_COINS] memory xp,\\n        uint256 D\\n    ) internal pure returns (uint256) {\\n        /**\\n        Calculate x[i] if one reduces D from being calculated for xp to D\\n\\n        Done by solving quadratic equation iteratively.\\n        x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n        x_1**2 + b*x_1 = c\\n\\n        x_1 = (x_1**2 + c) / (2*x_1 + b)\\n        */\\n        // x in the input is converted to the same price/precision\\n        require(i < N_COINS, \\\"dev: i above N_COINS\\\");\\n        uint256 c = D;\\n        uint256 S_;\\n        uint256 Ann = A_ * N_COINS;\\n\\n        uint256 _x;\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            if (k != i) {\\n                _x = xp[k];\\n            } else {\\n                continue;\\n            }\\n            S_ += _x;\\n            c = (c * D) / (_x * N_COINS);\\n        }\\n        c = (c * D) / (Ann * N_COINS);\\n        uint256 b = S_ + D / Ann;\\n        uint256 y_prev;\\n        uint256 y = D;\\n\\n        for (uint256 k = 0; k < 255; k++) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            // Equality with the precision of 1\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    break;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    break;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    /**\\n     * @notice Calculate the amount received when withdrawing a single coin.\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\n     * @param i: Index value of the coin to withdraw\\n     */\\n    function _calc_withdraw_one_coin(\\n        address _swap,\\n        uint256 _token_amount,\\n        uint256 i\\n    ) internal view returns (uint256, uint256) {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256 amp = swap.A();\\n        uint256 _fee = (swap.fee() * N_COINS) / (4 * (N_COINS - 1));\\n        uint256[N_COINS] memory precisions = PRECISION_MUL(_swap);\\n\\n        uint256[N_COINS] memory xp = _xp(_swap);\\n\\n        uint256 D0 = get_D(xp, amp);\\n        uint256 D1 = D0 - (_token_amount * D0) / (token(_swap).totalSupply());\\n        uint256[N_COINS] memory xp_reduced = xp;\\n\\n        uint256 new_y = get_y_D(amp, i, xp, D1);\\n        uint256 dy_0 = (xp[i] - new_y) / precisions[i]; // w/o fees\\n\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            uint256 dx_expected;\\n            if (k == i) {\\n                dx_expected = (xp[k] * D1) / D0 - new_y;\\n            } else {\\n                dx_expected = xp[k] - (xp[k] * D1) / D0;\\n            }\\n            xp_reduced[k] -= (_fee * dx_expected) / FEE_DENOMINATOR;\\n        }\\n        uint256 dy = xp_reduced[i] - get_y_D(amp, i, xp_reduced, D1);\\n        dy = (dy - 1) / precisions[i]; // Withdraw less to account for rounding errors\\n\\n        return (dy, dy_0 - dy);\\n    }\\n\\n    /**\\n     * @notice Calculate the fee charged when removing liquidity for a single coin\\n     * @param _swap Address of the stable swap contract\\n     * @param _token_amount Amount of liquidity tokens being withdrawn\\n     * @param i Index of the coin to withdraw\\n     */\\n    function get_remove_liquidity_one_coin_fee(\\n        address _swap,\\n        uint256 _token_amount,\\n        uint256 i\\n    ) external view returns (uint256 adminFee) {\\n        IStableSwap swap = IStableSwap(_swap);\\n        (, uint256 dy_fee) = _calc_withdraw_one_coin(_swap, _token_amount, i);\\n        adminFee = (dy_fee * swap.admin_fee()) / FEE_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @notice get amountIn  with the given amount out  \\n     * @param _swap: Addresses of pool conracts .\\n     * @param i: the token index.\\n     * @param j: the token index \\n     * @param  dy :  the given amount out\\n     * @param max_dx: the maximum of amount in \\n     */\\n    function get_dx(\\n        address _swap,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dy,\\n        uint256 max_dx\\n    ) external view returns (uint256) {\\n        IStableSwap swap = IStableSwap(_swap);\\n        uint256[N_COINS] memory old_balances = balances(_swap);\\n        uint256[N_COINS] memory xp = _xp_mem(_swap, old_balances);\\n\\n        uint256 dy_with_fee = (dy * FEE_DENOMINATOR) / (FEE_DENOMINATOR - swap.fee());\\n        require(dy_with_fee < old_balances[j], \\\"Excess balance\\\");\\n        uint256[N_COINS] memory rates = RATES(_swap);\\n        uint256 y = xp[j] - (dy_with_fee * rates[j]) / PRECISION;\\n        uint256 x = get_y(_swap, j, i, y, xp);\\n\\n        uint256 dx = x - xp[i];\\n\\n        // Convert all to real units\\n        dx = (dx * PRECISION) / rates[i] + 1; // +1 for round lose.\\n        require(dx <= max_dx, \\\"Exchange resulted in fewer coins than expected\\\");\\n        return dx;\\n    }\\n}\\n\",\"keccak256\":\"0xd7d97fe088291635de2daa9e0e669e2ff3d8de0ec4abf6a6ce904ff60368cd91\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611fae908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816315a4d7fe14611355575080631f38b0c7146111715780632494acbd1461114d578063279a07cc1461112957806327e235e31461110557806329357750146110e9578063437fe6f914610ec757806346f57d4514610b9b5780635779dcd8146107b15780636d46a1db1461077d5780637619153d14610742578063789787ac146103da57806382abb1a31461039c578063aaf5eb6814610379578063ca4bc714146100f45763d73792a9146100cf57600080fd5b346100ef5760003660031901126100ef5760206040516402540be4008152f35b600080fd5b346100ef5760a03660031901126100ef5761010d6114a6565b6064359060249081356044356101228361178c565b9261012d8482611947565b906402540be400808802978089048214901517156103645760405163ddca3f4360e01b81526020989089816004816001600160a01b0388165afa9081156103585760009161032b575b5082039182116103165761018e6101949286926115d5565b966115f5565b518510156102d2579081816101a98694611636565b94846101b582846115f5565b51670de0b6b3a7640000809a6101cb858b6115f5565b516101d5916115c2565b046101df91611629565b916101e9946119aa565b916101f3916115f5565b516101fd91611629565b8381029381850414901517156102bd57610222929161021b916115f5565b51906115d5565b90600182018092116102a95760843582116102405750604051908152f35b82602e6084926040519262461bcd60e51b845260048401528201527f45786368616e676520726573756c74656420696e20666577657220636f696e7360448201527f207468616e2065787065637465640000000000000000000000000000000000006064820152fd5b634e487b7160e01b60009081526011600452fd5b83634e487b7160e01b60005260116004526000fd5b60405162461bcd60e51b815260048101889052600e818801527f4578636573732062616c616e63650000000000000000000000000000000000006044820152606490fd5b87634e487b7160e01b60005260116004526000fd5b90508981813d8311610351575b610342818361151c565b810103126100ef57518a610176565b503d610338565b6040513d6000823e3d90fd5b86634e487b7160e01b60005260116004526000fd5b346100ef5760003660031901126100ef576020604051670de0b6b3a76400008152f35b346100ef5760803660031901126100ef576103d66103ca6103bb6114a6565b6103c436611580565b90611947565b604051918291826114bc565b0390f35b346100ef5760803660031901126100ef576103f36114a6565b6103fc36611580565b906040519161040a836114ea565b606036843760405163ddca3f4360e01b8152916001600160a01b0391818316916020918286600481875afa95861561035857600096610713575b506003956003810290808204600314901517156106fd5760031c946040519463fee3f7f960e01b86528486600481845afa958615610358576000966106cc575b50908460049260405193848092630f446c1d60e41b82525afa90811561035857859060009261069c575b600493506104bb866118d3565b16604051938480926318160ddd60e01b82525afa9182156103585760009261066d575b506000936104eb8161178c565b921580159485610657575b969190604051978893610508856114ea565b8651855280870151908501526040860151604085015260005b8c81106105fb5750505061053e929161053991611947565b611c28565b9161054a848411611887565b61055d575b604051806103d68a826114bc565b60005b87811061056d575061054f565b806105ca6105d0886105948861058f6105886001988a6115f5565b518a6115c2565b6115d5565b61059e858b6115f5565b518111156105e2576105bb906105b4868c6115f5565b5190611629565b6402540be4009384918d6115c2565b046115c2565b046105db828c6115f5565b5201610560565b6105f6906105f0868c6115f5565b51611629565b6105bb565b826001929394955061063d575b61062761061582896115f5565b5161062083866115f5565b519061161c565b610631828c6115f5565b52019088939291610521565b61065261064a82856115f5565b511515611830565b610608565b9550610667836105398685611947565b956104f6565b9091508481813d8311610695575b610685818361151c565b810103126100ef575190896104de565b503d61067b565b915082813d83116106c5575b6106b2818361151c565b810103126100ef578460049251916104ae565b503d6106a8565b919095508482813d83116106f6575b6106e5818361151c565b810103126100ef5790519484610484565b503d6106db565b634e487b7160e01b600052601160045260246000fd5b9095508281813d831161073b575b61072b818361151c565b810103126100ef57519487610444565b503d610721565b346100ef5760a03660031901126100ef5760206107756107606114a6565b61053961076c3661153e565b60843592611947565b604051908152f35b346100ef5760203660031901126100ef5760206107a061079b6114a6565b6118d3565b6001600160a01b0360405191168152f35b346100ef5760603660031901126100ef576107ca6114a6565b604051630f446c1d60e41b8152906020826004816001600160a01b0385165afa91821561035857600092610b67575b5060405163ddca3f4360e01b81526020816004816001600160a01b0386165afa90811561035857600091610b35575b506003810290808204600314901517156106fd5760031c91610849826116e8565b906060604051610858816114ea565b36903761086483611636565b9360005b60038110610a95575061087b8286611c28565b94610888866024356115c2565b600460206001600160a01b0361089d896118d3565b16604051928380926318160ddd60e01b82525afa90811561035857600091610a61575b506108ce906108d4926115d5565b87611629565b916108e3838360443587611e09565b906109036108f7836105f0604435876115f5565b61021b604435896115f5565b9760005b600381106109db5750505050610939929161093391610928604435826115f5565b519360443590611e09565b90611629565b60001981019081116106fd576001600160a01b03936109336109649261021b602095604435906115f5565b9160046040518095819363fee3f7f960e01b8352165afa918215610358576000926109a5575b60206402540be40061099c85856115c2565b04604051908152f35b91506020823d6020116109d3575b816109c06020938361151c565b810103126100ef5790519061099c61098a565b3d91506109b3565b600190610a296402540be400610a1e85888b868c6044358203610a3a57610a1392610a0d610a18969361058f936115f5565b516115c2565b611629565b876115c2565b046105f083896115f5565b610a3382886115f5565b5201610907565b92509261058f61093392610a0d86610a55610a5c98886115f5565b51966115f5565b610a18565b90506020813d602011610a8d575b81610a7c6020938361151c565b810103126100ef57516108d46108c0565b3d9150610a6f565b610a9f81876115f5565b51604051634903b0d160e01b81526004810183905291906020836024816001600160a01b038b165afa92831561035857600093610aff575b50610aed600193670de0b6b3a7640000926115c2565b04610af882896115f5565b5201610868565b92506020833d602011610b2d575b81610b1a6020938361151c565b810103126100ef57915191610aed610ad7565b3d9150610b0d565b90506020813d602011610b5f575b81610b506020938361151c565b810103126100ef575183610828565b3d9150610b43565b9091506020813d602011610b93575b81610b836020938361151c565b810103126100ef575190826107f9565b3d9150610b76565b346100ef5760803660031901126100ef57610bb46114a6565b610bbd3661153e565b906001600160a01b039081811660405190610bd7826114ea565b60603683376040519163ddca3f4360e01b83526020948584600481865afa93841561035857600094610e98575b506003966003850294808604600314901517156106fd578660049560031c9460405196878092630f446c1d60e41b82525afa918215610358578790600093610e68575b60049650610c54886118d3565b16604051968780926318160ddd60e01b82525afa94851561035857600095610e39575b50600095610c848161178c565b9886159485159687610e23575b60409b9a9b5194610ca1866114ea565b8b5186528c8c01518d87015260408c0151604087015260005b848110610de5575050610cd1866105398787611947565b9a610cdd8b8d11611887565b8b98610d1b575b50505050505050600014610cfd57505050604051908152f35b610d16935090610d108361058f93611629565b906115c2565b610775565b90919293949596975060005b8a8c868310610d525750505050505050610d45929161053991611947565b9086808080808080610ce4565b610d9d610d77849361058f6402540be40094610d706001988a6115f5565b51906115c2565b610d81848c6115f5565b51811115610dd257610d97906105b4858d6115f5565b866115c2565b04610da882876115f5565b52610dc1610db682876115f5565b516105f0838b6115f5565b610dcb828a6115f5565b5201610d27565b610de0906105f0858d6115f5565b610d97565b80610dfd8e9f9e600193610615918d610e11576115f5565b610e07828a6115f5565b52019c9b9c610cba565b610e1e61064a83896115f5565b6115f5565b9850610e33856105398d86611947565b98610c91565b9094508681813d8311610e61575b610e51818361151c565b810103126100ef57519388610c77565b503d610e47565b925085813d8311610e91575b610e7e818361151c565b810103126100ef57866004955192610c47565b503d610e74565b9093508581813d8311610ec0575b610eb0818361151c565b810103126100ef57519287610c04565b503d610ea6565b346100ef5760803660031901126100ef57610ee06114a6565b610ee93661153e565b60405191610ef6836114ea565b606036843760405163ddca3f4360e01b8152916001600160a01b038216906020908185600481865afa948515610358576000956110ba575b506003946003810290808204600314901517156106fd5760031c936040519363fee3f7f960e01b85528385600481845afa9485156103585760009561108b575b508360049160405192838092630f446c1d60e41b82525afa9081156103585760009161105e575b50610fa182949261178c565b91604051948591610fb1836114ea565b84518352808501519083015260408401516040830152610fd5836105398684611947565b9460005b8a8110611036575050610ff0929161053991611947565b9060005b87811061100957604051806103d68b826114bc565b806105ca611024886105948861058f6105886001988a6115f5565b0461102f828c6115f5565b5201610ff4565b81929350611049610db6826001946115f5565b611053828a6115f5565b520190869291610fd9565b90508381813d8311611084575b611075818361151c565b810103126100ef575188610f95565b503d61106b565b9094508381813d83116110b3575b6110a3818361151c565b810103126100ef57519383610f6e565b503d611099565b9094508181813d83116110e2575b6110d2818361151c565b810103126100ef57519386610f2e565b503d6110c8565b346100ef5760003660031901126100ef57602060405160038152f35b346100ef5760203660031901126100ef576103d66103ca6111246114a6565b61178c565b346100ef5760203660031901126100ef576103d66103ca6111486114a6565b6116e8565b346100ef5760203660031901126100ef576103d66103ca61116c6114a6565b611636565b346100ef5760803660031901126100ef5761118a6114a6565b6001600160a01b0381169061120b6111aa6111a48361178c565b83611947565b6105f0611201826111ba86611636565b956111f36111ca602435846115f5565b51670de0b6b3a76400006111ec6111e36024358c6115f5565b516064356115c2565b049061161c565b9060443590602435906119aa565b91604435906115f5565b60001981019081116106fd5760405163ddca3f4360e01b8152602091908281600481885afa908115610358578390600092611327575b50600491926112576402540be4009485926115c2565b04956040519283809263fee3f7f960e01b82525afa8015610358576000906112f8575b6112859150856115c2565b0492670de0b6b3a7640000810290808204670de0b6b3a764000014901517156106fd576112b89061021b604435856115f5565b91670de0b6b3a7640000840293808504670de0b6b3a764000014901517156106fd5760409361021b6112ed92604435906115f5565b908351928352820152f35b508281813d8311611320575b61130e818361151c565b810103126100ef57611285905161127a565b503d611304565b809250813d831161134e575b61133d818361151c565b810103126100ef5751826004611241565b503d611333565b346100ef5760403660031901126100ef5761136e6114a6565b602490606060243593611380816114ea565b3690376001600160a01b039182611396836118d3565b166040519182916318160ddd60e01b835282600460209485935afa92831561035857600093611477575b50604051946113ce866114ea565b606036873760009416935b600381106113ef57604051806103d688826114bc565b604051634903b0d160e01b8152600481018290529083828481895afa9182156103585785928991600091611440575b509261058f61142f926001956115c2565b61143982896115f5565b52016113d9565b935050508382813d8311611470575b611459818361151c565b810103126100ef579051849190889061058f61141e565b503d61144f565b9092508181813d831161149f575b61148f818361151c565b810103126100ef575191866113c0565b503d611485565b600435906001600160a01b03821682036100ef57565b6060810192916000915b600383106114d357505050565b6001908251815260208091019201920191906114c6565b6060810190811067ffffffffffffffff82111761150657604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761150657604052565b80604312156100ef5760405190611554826114ea565b816084916084116100ef576024905b8282106115705750505090565b8135815260209182019101611563565b80604312156100ef5760405190611596826114ea565b816084916084116100ef576024905b8282106115b25750505090565b81358152602091820191016115a5565b818102929181159184041417156106fd57565b81156115df570490565b634e487b7160e01b600052601260045260246000fd5b9060038110156116065760051b0190565b634e487b7160e01b600052603260045260246000fd5b919082018092116106fd57565b919082039182116106fd57565b906040805192611645846114ea565b60603685378360005b6003811061165c5750505050565b83516318880f5d60e21b8152600481018290526020919082816024816001600160a01b0389165afa9081156116dd576000916116a9575b50600192506116a282856115f5565b520161164e565b919282813d83116116d6575b6116bf818361151c565b810103126116d35750906001915138611693565b80fd5b503d6116b5565b86513d6000823e3d90fd5b9060408051926116f7846114ea565b60603685378360005b6003811061170e5750505050565b8351631f6be8d960e21b8152600481018290526020919082816024816001600160a01b0389165afa9081156116dd5760009161175b575b506001925061175482856115f5565b5201611700565b919282813d8311611785575b611771818361151c565b810103126116d35750906001915138611745565b503d611767565b90604080519261179b846114ea565b60603685378360005b600381106117b25750505050565b8351634903b0d160e01b8152600481018290526020919082816024816001600160a01b0389165afa9081156116dd576000916117ff575b50600192506117f882856115f5565b52016117a4565b919282813d8311611829575b611815818361151c565b810103126116d357509060019151386117e9565b503d61180b565b1561183757565b60405162461bcd60e51b815260206004820152602260248201527f496e697469616c206465706f73697420726571756972657320616c6c20636f696044820152616e7360f01b6064820152608490fd5b1561188e57565b60405162461bcd60e51b815260206004820152601a60248201527f4431206d7573742062652067726561746572207468616e2044300000000000006044820152606490fd5b604051637e062a3560e11b81526001600160a01b03916020908290600490829086165afa9081156103585760009161190a57501690565b6020813d60201161193f575b816119236020938361151c565b8101031261193b57519082821682036116d357501690565b5080fd5b3d9150611916565b61196490929192606060405161195c816114ea565b369037611636565b9160005b60038110611974575050565b80670de0b6b3a764000061199861198d600194886115f5565b51610d7084876115f5565b046119a382876115f5565b5201611968565b604051630f446c1d60e41b8152600495929492916020908290889082906001600160a01b03165afa90811561035857600091611bf6575b506119ec8183611c28565b809560009460039485850297858904871486151715611be357918994939188935b888510611b52575050505050600991611a25916115c2565b9102918483041484151715611b3d57611a45611a529392611a4c926115d5565b93856115d5565b9061161c565b918060005b60ff8110611aa35760405162461bcd60e51b8152602081880152601160248201527f646f6573206e6f7420636f6e76657267650000000000000000000000000000006044820152606490fd5b82611ab785611ab283806115c2565b61161c565b6001916001600160ff1b0381168103611b285790611ade85610a138a611ae495871b61161c565b906115d5565b938481811115611b115790611af891611629565b1115611b08576001905b01611a57565b50509250505090565b611b1a91611629565b1115611b0857600190611b02565b601189634e487b7160e01b6000525260246000fd5b601186634e487b7160e01b6000525260246000fd5b91939550919397848614600014611bb957611b788b611b7286809461161c565b9a6115c2565b888202918083048a1490151715611ba457600191611b95916115d5565b955b019290918a959492611a0d565b60118d634e487b7160e01b6000525260246000fd5b858214611bd957611b788b611b72611bd189876115f5565b51809461161c565b9794600190611b97565b634e487b7160e01b885260118b52602488fd5b906020823d602011611c20575b81611c106020938361151c565b810103126116d3575051386119e1565b3d9150611c03565b90600091825b60038110611df157508215611de957826003808402938085048214901517156106fd57909360001984018481119290919060005b60ff8110611cd55760405162461bcd60e51b815260206004820152602660248201527f696e76617269616e742063616c63756c6174696f6e20646964206e6f7420636f60448201527f6e766572676500000000000000000000000000000000000000000000000000006064820152608490fd5b8260005b838110611da4575083611cec8a8a6115c2565b90848302918383048614841517156106fd5781611d0d8a94611d129361161c565b6115c2565b916106fd57611d2190876115c2565b907f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831683036106fd57611ade611d5e9260019460021b9061161c565b938481811115611d8d5790611d7291611629565b1115611d82576001905b01611c62565b505094505050505090565b611d9691611629565b1115611d8257600190611d7c565b969084611db3919a939a6115c2565b611dbd88836115f5565b5190848202918083048614901517156106fd57600191611ddc916115d5565b9701989198969096611cd9565b505050600090565b92611e0260019161062086856115f5565b9301611c2e565b90600380821015611f5c578460009282850295858704841486151715611f485787929185915b858310611eef57505050600991611e45916115c2565b93029084820414841517156106fd57611a45611a4c91611e64946115d5565b908260005b60ff8110611e79575b5050505090565b84611e8884611ab283806115c2565b906001916001600160ff1b03821682036106fd57611ade85610a1389611eaf95871b61161c565b958681811115611ed85790611ec391611629565b1115611ed3576001905b01611e69565b611e72565b611ee191611629565b1115611ed357600190611ecd565b92959193509190828414611f3e57611f1489611f0e611bd187866115f5565b976115c2565b858202918083048714901517156106fd57600191611f31916115d5565b935b019091889392611e2f565b9492600190611f33565b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152601460248201527f6465763a20692061626f7665204e5f434f494e530000000000000000000000006044820152606490fdfea164736f6c6343000818000a",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816315a4d7fe14611355575080631f38b0c7146111715780632494acbd1461114d578063279a07cc1461112957806327e235e31461110557806329357750146110e9578063437fe6f914610ec757806346f57d4514610b9b5780635779dcd8146107b15780636d46a1db1461077d5780637619153d14610742578063789787ac146103da57806382abb1a31461039c578063aaf5eb6814610379578063ca4bc714146100f45763d73792a9146100cf57600080fd5b346100ef5760003660031901126100ef5760206040516402540be4008152f35b600080fd5b346100ef5760a03660031901126100ef5761010d6114a6565b6064359060249081356044356101228361178c565b9261012d8482611947565b906402540be400808802978089048214901517156103645760405163ddca3f4360e01b81526020989089816004816001600160a01b0388165afa9081156103585760009161032b575b5082039182116103165761018e6101949286926115d5565b966115f5565b518510156102d2579081816101a98694611636565b94846101b582846115f5565b51670de0b6b3a7640000809a6101cb858b6115f5565b516101d5916115c2565b046101df91611629565b916101e9946119aa565b916101f3916115f5565b516101fd91611629565b8381029381850414901517156102bd57610222929161021b916115f5565b51906115d5565b90600182018092116102a95760843582116102405750604051908152f35b82602e6084926040519262461bcd60e51b845260048401528201527f45786368616e676520726573756c74656420696e20666577657220636f696e7360448201527f207468616e2065787065637465640000000000000000000000000000000000006064820152fd5b634e487b7160e01b60009081526011600452fd5b83634e487b7160e01b60005260116004526000fd5b60405162461bcd60e51b815260048101889052600e818801527f4578636573732062616c616e63650000000000000000000000000000000000006044820152606490fd5b87634e487b7160e01b60005260116004526000fd5b90508981813d8311610351575b610342818361151c565b810103126100ef57518a610176565b503d610338565b6040513d6000823e3d90fd5b86634e487b7160e01b60005260116004526000fd5b346100ef5760003660031901126100ef576020604051670de0b6b3a76400008152f35b346100ef5760803660031901126100ef576103d66103ca6103bb6114a6565b6103c436611580565b90611947565b604051918291826114bc565b0390f35b346100ef5760803660031901126100ef576103f36114a6565b6103fc36611580565b906040519161040a836114ea565b606036843760405163ddca3f4360e01b8152916001600160a01b0391818316916020918286600481875afa95861561035857600096610713575b506003956003810290808204600314901517156106fd5760031c946040519463fee3f7f960e01b86528486600481845afa958615610358576000966106cc575b50908460049260405193848092630f446c1d60e41b82525afa90811561035857859060009261069c575b600493506104bb866118d3565b16604051938480926318160ddd60e01b82525afa9182156103585760009261066d575b506000936104eb8161178c565b921580159485610657575b969190604051978893610508856114ea565b8651855280870151908501526040860151604085015260005b8c81106105fb5750505061053e929161053991611947565b611c28565b9161054a848411611887565b61055d575b604051806103d68a826114bc565b60005b87811061056d575061054f565b806105ca6105d0886105948861058f6105886001988a6115f5565b518a6115c2565b6115d5565b61059e858b6115f5565b518111156105e2576105bb906105b4868c6115f5565b5190611629565b6402540be4009384918d6115c2565b046115c2565b046105db828c6115f5565b5201610560565b6105f6906105f0868c6115f5565b51611629565b6105bb565b826001929394955061063d575b61062761061582896115f5565b5161062083866115f5565b519061161c565b610631828c6115f5565b52019088939291610521565b61065261064a82856115f5565b511515611830565b610608565b9550610667836105398685611947565b956104f6565b9091508481813d8311610695575b610685818361151c565b810103126100ef575190896104de565b503d61067b565b915082813d83116106c5575b6106b2818361151c565b810103126100ef578460049251916104ae565b503d6106a8565b919095508482813d83116106f6575b6106e5818361151c565b810103126100ef5790519484610484565b503d6106db565b634e487b7160e01b600052601160045260246000fd5b9095508281813d831161073b575b61072b818361151c565b810103126100ef57519487610444565b503d610721565b346100ef5760a03660031901126100ef5760206107756107606114a6565b61053961076c3661153e565b60843592611947565b604051908152f35b346100ef5760203660031901126100ef5760206107a061079b6114a6565b6118d3565b6001600160a01b0360405191168152f35b346100ef5760603660031901126100ef576107ca6114a6565b604051630f446c1d60e41b8152906020826004816001600160a01b0385165afa91821561035857600092610b67575b5060405163ddca3f4360e01b81526020816004816001600160a01b0386165afa90811561035857600091610b35575b506003810290808204600314901517156106fd5760031c91610849826116e8565b906060604051610858816114ea565b36903761086483611636565b9360005b60038110610a95575061087b8286611c28565b94610888866024356115c2565b600460206001600160a01b0361089d896118d3565b16604051928380926318160ddd60e01b82525afa90811561035857600091610a61575b506108ce906108d4926115d5565b87611629565b916108e3838360443587611e09565b906109036108f7836105f0604435876115f5565b61021b604435896115f5565b9760005b600381106109db5750505050610939929161093391610928604435826115f5565b519360443590611e09565b90611629565b60001981019081116106fd576001600160a01b03936109336109649261021b602095604435906115f5565b9160046040518095819363fee3f7f960e01b8352165afa918215610358576000926109a5575b60206402540be40061099c85856115c2565b04604051908152f35b91506020823d6020116109d3575b816109c06020938361151c565b810103126100ef5790519061099c61098a565b3d91506109b3565b600190610a296402540be400610a1e85888b868c6044358203610a3a57610a1392610a0d610a18969361058f936115f5565b516115c2565b611629565b876115c2565b046105f083896115f5565b610a3382886115f5565b5201610907565b92509261058f61093392610a0d86610a55610a5c98886115f5565b51966115f5565b610a18565b90506020813d602011610a8d575b81610a7c6020938361151c565b810103126100ef57516108d46108c0565b3d9150610a6f565b610a9f81876115f5565b51604051634903b0d160e01b81526004810183905291906020836024816001600160a01b038b165afa92831561035857600093610aff575b50610aed600193670de0b6b3a7640000926115c2565b04610af882896115f5565b5201610868565b92506020833d602011610b2d575b81610b1a6020938361151c565b810103126100ef57915191610aed610ad7565b3d9150610b0d565b90506020813d602011610b5f575b81610b506020938361151c565b810103126100ef575183610828565b3d9150610b43565b9091506020813d602011610b93575b81610b836020938361151c565b810103126100ef575190826107f9565b3d9150610b76565b346100ef5760803660031901126100ef57610bb46114a6565b610bbd3661153e565b906001600160a01b039081811660405190610bd7826114ea565b60603683376040519163ddca3f4360e01b83526020948584600481865afa93841561035857600094610e98575b506003966003850294808604600314901517156106fd578660049560031c9460405196878092630f446c1d60e41b82525afa918215610358578790600093610e68575b60049650610c54886118d3565b16604051968780926318160ddd60e01b82525afa94851561035857600095610e39575b50600095610c848161178c565b9886159485159687610e23575b60409b9a9b5194610ca1866114ea565b8b5186528c8c01518d87015260408c0151604087015260005b848110610de5575050610cd1866105398787611947565b9a610cdd8b8d11611887565b8b98610d1b575b50505050505050600014610cfd57505050604051908152f35b610d16935090610d108361058f93611629565b906115c2565b610775565b90919293949596975060005b8a8c868310610d525750505050505050610d45929161053991611947565b9086808080808080610ce4565b610d9d610d77849361058f6402540be40094610d706001988a6115f5565b51906115c2565b610d81848c6115f5565b51811115610dd257610d97906105b4858d6115f5565b866115c2565b04610da882876115f5565b52610dc1610db682876115f5565b516105f0838b6115f5565b610dcb828a6115f5565b5201610d27565b610de0906105f0858d6115f5565b610d97565b80610dfd8e9f9e600193610615918d610e11576115f5565b610e07828a6115f5565b52019c9b9c610cba565b610e1e61064a83896115f5565b6115f5565b9850610e33856105398d86611947565b98610c91565b9094508681813d8311610e61575b610e51818361151c565b810103126100ef57519388610c77565b503d610e47565b925085813d8311610e91575b610e7e818361151c565b810103126100ef57866004955192610c47565b503d610e74565b9093508581813d8311610ec0575b610eb0818361151c565b810103126100ef57519287610c04565b503d610ea6565b346100ef5760803660031901126100ef57610ee06114a6565b610ee93661153e565b60405191610ef6836114ea565b606036843760405163ddca3f4360e01b8152916001600160a01b038216906020908185600481865afa948515610358576000956110ba575b506003946003810290808204600314901517156106fd5760031c936040519363fee3f7f960e01b85528385600481845afa9485156103585760009561108b575b508360049160405192838092630f446c1d60e41b82525afa9081156103585760009161105e575b50610fa182949261178c565b91604051948591610fb1836114ea565b84518352808501519083015260408401516040830152610fd5836105398684611947565b9460005b8a8110611036575050610ff0929161053991611947565b9060005b87811061100957604051806103d68b826114bc565b806105ca611024886105948861058f6105886001988a6115f5565b0461102f828c6115f5565b5201610ff4565b81929350611049610db6826001946115f5565b611053828a6115f5565b520190869291610fd9565b90508381813d8311611084575b611075818361151c565b810103126100ef575188610f95565b503d61106b565b9094508381813d83116110b3575b6110a3818361151c565b810103126100ef57519383610f6e565b503d611099565b9094508181813d83116110e2575b6110d2818361151c565b810103126100ef57519386610f2e565b503d6110c8565b346100ef5760003660031901126100ef57602060405160038152f35b346100ef5760203660031901126100ef576103d66103ca6111246114a6565b61178c565b346100ef5760203660031901126100ef576103d66103ca6111486114a6565b6116e8565b346100ef5760203660031901126100ef576103d66103ca61116c6114a6565b611636565b346100ef5760803660031901126100ef5761118a6114a6565b6001600160a01b0381169061120b6111aa6111a48361178c565b83611947565b6105f0611201826111ba86611636565b956111f36111ca602435846115f5565b51670de0b6b3a76400006111ec6111e36024358c6115f5565b516064356115c2565b049061161c565b9060443590602435906119aa565b91604435906115f5565b60001981019081116106fd5760405163ddca3f4360e01b8152602091908281600481885afa908115610358578390600092611327575b50600491926112576402540be4009485926115c2565b04956040519283809263fee3f7f960e01b82525afa8015610358576000906112f8575b6112859150856115c2565b0492670de0b6b3a7640000810290808204670de0b6b3a764000014901517156106fd576112b89061021b604435856115f5565b91670de0b6b3a7640000840293808504670de0b6b3a764000014901517156106fd5760409361021b6112ed92604435906115f5565b908351928352820152f35b508281813d8311611320575b61130e818361151c565b810103126100ef57611285905161127a565b503d611304565b809250813d831161134e575b61133d818361151c565b810103126100ef5751826004611241565b503d611333565b346100ef5760403660031901126100ef5761136e6114a6565b602490606060243593611380816114ea565b3690376001600160a01b039182611396836118d3565b166040519182916318160ddd60e01b835282600460209485935afa92831561035857600093611477575b50604051946113ce866114ea565b606036873760009416935b600381106113ef57604051806103d688826114bc565b604051634903b0d160e01b8152600481018290529083828481895afa9182156103585785928991600091611440575b509261058f61142f926001956115c2565b61143982896115f5565b52016113d9565b935050508382813d8311611470575b611459818361151c565b810103126100ef579051849190889061058f61141e565b503d61144f565b9092508181813d831161149f575b61148f818361151c565b810103126100ef575191866113c0565b503d611485565b600435906001600160a01b03821682036100ef57565b6060810192916000915b600383106114d357505050565b6001908251815260208091019201920191906114c6565b6060810190811067ffffffffffffffff82111761150657604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761150657604052565b80604312156100ef5760405190611554826114ea565b816084916084116100ef576024905b8282106115705750505090565b8135815260209182019101611563565b80604312156100ef5760405190611596826114ea565b816084916084116100ef576024905b8282106115b25750505090565b81358152602091820191016115a5565b818102929181159184041417156106fd57565b81156115df570490565b634e487b7160e01b600052601260045260246000fd5b9060038110156116065760051b0190565b634e487b7160e01b600052603260045260246000fd5b919082018092116106fd57565b919082039182116106fd57565b906040805192611645846114ea565b60603685378360005b6003811061165c5750505050565b83516318880f5d60e21b8152600481018290526020919082816024816001600160a01b0389165afa9081156116dd576000916116a9575b50600192506116a282856115f5565b520161164e565b919282813d83116116d6575b6116bf818361151c565b810103126116d35750906001915138611693565b80fd5b503d6116b5565b86513d6000823e3d90fd5b9060408051926116f7846114ea565b60603685378360005b6003811061170e5750505050565b8351631f6be8d960e21b8152600481018290526020919082816024816001600160a01b0389165afa9081156116dd5760009161175b575b506001925061175482856115f5565b5201611700565b919282813d8311611785575b611771818361151c565b810103126116d35750906001915138611745565b503d611767565b90604080519261179b846114ea565b60603685378360005b600381106117b25750505050565b8351634903b0d160e01b8152600481018290526020919082816024816001600160a01b0389165afa9081156116dd576000916117ff575b50600192506117f882856115f5565b52016117a4565b919282813d8311611829575b611815818361151c565b810103126116d357509060019151386117e9565b503d61180b565b1561183757565b60405162461bcd60e51b815260206004820152602260248201527f496e697469616c206465706f73697420726571756972657320616c6c20636f696044820152616e7360f01b6064820152608490fd5b1561188e57565b60405162461bcd60e51b815260206004820152601a60248201527f4431206d7573742062652067726561746572207468616e2044300000000000006044820152606490fd5b604051637e062a3560e11b81526001600160a01b03916020908290600490829086165afa9081156103585760009161190a57501690565b6020813d60201161193f575b816119236020938361151c565b8101031261193b57519082821682036116d357501690565b5080fd5b3d9150611916565b61196490929192606060405161195c816114ea565b369037611636565b9160005b60038110611974575050565b80670de0b6b3a764000061199861198d600194886115f5565b51610d7084876115f5565b046119a382876115f5565b5201611968565b604051630f446c1d60e41b8152600495929492916020908290889082906001600160a01b03165afa90811561035857600091611bf6575b506119ec8183611c28565b809560009460039485850297858904871486151715611be357918994939188935b888510611b52575050505050600991611a25916115c2565b9102918483041484151715611b3d57611a45611a529392611a4c926115d5565b93856115d5565b9061161c565b918060005b60ff8110611aa35760405162461bcd60e51b8152602081880152601160248201527f646f6573206e6f7420636f6e76657267650000000000000000000000000000006044820152606490fd5b82611ab785611ab283806115c2565b61161c565b6001916001600160ff1b0381168103611b285790611ade85610a138a611ae495871b61161c565b906115d5565b938481811115611b115790611af891611629565b1115611b08576001905b01611a57565b50509250505090565b611b1a91611629565b1115611b0857600190611b02565b601189634e487b7160e01b6000525260246000fd5b601186634e487b7160e01b6000525260246000fd5b91939550919397848614600014611bb957611b788b611b7286809461161c565b9a6115c2565b888202918083048a1490151715611ba457600191611b95916115d5565b955b019290918a959492611a0d565b60118d634e487b7160e01b6000525260246000fd5b858214611bd957611b788b611b72611bd189876115f5565b51809461161c565b9794600190611b97565b634e487b7160e01b885260118b52602488fd5b906020823d602011611c20575b81611c106020938361151c565b810103126116d3575051386119e1565b3d9150611c03565b90600091825b60038110611df157508215611de957826003808402938085048214901517156106fd57909360001984018481119290919060005b60ff8110611cd55760405162461bcd60e51b815260206004820152602660248201527f696e76617269616e742063616c63756c6174696f6e20646964206e6f7420636f60448201527f6e766572676500000000000000000000000000000000000000000000000000006064820152608490fd5b8260005b838110611da4575083611cec8a8a6115c2565b90848302918383048614841517156106fd5781611d0d8a94611d129361161c565b6115c2565b916106fd57611d2190876115c2565b907f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831683036106fd57611ade611d5e9260019460021b9061161c565b938481811115611d8d5790611d7291611629565b1115611d82576001905b01611c62565b505094505050505090565b611d9691611629565b1115611d8257600190611d7c565b969084611db3919a939a6115c2565b611dbd88836115f5565b5190848202918083048614901517156106fd57600191611ddc916115d5565b9701989198969096611cd9565b505050600090565b92611e0260019161062086856115f5565b9301611c2e565b90600380821015611f5c578460009282850295858704841486151715611f485787929185915b858310611eef57505050600991611e45916115c2565b93029084820414841517156106fd57611a45611a4c91611e64946115d5565b908260005b60ff8110611e79575b5050505090565b84611e8884611ab283806115c2565b906001916001600160ff1b03821682036106fd57611ade85610a1389611eaf95871b61161c565b958681811115611ed85790611ec391611629565b1115611ed3576001905b01611e69565b611e72565b611ee191611629565b1115611ed357600190611ecd565b92959193509190828414611f3e57611f1489611f0e611bd187866115f5565b976115c2565b858202918083048714901517156106fd57600191611f31916115d5565b935b019091889392611e2f565b9492600190611f33565b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152601460248201527f6465763a20692061626f7665204e5f434f494e530000000000000000000000006044820152606490fdfea164736f6c6343000818000a",
  "devdoc": {
    "details": "This contract provides utility functions for retrieving information and calculating fees related to stable swaps with three coins.",
    "kind": "dev",
    "methods": {
      "PRECISION_MUL(address)": {
        "params": {
          "_swap": "Address of the stable swap contract"
        }
      },
      "RATES(address)": {
        "params": {
          "_swap": "Address of the stable swap contract"
        }
      },
      "_xp_mem(address,uint256[3])": {
        "params": {
          "_balances": "The array of balances to calculate virtual balances from."
        }
      },
      "balances(address)": {
        "params": {
          "_swap": "Address of the stable swap contract"
        }
      },
      "calc_coins_amount(address,uint256)": {
        "params": {
          "_amount": "Amount of LP tokens to burn in the withdrawal",
          "_swap": "Address of the stable swap contract"
        }
      },
      "get_D_mem(address,uint256[3],uint256)": {
        "params": {
          "_balances": "Array of balances to calculate virtual balances from.",
          "amp": "Amplification factor of the pool."
        }
      },
      "get_add_liquidity_fee(address,uint256[3])": {
        "params": {
          "_swap": "Address of the stable swap contract",
          "amounts": "Array of amounts for each coin being deposited"
        }
      },
      "get_add_liquidity_mint_amount(address,uint256[3])": {
        "params": {
          "_swap": "Address of the stable swap contract",
          "amounts": "Array of amounts for each coin being deposited"
        }
      },
      "get_dx(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_swap": ": Addresses of pool conracts .",
          "dy": ":  the given amount out",
          "i": ": the token index.",
          "j": ": the token index ",
          "max_dx": ": the maximum of amount in "
        }
      },
      "get_exchange_fee(address,uint256,uint256,uint256)": {
        "params": {
          "_swap": "Address of the stable swap contract",
          "dx": "Amount of token to swap from",
          "i": "Index of the token to swap from",
          "j": "Index of the token to swap to"
        },
        "returns": {
          "exAdminFee": "Admin fee for the swap",
          "exFee": "Exchange fee for the swap"
        }
      },
      "get_remove_liquidity_imbalance_fee(address,uint256[3])": {
        "params": {
          "_swap": "Address of the stable swap contract",
          "amounts": "Array of amounts for each coin being withdrawn"
        }
      },
      "get_remove_liquidity_one_coin_fee(address,uint256,uint256)": {
        "params": {
          "_swap": "Address of the stable swap contract",
          "_token_amount": "Amount of liquidity tokens being withdrawn",
          "i": "Index of the coin to withdraw"
        }
      },
      "token(address)": {
        "params": {
          "_swap": "Address of the stable swap contract"
        }
      }
    },
    "title": "StableSwapThreePoolInfo",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PRECISION_MUL(address)": {
        "notice": "Get the precision multipliers for each coin in the pool"
      },
      "RATES(address)": {
        "notice": "Get the exchange rates for each coin in the pool"
      },
      "_xp_mem(address,uint256[3])": {
        "notice": "Calculates the array of virtual balances for the pool, scaled by precision, using provided balances."
      },
      "balances(address)": {
        "notice": "Get the balances of each coin in the pool"
      },
      "calc_coins_amount(address,uint256)": {
        "notice": "Calculate the amount of each coin received when removing liquidity "
      },
      "get_D_mem(address,uint256[3],uint256)": {
        "notice": "Calculates the total value of the pool's assets (invariant D), given balances and amplification factor."
      },
      "get_add_liquidity_fee(address,uint256[3])": {
        "notice": "Calculate the fee charged when adding liquidity"
      },
      "get_add_liquidity_mint_amount(address,uint256[3])": {
        "notice": "Calculate the amount of LP token received when adding liquidity"
      },
      "get_dx(address,uint256,uint256,uint256,uint256)": {
        "notice": "get amountIn  with the given amount out  "
      },
      "get_exchange_fee(address,uint256,uint256,uint256)": {
        "notice": "Calculates the exchange fee and admin fee for a token swap"
      },
      "get_remove_liquidity_imbalance_fee(address,uint256[3])": {
        "notice": "Calculate the fee charged when removing liquidity"
      },
      "get_remove_liquidity_one_coin_fee(address,uint256,uint256)": {
        "notice": "Calculate the fee charged when removing liquidity for a single coin"
      },
      "token(address)": {
        "notice": "Get the LP token of the two pool"
      }
    },
    "notice": "Contract for retrieving information about stable swaps with three coins",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}