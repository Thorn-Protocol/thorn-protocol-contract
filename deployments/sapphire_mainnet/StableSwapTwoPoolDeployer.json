{
  "address": "0x20973dfFa9Ee32b03f4a5e3c5A686B48FF63b1B1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "N_COINS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_A",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_admin_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LP",
          "type": "address"
        }
      ],
      "name": "createSwapPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x791b0b6ed4171b217263966c72ce5c8f5b9ec09ed659a279fa600d413cf0f339",
  "receipt": {
    "to": null,
    "from": "0x4283927A9686468095cC5BAEb9205f7016A027b1",
    "contractAddress": "0x20973dfFa9Ee32b03f4a5e3c5A686B48FF63b1B1",
    "transactionIndex": 0,
    "gasUsed": "3707006",
    "logsBloom": "0x
    "blockHash": "0x40fb2d0cf4d0c94b240c4ddc532018307c11286140e071d3818bd5d5ca434215",
    "transactionHash": "0x791b0b6ed4171b217263966c72ce5c8f5b9ec09ed659a279fa600d413cf0f339",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5903033,
        "transactionHash": "0x791b0b6ed4171b217263966c72ce5c8f5b9ec09ed659a279fa600d413cf0f339",
        "address": "0x20973dfFa9Ee32b03f4a5e3c5A686B48FF63b1B1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004283927a9686468095cc5baeb9205f7016a027b1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x40fb2d0cf4d0c94b240c4ddc532018307c11286140e071d3818bd5d5ca434215"
      }
    ],
    "blockNumber": 5903033,
    "cumulativeGasUsed": "3707006",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1829c01f17cf3f9febab972c66c3c9e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"N_COINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_admin_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LP\",\"type\":\"address\"}],\"name\":\"createSwapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract manages the deployment of pool, including sorting the pool tokens\",\"kind\":\"dev\",\"methods\":{\"createSwapPair(address,address,uint256,uint256,uint256,address,address)\":{\"params\":{\"_A\":\": Amplification coefficient multiplied by n * (n - 1)\",\"_LP\":\": LP\",\"_admin\":\": Admin\",\"_admin_fee\":\": Admin fee\",\"_fee\":\": Fee to charge for exchanges\",\"_tokenA\":\": Addresses of ERC20 conracts .\",\"_tokenB\":\": Addresses of ERC20 conracts .\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"stable swap three pool deployer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createSwapPair(address,address,uint256,uint256,uint256,address,address)\":{\"notice\":\"createSwapPair\"}},\"notice\":\"A deployer contract for executing the three pool deloyment\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableSwap/StableSwapTwoPoolDeployer.sol\":\"StableSwapTwoPoolDeployer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IStableSwapLP {\\n    /**\\n     * @notice Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates new tokens and assigns them to a specified address.\\n     * @param _to Address to which the newly created tokens will be assigned.\\n     * @param _amount Amount of tokens to be created and assigned.\\n     */\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burns a specific amount of tokens from a specified address.\\n     * @param _to Address from which tokens will be burned.\\n     * @param _amount Amount of tokens to be burned.\\n     */\\n    function burnFrom(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets a new minter address.\\n     * @param _newMinter Address of the new minter.\\n     */\\n    function setMinter(address _newMinter) external;\\n}\\n\",\"keccak256\":\"0xc0faa6d18f8b226a88026651b8e3b1dda1bb3eea3655db9de227654e53e0a83d\",\"license\":\"MIT\"},\"contracts/stableSwap/StableSwapTwoPoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./plain-pools/StableSwapTwoPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title stable swap three pool deployer\\n * @notice A deployer contract for executing the three pool deloyment\\n * @dev This contract manages the deployment of pool, including sorting the pool tokens\\n */\\n\\ncontract StableSwapTwoPoolDeployer is Ownable {\\n    uint256 public constant N_COINS = 2;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n     \\u2551          CONSTRUCTOR         \\u2551\\n     \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    constructor() {}\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n     \\u2551          ADMIN FUNCTIONS     \\u2551\\n     \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice createSwapPair\\n     * @param _tokenA: Addresses of ERC20 conracts .\\n     * @param _tokenB: Addresses of ERC20 conracts .\\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee: Fee to charge for exchanges\\n     * @param _admin_fee: Admin fee\\n     * @param _admin: Admin\\n     * @param _LP: LP\\n     */\\n    function createSwapPair(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee,\\n        address _admin,\\n        address _LP\\n    ) external onlyOwner returns (address) {\\n        require(\\n            _tokenA != address(0) &&\\n                _tokenB != address(0) &&\\n                _tokenA != _tokenB,\\n            \\\"Illegal token\\\"\\n        );\\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\\n        address[N_COINS] memory coins = [t0, t1];\\n        // create swap contract\\n        bytes memory bytecode = type(StableSwapTwoPool).creationCode;\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(t0, t1, msg.sender, block.timestamp, block.chainid)\\n        );\\n        address swapContract;\\n        assembly {\\n            swapContract := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        StableSwapTwoPool(swapContract).initialize(\\n            coins,\\n            _A,\\n            _fee,\\n            _admin_fee,\\n            _admin,\\n            _LP\\n        );\\n\\n        return swapContract;\\n    }\\n\\n    /**\\n     * @notice Sorts two token addresses in a consistent order.\\n     * @param tokenA: Addresses of ERC20 conracts .\\n     * @param tokenB: Addresses of ERC20 conracts .\\n     */\\n    function sortTokens(\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n    }\\n}\\n\",\"keccak256\":\"0x43e5fdee4b10fd5a1978cc7d174b913382cec71e78618c704f205d62793bf11a\",\"license\":\"MIT\"},\"contracts/stableSwap/plain-pools/StableSwapTwoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../../interfaces/IStableSwapLP.sol\\\";\\n\\n/**\\n * @title StableSwapTwoPool\\n * @notice This contract facilitates liquidity addition, stable swapping, and liquidity removal in a stable swap system with two pools.\\n * @dev It includes functions for adding liquidity, stable swapping, and removing liquidity, as well as parameter calculation for main operations.\\n */\\n\\ncontract StableSwapTwoPool is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          CONSTANT            \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    uint256 public constant N_COINS = 2; //The number of coins within the pool\\n\\n    uint256 public constant MAX_DECIMAL = 18; //Maximum number of decimal places for the token balances\\n    uint256 public constant FEE_DENOMINATOR = 1e10; //The denominator used to calculate the fee, fees are expressed as a fraction of 1e10\\n    uint256 public constant PRECISION = 1e18; // The precision to which values are calculated, accurate up to 18 decimal places\\n    uint256[N_COINS] public PRECISION_MUL; //Array of integers that coin balances are multiplied by in order to adjust their precision to 18 decimal places\\n    uint256[N_COINS] public RATES; //Array of integers indicating the relative value of `1e18` tokens for each stablecoin\\n\\n    uint256 public constant MAX_ADMIN_FEE = 1e10;\\n    uint256 public constant MAX_FEE = 5e9;\\n    uint256 public constant MAX_A = 1e6;\\n    uint256 public constant MAX_A_CHANGE = 10;\\n    uint256 public constant MIN_ROSE_gas = 2300;\\n    uint256 public constant MAX_ROSE_gas = 23000;\\n\\n    uint256 public constant ADMIN_ACTIONS_DELAY = 3 days;\\n    uint256 public constant MIN_RAMP_TIME = 1 days;\\n\\n    address[N_COINS] public coins;\\n    uint256[N_COINS] public balances;\\n    uint256 public fee; // fee * 1e10.\\n    uint256 public admin_fee; // admin_fee * 1e10.\\n    uint256 public rose_gas = 4029; // transfer ROSE gas.\\n\\n    IStableSwapLP public token;\\n\\n    address constant ROSE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    bool support_ROSE;\\n\\n    uint256 public initial_A;\\n    uint256 public future_A;\\n    uint256 public initial_A_time;\\n    uint256 public future_A_time;\\n\\n    uint256 public admin_actions_deadline;\\n    uint256 public future_fee;\\n    uint256 public future_admin_fee;\\n\\n    uint256 public kill_deadline;\\n    uint256 public constant KILL_DEADLINE_DT = 2 * 30 days;\\n    bool public is_killed;\\n\\n    address public immutable STABLESWAP_FACTORY;\\n    bool public isInitialized;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          EVENT               \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 sold_id,\\n        uint256 tokens_sold,\\n        uint256 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[N_COINS] token_amounts,\\n        uint256[N_COINS] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[N_COINS] token_amounts,\\n        uint256[N_COINS] fees,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 index,\\n        uint256 token_amount,\\n        uint256 coin_amount\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[N_COINS] token_amounts,\\n        uint256[N_COINS] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event CommitNewFee(\\n        uint256 indexed deadline,\\n        uint256 fee,\\n        uint256 admin_fee\\n    );\\n    event NewFee(uint256 fee, uint256 admin_fee);\\n    event RampA(\\n        uint256 old_A,\\n        uint256 new_A,\\n        uint256 initial_time,\\n        uint256 future_time\\n    );\\n    event StopRampA(uint256 A, uint256 t);\\n    event SetROSEGas(uint256 rose_gas);\\n    event RevertParameters();\\n    event DonateAdminFees();\\n    event Kill();\\n    event Unkill();\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n     \\u2551          CONSTRUCTOR         \\u2551\\n     \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice constructor\\n     */\\n    constructor() {\\n        STABLESWAP_FACTORY = msg.sender;\\n    }\\n\\n    /**\\n     * @notice initialize\\n     * @param _coins: Addresses of ERC20 conracts of coins (c-tokens) involved\\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee: Fee to charge for exchanges\\n     * @param _admin_fee: Admin fee\\n     * @param _owner: Owner\\n     * @param _LP: LP address\\n     */\\n    function initialize(\\n        address[N_COINS] memory _coins,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee,\\n        address _owner,\\n        address _LP\\n    ) external {\\n        require(!isInitialized, \\\"Operations: Already initialized\\\");\\n        require(msg.sender == STABLESWAP_FACTORY, \\\"Operations: Not factory\\\");\\n        require(_A <= MAX_A, \\\"_A exceeds maximum\\\");\\n        require(_fee <= MAX_FEE, \\\"_fee exceeds maximum\\\");\\n        require(_admin_fee <= MAX_ADMIN_FEE, \\\"_admin_fee exceeds maximum\\\");\\n        isInitialized = true;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            require(_coins[i] != address(0), \\\"ZERO Address\\\");\\n            uint256 coinDecimal;\\n            if (_coins[i] == ROSE_ADDRESS) {\\n                coinDecimal = 18;\\n                support_ROSE = true;\\n            } else {\\n                coinDecimal = IERC20Metadata(_coins[i]).decimals();\\n            }\\n            require(\\n                coinDecimal <= MAX_DECIMAL,\\n                \\\"The maximum decimal cannot exceed 18\\\"\\n            );\\n            //set PRECISION_MUL and  RATES\\n            PRECISION_MUL[i] = 10 ** (MAX_DECIMAL - coinDecimal);\\n            RATES[i] = PRECISION * PRECISION_MUL[i];\\n        }\\n        coins = _coins;\\n        initial_A = _A;\\n        future_A = _A;\\n        fee = _fee;\\n        admin_fee = _admin_fee;\\n        kill_deadline = block.timestamp + KILL_DEADLINE_DT;\\n        token = IStableSwapLP(_LP);\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551         VIEW FUNCTIONS       \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n    /**\\n     * @notice Retrieves the current value of parameter A.\\n     * Handles ramping A up or down over time if specified.\\n     */\\n    function get_A() internal view returns (uint256) {\\n        //Handle ramping A up or down\\n        uint256 t1 = future_A_time;\\n        uint256 A1 = future_A;\\n        if (block.timestamp < t1) {\\n            uint256 A0 = initial_A;\\n            uint256 t0 = initial_A_time;\\n            // Expressions in uint256 cannot have negative numbers, thus \\\"if\\\"\\n            if (A1 > A0) {\\n                return A0 + ((A1 - A0) * (block.timestamp - t0)) / (t1 - t0);\\n            } else {\\n                return A0 - ((A0 - A1) * (block.timestamp - t0)) / (t1 - t0);\\n            }\\n        } else {\\n            // when t1 == 0 or block.timestamp >= t1\\n            return A1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter for the amplification coefficient of the pool.\\n     * The amplification coefficient A determines a pool\\u2019s tolerance for imbalance between the assets within it.\\n     */\\n    function A() external view returns (uint256) {\\n        return get_A();\\n    }\\n\\n    /**\\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision\\n     */\\n    function _xp() internal view returns (uint256[N_COINS] memory result) {\\n        result = RATES;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            result[i] = (result[i] * balances[i]) / PRECISION;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the array of virtual balances for the pool, scaled by precision, using provided balances.\\n     * @param _balances The array of balances to calculate virtual balances from.\\n     */\\n    function _xp_mem(\\n        uint256[N_COINS] memory _balances\\n    ) internal view returns (uint256[N_COINS] memory result) {\\n        result = RATES;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            result[i] = (result[i] * _balances[i]) / PRECISION;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the total value of the pool's assets (invariant D), given virtual balances and amplification factor.\\n     * @param xp Array of virtual balances for the pool, scaled by precision.\\n     * @param amp Amplification factor of the pool.\\n     * @return D The total value of the pool's assets (invariant D).\\n     */\\n    function get_D(\\n        uint256[N_COINS] memory xp,\\n        uint256 amp\\n    ) internal pure returns (uint256) {\\n        uint256 S;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            S += xp[i];\\n        }\\n        if (S == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev;\\n        uint256 D = S;\\n        uint256 Ann = amp * N_COINS;\\n        for (uint256 j = 0; j < 255; j++) {\\n            uint256 D_P = D;\\n            for (uint256 k = 0; k < N_COINS; k++) {\\n                D_P = (D_P * D) / (xp[k] * N_COINS); // If division by 0, this will be borked: only withdrawal will work. And that is good\\n            }\\n            Dprev = D;\\n            D =\\n                ((Ann * S + D_P * N_COINS) * D) /\\n                ((Ann - 1) * D + (N_COINS + 1) * D_P);\\n            // Equality with the precision of 1\\n            if (D > Dprev) {\\n                if (D - Dprev <= 1) {\\n                    return D;\\n                }\\n            } else {\\n                if (Dprev - D <= 1) {\\n                    return D;\\n                }\\n            }\\n        }\\n        revert(\\\"invariant calculation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Calculates the total value of the pool's assets (invariant D), given balances and amplification factor.\\n     * @param _balances Array of balances to calculate virtual balances from.\\n     * @param amp Amplification factor of the pool.\\n     */\\n    function get_D_mem(\\n        uint256[N_COINS] memory _balances,\\n        uint256 amp\\n    ) internal view returns (uint256) {\\n        return get_D(_xp_mem(_balances), amp);\\n    }\\n\\n    /**\\n     * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\\n     * Can get the absolute price by multiplying it with the price of the underlying assets.\\n     * The method returns virtual_price as an integer with 1e18 precision.\\n     */\\n    function get_virtual_price() external view returns (uint256) {\\n        /**\\n        Returns portfolio virtual price (for calculating profit)\\n        scaled up by 1e18\\n        */\\n        uint256 D = get_D(_xp(), get_A());\\n        /**\\n        D is in the units similar to DAI (e.g. converted to precision 1e18)\\n        When balanced, D = n * x_u - total virtual value of the portfolio\\n        */\\n        uint256 token_supply = token.totalSupply();\\n        return (D * PRECISION) / token_supply;\\n    }\\n\\n    /**\\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\\n     * Returns the expected amount of LP tokens received.\\n     * This calculation accounts for slippage, but not fees.\\n     * @param amounts: Amount of each coin being deposited\\n     * @param deposit: Set True for deposits, False for withdrawals\\n     */\\n    function calc_token_amount(\\n        uint256[N_COINS] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        /**\\n        Simplified method to calculate addition or reduction in token supply at\\n        deposit or withdrawal without taking fees into account (but looking at\\n        slippage).\\n        Needed to prevent front-running, not for precise calculations!\\n        */\\n        uint256[N_COINS] memory _balances = balances;\\n        uint256 amp = get_A();\\n        uint256 D0 = get_D_mem(_balances, amp);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (deposit) {\\n                _balances[i] += amounts[i];\\n            } else {\\n                _balances[i] -= amounts[i];\\n            }\\n        }\\n        uint256 D1 = get_D_mem(_balances, amp);\\n        uint256 token_amount = token.totalSupply();\\n        uint256 difference;\\n        if (deposit) {\\n            difference = D1 - D0;\\n        } else {\\n            difference = D0 - D1;\\n        }\\n        return (difference * token_amount) / D0;\\n    }\\n\\n    /**\\n     * @notice Get the amount of coin j one would receive for swapping x of coin i, using the current virtual balances.\\n     * @param i Index of coin to swap from.\\n     * @param j Index of coin to swap to\\n     * @param x Amount of coin i to swap\\n     * @param xp_ The array of virtual balances for the pool, scaled by precision.\\n     */\\n    function get_y(\\n        uint256 i,\\n        uint256 j,\\n        uint256 x,\\n        uint256[N_COINS] memory xp_\\n    ) internal view returns (uint256) {\\n        // x in the input is converted to the same price/precision\\n        require(\\n            (i != j) && (i < N_COINS) && (j < N_COINS),\\n            \\\"Illegal parameter\\\"\\n        );\\n        uint256 amp = get_A();\\n        uint256 D = get_D(xp_, amp);\\n        uint256 c = D;\\n        uint256 S_;\\n        uint256 Ann = amp * N_COINS;\\n\\n        uint256 _x;\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            if (k == i) {\\n                _x = x;\\n            } else if (k != j) {\\n                _x = xp_[k];\\n            } else {\\n                continue;\\n            }\\n            S_ += _x;\\n            c = (c * D) / (_x * N_COINS);\\n        }\\n        c = (c * D) / (Ann * N_COINS);\\n        uint256 b = S_ + D / Ann; // - D\\n        uint256 y_prev;\\n        uint256 y = D;\\n\\n        for (uint256 m = 0; m < 255; m++) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            // Equality with the precision of 1\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        revert(\\\"does not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\\n     * @param i: Index of coin to swap from\\n     * @param j: Index of coin to swap to\\n     * @param dx: Amount of coin i to swap\\n     */\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        // dx and dy in c-units\\n        uint256[N_COINS] memory rates = RATES;\\n        uint256[N_COINS] memory xp = _xp();\\n\\n        uint256 x = xp[i] + ((dx * rates[i]) / PRECISION);\\n        uint256 y = get_y(i, j, x, xp);\\n        uint256 dy = ((xp[j] - y - 1) * PRECISION) / rates[j];\\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\\n        return dy - _fee;\\n    }\\n\\n    /**\\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\\n     * @param i Index of coin to swap from\\n     * @param j Index of coin to swap to\\n     * @param dx Amount of coin i to swap\\n     */\\n    function get_dy_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        // dx and dy in underlying units\\n        uint256[N_COINS] memory xp = _xp();\\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\\n\\n        uint256 x = xp[i] + dx * precisions[i];\\n        uint256 y = get_y(i, j, x, xp);\\n        uint256 dy = (xp[j] - y - 1) / precisions[j];\\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\\n        return dy - _fee;\\n    }\\n\\n    /**\\n     * @notice Get the amount of coin i given a reduction in invariant D, considering a specific value of parameter A and current virtual balances.\\n     * @param A_ The value of parameter A.\\n     * @param i The index of the coin for which the output amount is calculated.\\n     * @param xp The array of virtual balances for the pool, scaled by precision.\\n     * @param D The new value of invariant D.\\n     */\\n    function get_y_D(\\n        uint256 A_,\\n        uint256 i,\\n        uint256[N_COINS] memory xp,\\n        uint256 D\\n    ) internal pure returns (uint256) {\\n        /**\\n        Calculate x[i] if one reduces D from being calculated for xp to D\\n\\n        Done by solving quadratic equation iteratively.\\n        x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n        x_1**2 + b*x_1 = c\\n\\n        x_1 = (x_1**2 + c) / (2*x_1 + b)\\n        */\\n        // x in the input is converted to the same price/precision\\n        require(i < N_COINS, \\\"dev: i above N_COINS\\\");\\n        uint256 c = D;\\n        uint256 S_;\\n        uint256 Ann = A_ * N_COINS;\\n\\n        uint256 _x;\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            if (k != i) {\\n                _x = xp[k];\\n            } else {\\n                continue;\\n            }\\n            S_ += _x;\\n            c = (c * D) / (_x * N_COINS);\\n        }\\n        c = (c * D) / (Ann * N_COINS);\\n        uint256 b = S_ + D / Ann;\\n        uint256 y_prev;\\n        uint256 y = D;\\n\\n        for (uint256 k = 0; k < 255; k++) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            // Equality with the precision of 1\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        revert(\\\"does not converge\\\");\\n    }\\n\\n    function _calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        uint256 i\\n    ) internal view returns (uint256, uint256) {\\n        // First, need to calculate\\n        // * Get current D\\n        // * Solve Eqn against y_i for D - _token_amount\\n        uint256 amp = get_A();\\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\\n        uint256 total_supply = token.totalSupply();\\n\\n        uint256[N_COINS] memory xp = _xp();\\n\\n        uint256 D0 = get_D(xp, amp);\\n        uint256 D1 = D0 - (_token_amount * D0) / total_supply;\\n        uint256[N_COINS] memory xp_reduced = xp;\\n\\n        uint256 new_y = get_y_D(amp, i, xp, D1);\\n        uint256 dy_0 = (xp[i] - new_y) / precisions[i]; // w/o fees\\n\\n        for (uint256 k = 0; k < N_COINS; k++) {\\n            uint256 dx_expected;\\n            if (k == i) {\\n                dx_expected = (xp[k] * D1) / D0 - new_y;\\n            } else {\\n                dx_expected = xp[k] - (xp[k] * D1) / D0;\\n            }\\n            xp_reduced[k] -= (_fee * dx_expected) / FEE_DENOMINATOR;\\n        }\\n        uint256 dy = xp_reduced[i] - get_y_D(amp, i, xp_reduced, D1);\\n        dy = (dy - 1) / precisions[i]; // Withdraw less to account for rounding errors\\n\\n        return (dy, dy_0 - dy);\\n    }\\n\\n    /**\\n     * @notice Calculate the amount received when withdrawing a single coin.\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\n     * @param i: Index value of the coin to withdraw\\n     */\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        uint256 i\\n    ) external view returns (uint256) {\\n        (uint256 dy, ) = _calc_withdraw_one_coin(_token_amount, i);\\n        return dy;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          USER FUNCTIONS      \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts: Amount of each coin being deposited\\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\\n     */\\n    function add_liquidity(\\n        uint256[N_COINS] memory amounts,\\n        uint256 min_mint_amount\\n    ) external payable nonReentrant {\\n        //Amounts is amounts of c-tokens\\n        require(!is_killed, \\\"Killed\\\");\\n        if (!support_ROSE) {\\n            require(msg.value == 0, \\\"Inconsistent quantity\\\"); // Avoid sending ROSE by mistake.\\n        }\\n        uint256[N_COINS] memory fees;\\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 _admin_fee = admin_fee;\\n        uint256 amp = get_A();\\n\\n        uint256 token_supply = token.totalSupply();\\n        //Initial invariant\\n        uint256 D0;\\n        uint256[N_COINS] memory old_balances = balances;\\n        if (token_supply > 0) {\\n            D0 = get_D_mem(old_balances, amp);\\n        }\\n        uint256[N_COINS] memory new_balances = [\\n            old_balances[0],\\n            old_balances[1]\\n        ];\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (token_supply == 0) {\\n                require(amounts[i] > 0, \\\"Initial deposit requires all coins\\\");\\n            }\\n            // balances store amounts of c-tokens\\n            new_balances[i] = old_balances[i] + amounts[i];\\n        }\\n\\n        // Invariant after change\\n        uint256 D1 = get_D_mem(new_balances, amp);\\n        require(D1 > D0, \\\"D1 must be greater than D0\\\");\\n\\n        // We need to recalculate the invariant accounting for fees\\n        // to calculate fair user's share\\n        uint256 D2 = D1;\\n        if (token_supply > 0) {\\n            // Only account for fees if we are not the first to deposit\\n            for (uint256 i = 0; i < N_COINS; i++) {\\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n                uint256 difference;\\n                if (ideal_balance > new_balances[i]) {\\n                    difference = ideal_balance - new_balances[i];\\n                } else {\\n                    difference = new_balances[i] - ideal_balance;\\n                }\\n\\n                fees[i] = (_fee * difference) / FEE_DENOMINATOR;\\n                balances[i] =\\n                    new_balances[i] -\\n                    ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\\n                new_balances[i] -= fees[i];\\n            }\\n            D2 = get_D_mem(new_balances, amp);\\n        } else {\\n            balances = new_balances;\\n        }\\n\\n        // Calculate, how much pool tokens to mint\\n        uint256 mint_amount;\\n        if (token_supply == 0) {\\n            mint_amount = D1; // Take the dust if there was any\\n        } else {\\n            mint_amount = (token_supply * (D2 - D0)) / D0;\\n        }\\n        require(mint_amount >= min_mint_amount, \\\"Slippage screwed you\\\");\\n\\n        // Take coins from the sender\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 amount = amounts[i];\\n            address coin = coins[i];\\n            transfer_in(coin, amount);\\n        }\\n\\n        // Mint pool tokens\\n        token.mint(msg.sender, mint_amount);\\n\\n        emit AddLiquidity(\\n            msg.sender,\\n            amounts,\\n            fees,\\n            D1,\\n            token_supply + mint_amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Perform an exchange between two coins.\\n     * @param i: Index of coin to swap from\\n     * @param j: Index of coin to swap to\\n     * @param dx: Amount of coin i to swap\\n     * @param min_dy: \\tMinimum amount of j to receive\\n     */\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable nonReentrant {\\n        require(!is_killed, \\\"Killed\\\");\\n        if (!support_ROSE) {\\n            require(msg.value == 0, \\\"Inconsistent quantity\\\"); // Avoid sending ROSE by mistake.\\n        }\\n\\n        uint256[N_COINS] memory old_balances = balances;\\n        uint256[N_COINS] memory xp = _xp_mem(old_balances);\\n\\n        uint256 x = xp[i] + (dx * RATES[i]) / PRECISION;\\n        uint256 y = get_y(i, j, x, xp);\\n\\n        uint256 dy = xp[j] - y - 1; //  -1 just in case there were some rounding errors\\n        uint256 dy_fee = (dy * fee) / FEE_DENOMINATOR;\\n\\n        // Convert all to real units\\n        dy = ((dy - dy_fee) * PRECISION) / RATES[j];\\n        require(dy >= min_dy, \\\"Exchange resulted in fewer coins than expected\\\");\\n\\n        uint256 dy_admin_fee = (dy_fee * admin_fee) / FEE_DENOMINATOR;\\n        dy_admin_fee = (dy_admin_fee * PRECISION) / RATES[j];\\n\\n        // Change balances exactly in same way as we change actual ERC20 coin amounts\\n        balances[i] = old_balances[i] + dx;\\n        // When rounding errors happen, we undercharge admin fee in favor of LP\\n        balances[j] = old_balances[j] - dy - dy_admin_fee;\\n\\n        address iAddress = coins[i];\\n        if (iAddress == ROSE_ADDRESS) {\\n            require(dx == msg.value, \\\"Inconsistent quantity\\\");\\n        } else {\\n            IERC20(iAddress).safeTransferFrom(msg.sender, address(this), dx);\\n        }\\n        address jAddress = coins[j];\\n        transfer_out(jAddress, dy);\\n        emit TokenExchange(msg.sender, i, dx, j, dy);\\n    }\\n\\n    /**\\n     * @notice Withdraw coins from the pool\\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\\n     * @param min_amounts: Minimum amounts of underlying coins to receive\\n     */\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[N_COINS] memory min_amounts\\n    ) external nonReentrant {\\n        uint256 total_supply = token.totalSupply();\\n        uint256[N_COINS] memory amounts;\\n        uint256[N_COINS] memory fees; //Fees are unused but we've got them historically in event\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 value = (balances[i] * _amount) / total_supply;\\n            require(\\n                value >= min_amounts[i],\\n                \\\"Withdrawal resulted in fewer coins than expected\\\"\\n            );\\n            balances[i] -= value;\\n            amounts[i] = value;\\n            transfer_out(coins[i], value);\\n        }\\n\\n        token.burnFrom(msg.sender, _amount); // dev: insufficient funds\\n\\n        emit RemoveLiquidity(msg.sender, amounts, fees, total_supply - _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw coins from the pool in an imbalanced amount\\n     * @param amounts: List of amounts of underlying coins to withdraw\\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\\n     */\\n    function remove_liquidity_imbalance(\\n        uint256[N_COINS] memory amounts,\\n        uint256 max_burn_amount\\n    ) external nonReentrant {\\n        require(!is_killed, \\\"Killed\\\");\\n\\n        uint256 token_supply = token.totalSupply();\\n        require(token_supply > 0, \\\"dev: zero total supply\\\");\\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\\n        uint256 _admin_fee = admin_fee;\\n        uint256 amp = get_A();\\n\\n        uint256[N_COINS] memory old_balances = balances;\\n        uint256[N_COINS] memory new_balances = [\\n            old_balances[0],\\n            old_balances[1]\\n        ];\\n        uint256 D0 = get_D_mem(old_balances, amp);\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            new_balances[i] -= amounts[i];\\n        }\\n        uint256 D1 = get_D_mem(new_balances, amp);\\n        uint256[N_COINS] memory fees;\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 ideal_balance = (D1 * old_balances[i]) / D0;\\n            uint256 difference;\\n            if (ideal_balance > new_balances[i]) {\\n                difference = ideal_balance - new_balances[i];\\n            } else {\\n                difference = new_balances[i] - ideal_balance;\\n            }\\n            fees[i] = (_fee * difference) / FEE_DENOMINATOR;\\n            balances[i] =\\n                new_balances[i] -\\n                ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\\n            new_balances[i] -= fees[i];\\n        }\\n        uint256 D2 = get_D_mem(new_balances, amp);\\n\\n        uint256 token_amount = ((D0 - D2) * token_supply) / D0;\\n        require(token_amount > 0, \\\"token_amount must be greater than 0\\\");\\n        token_amount += 1; // In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(token_amount <= max_burn_amount, \\\"Slippage screwed you\\\");\\n\\n        token.burnFrom(msg.sender, token_amount); // dev: insufficient funds\\n\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (amounts[i] > 0) {\\n                transfer_out(coins[i], amounts[i]);\\n            }\\n        }\\n        token_supply -= token_amount;\\n        emit RemoveLiquidityImbalance(\\n            msg.sender,\\n            amounts,\\n            fees,\\n            D1,\\n            token_supply\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw a single coin from the pool\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\n     * @param i: Index value of the coin to withdraw\\n     * @param min_amount: Minimum amount of coin to receive\\n     */\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        uint256 i,\\n        uint256 min_amount\\n    ) external nonReentrant {\\n        // Remove _amount of liquidity all in a form of coin i\\n        require(!is_killed, \\\"Killed\\\");\\n        (uint256 dy, uint256 dy_fee) = _calc_withdraw_one_coin(\\n            _token_amount,\\n            i\\n        );\\n        require(dy >= min_amount, \\\"Not enough coins removed\\\");\\n\\n        balances[i] -= (dy + (dy_fee * admin_fee) / FEE_DENOMINATOR);\\n        token.burnFrom(msg.sender, _token_amount); // dev: insufficient funds\\n        transfer_out(coins[i], dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, i, _token_amount, dy);\\n    }\\n\\n    /**\\n     * @notice Internal function to transfer tokens using function \\\"safeTransfer\\\" of IERC20.\\n     * @param coin_address The address of the token to transfer.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function transfer_out(address coin_address, uint256 value) internal {\\n        if (coin_address == ROSE_ADDRESS) {\\n            _safeTransferROSE(msg.sender, value);\\n        } else {\\n            IERC20(coin_address).safeTransfer(msg.sender, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to transfer tokens using function \\\"safeTransferFrom\\\" of IERC20.\\n     * @param coin_address The address of the token to transfer.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function transfer_in(address coin_address, uint256 value) internal {\\n        if (coin_address == ROSE_ADDRESS) {\\n            require(value == msg.value, \\\"Inconsistent quantity\\\");\\n        } else {\\n            IERC20(coin_address).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                value\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to safely transfer ROSE tokens.\\n     * @param to The address to transfer the ROSE tokens to.\\n     * @param value The amount of ROSE tokens to transfer.\\n     */\\n    function _safeTransferROSE(address to, uint256 value) internal {\\n        (bool success, ) = to.call{gas: rose_gas, value: value}(\\\"\\\");\\n        require(success, \\\"ROSE transfer failed\\\");\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n     \\u2551          ADMIN FUNCTIONS     \\u2551\\n     \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice set the gas limit for transferring ROSE tokens.\\n     * @param _rose_gas The gas limit to be set.\\n     * The gas limit should be within the acceptable range defined by MIN_ROSE_gas and MAX_ROSE_gas.\\n     */\\n    function set_rose_gas(uint256 _rose_gas) external onlyOwner {\\n        require(\\n            _rose_gas >= MIN_ROSE_gas && _rose_gas <= MAX_ROSE_gas,\\n            \\\"Illegal gas\\\"\\n        );\\n        rose_gas = _rose_gas;\\n        emit SetROSEGas(_rose_gas);\\n    }\\n\\n    /**\\n     * @notice Ramp A up or down by setting a new A to take effect at a future point in time.\\n     * @param _future_A: New future value of A\\n     * @param _future_time: Timestamp at which new A should take effect\\n     */\\n    function ramp_A(\\n        uint256 _future_A,\\n        uint256 _future_time\\n    ) external onlyOwner {\\n        require(\\n            block.timestamp >= initial_A_time + MIN_RAMP_TIME,\\n            \\\"dev : too early\\\"\\n        );\\n        require(\\n            _future_time >= block.timestamp + MIN_RAMP_TIME,\\n            \\\"dev: insufficient time\\\"\\n        );\\n\\n        uint256 _initial_A = get_A();\\n        require(\\n            _future_A > 0 && _future_A < MAX_A,\\n            \\\"_future_A must be between 0 and MAX_A\\\"\\n        );\\n        require(\\n            (_future_A >= _initial_A &&\\n                _future_A <= _initial_A * MAX_A_CHANGE) ||\\n                (_future_A < _initial_A &&\\n                    _future_A * MAX_A_CHANGE >= _initial_A),\\n            \\\"Illegal parameter _future_A\\\"\\n        );\\n        initial_A = _initial_A;\\n        future_A = _future_A;\\n        initial_A_time = block.timestamp;\\n        future_A_time = _future_time;\\n\\n        emit RampA(_initial_A, _future_A, block.timestamp, _future_time);\\n    }\\n\\n    /**\\n     * @notice Stop ramping A up or down and sets A to current A.\\n     */\\n    function stop_rampget_A() external onlyOwner {\\n        uint256 current_A = get_A();\\n        initial_A = current_A;\\n        future_A = current_A;\\n        initial_A_time = block.timestamp;\\n        future_A_time = block.timestamp;\\n        // now (block.timestamp < t1) is always False, so we return saved A\\n\\n        emit StopRampA(current_A, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice The method commits new fee params: these fees do not take immediate effect.\\n     * @param new_fee: New pool fee\\n     * @param new_admin_fee: New admin fee (expressed as a percentage of the pool fee)\\n     * Both the pool fee and the admin_fee are capped by the constants MAX_FEE and MAX_ADMIN_FEE, respectively.\\n     * By default MAX_FEE is set at 50% and MAX_ADMIN_FEE at 100% (which is charged on the MAX_FEE amount).\\n     */\\n    function commit_new_fee(\\n        uint256 new_fee,\\n        uint256 new_admin_fee\\n    ) external onlyOwner {\\n        require(\\n            admin_actions_deadline == 0,\\n            \\\"admin_actions_deadline must be 0\\\"\\n        ); // dev: active action\\n        require(new_fee <= MAX_FEE, \\\"dev: fee exceeds maximum\\\");\\n        require(\\n            new_admin_fee <= MAX_ADMIN_FEE,\\n            \\\"dev: admin fee exceeds maximum\\\"\\n        );\\n\\n        admin_actions_deadline = block.timestamp + ADMIN_ACTIONS_DELAY;\\n        future_fee = new_fee;\\n        future_admin_fee = new_admin_fee;\\n\\n        emit CommitNewFee(admin_actions_deadline, new_fee, new_admin_fee);\\n    }\\n\\n    /**\\n     * @notice Apply the previously committed new pool and admin fees for the pool.\\n     */\\n    function apply_new_fee() external onlyOwner {\\n        require(\\n            block.timestamp >= admin_actions_deadline,\\n            \\\"dev: insufficient time\\\"\\n        );\\n        require(\\n            admin_actions_deadline != 0,\\n            \\\"admin_actions_deadline should not be 0\\\"\\n        );\\n\\n        admin_actions_deadline = 0;\\n        fee = future_fee;\\n        admin_fee = future_admin_fee;\\n\\n        emit NewFee(fee, admin_fee);\\n    }\\n\\n    /**\\n     * @notice Resets any previously committed new fees.\\n     */\\n    function revert_new_parameters() external onlyOwner {\\n        admin_actions_deadline = 0;\\n        emit RevertParameters();\\n    }\\n\\n    /**\\n     * @notice Get the admin balance for a single coin in the pool.\\n     * @param i: Index of the coin to get admin balance for\\n     */\\n    function admin_balances(uint256 i) external view returns (uint256) {\\n        if (coins[i] == ROSE_ADDRESS) {\\n            return address(this).balance - balances[i];\\n        } else {\\n            return IERC20(coins[i]).balanceOf(address(this)) - balances[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws and transfers admin fees of the pool to the pool owner.\\n     */\\n    function withdraw_admin_fees() external onlyOwner {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            uint256 value;\\n            if (coins[i] == ROSE_ADDRESS) {\\n                value = address(this).balance - balances[i];\\n            } else {\\n                value = IERC20(coins[i]).balanceOf(address(this)) - balances[i];\\n            }\\n            if (value > 0) {\\n                transfer_out(coins[i], value);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Donate all admin fees to the pool\\u2019s liquidity providers.\\n     */\\n    function donate_admin_fees() external onlyOwner {\\n        for (uint256 i = 0; i < N_COINS; i++) {\\n            if (coins[i] == ROSE_ADDRESS) {\\n                balances[i] = address(this).balance;\\n            } else {\\n                balances[i] = IERC20(coins[i]).balanceOf(address(this));\\n            }\\n        }\\n        emit DonateAdminFees();\\n    }\\n\\n    /**\\n     * @notice Pause a pool by setting the is_killed boolean flag to True.\\n     */\\n    function kill_me() external onlyOwner {\\n        require(kill_deadline > block.timestamp, \\\"Exceeded deadline\\\");\\n        is_killed = true;\\n        emit Kill();\\n    }\\n\\n    /**\\n     * @notice Unpause a pool that was previously paused, re-enabling exchanges.\\n     */\\n    function unkill_me() external onlyOwner {\\n        is_killed = false;\\n        emit Unkill();\\n    }\\n}\\n\",\"keccak256\":\"0x8ea67c3227fa76ff9227246f7493d99a3fac4b03e09ca0192a171ea1e17cb895\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c90816329357750146100cd578163715018a614610065575080638da5cb5b146100605780639013148d1461005b5763f2fde38b1461005657600080fd5b610331565b610177565b6100f8565b346100ca57806003193601126100ca5761007d610558565b806001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b346100ca57806003193601126100ca57600260805260206080f35b60009103126100f357565b600080fd5b346100f35760003660031901126100f35760206001600160a01b0360005416604051908152f35b600435906001600160a01b03821682036100f357565b602435906001600160a01b03821682036100f357565b60a435906001600160a01b03821682036100f357565b60c435906001600160a01b03821682036100f357565b346100f35760e03660031901126100f35761019061011f565b610198610135565b906101a161014b565b916101e06101ad610161565b916101b6610558565b6001600160a01b03936101db8582168015159081610325575b81610318575b50610417565b6105b0565b91906101ea6104b4565b6001600160a01b0382168152926001600160a01b0381166020850152613b3d9061027561028361021c602085016104d4565b94848652602086019461061886396040516bffffffffffffffffffffffff19606092831b81166020830190815295831b811660348301523390921b909116604882015242605c82015246607c820152918290609c820190565b03601f198101835282610492565b5190209151906000f5928316803b156100f3576102c7946000809460405197889586948593634239b1c160e01b8552608435906064359060443590600488016104e4565b03925af1918215610313576102f6926102fa575b506040516001600160a01b0390911681529081906020820190565b0390f35b8061030761030d92610479565b806100e8565b386102db565b61054c565b90508684161415386101d5565b848816151591506101cf565b346100f35760203660031901126100f35761034a61011f565b610352610558565b6001600160a01b0380911680156103ac5760009182548273ffffffffffffffffffffffffffffffffffffffff198216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b1561041e57565b60405162461bcd60e51b815260206004820152600d60248201527f496c6c6567616c20746f6b656e000000000000000000000000000000000000006044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161048d57604052565b610463565b90601f8019910116810190811067ffffffffffffffff82111761048d57604052565b604051906040820182811067ffffffffffffffff82111761048d57604052565b906104e26040519283610492565b565b939096949295919560e085019685986000995b60028b1061052c5750506040860152606085015260808401526001600160a01b0391821660a08401521660c090910152909150565b6001906001600160a01b038351168152602080910192019a0199906104f7565b6040513d6000823e3d90fd5b6001600160a01b0360005416330361056c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b038083169082168181146105d25710156105ce5791565b9091565b60405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f414444524553534553000000000000000000000000006044820152606490fdfe60a080604052346100795760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018055610fbd600c5533608052613abe908161007f8239608051818181610e700152611b130152f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816306e9481c14612951575080630b4c7e4d146125315780631405228814612513578063193d983f146124f65780632081066c146124d8578063226840fb14612494578063270271a8146123e357806329357750146123c75780632a426896146123a95780633046f9721461235f57806330c540851461223e578063392e53cd1461221857806339698415146121fa5780633c157e6414611fc6578063405e28f814611fa85780634239b1c114611a955780634903b0d114611a685780634f12fe971461198d5780634fb08c5e1461196a578063524c39011461186e5780635409491a14611850578063556d6e9f1461177557806358680d0b146117575780635b36389c146114c75780635b41b908146111f45780635b5a14671461108e57806362203d74146110615780636d4366b714611045578063715018a614610fde5780637dafa36414610fad57806385f11d1e14610edd5780638da5cb5b14610eb75780639c868ac014610e94578063a6b0a71814610e50578063a97e1c9214610e33578063aaf5eb6814610e10578063ab5ac06114610df4578063b2b8a2c514610dd6578063b4b577ad14610db8578063bb7b8b8014610cec578063bc063e1a14610ccc578063c661065714610c95578063ca8ca15414610c32578063d73792a914610309578063ddca3f4314610c14578063e2e7d26414610bf5578063e3103273146107b0578063e369885314610714578063e3824462146106f6578063e5d9e903146106d8578063ed8e84f31461056b578063edfb78011461054d578063f1dc3cc9146103bd578063f2fde38b1461030e578063f3de036214610309578063f446c1d0146102e6578063fc0c546a146102bf5763fee3f7f91461029f57600080fd5b346102bc57806003193601126102bc576020600b54604051908152f35b80fd5b50346102bc57806003193601126102bc5760206001600160a01b03600d5416604051908152f35b50346102bc57806003193601126102bc576020610301612dee565b604051908152f35b612a48565b50346102bc5760203660031901126102bc576004356001600160a01b0381168082036103b85761033c612e65565b1561034d5761034a906134b5565b80f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b600080fd5b50346102bc576103cc36612a2e565b90916103d6612d98565b6103e560ff6016541615612a68565b6103ef8382612f79565b90928310610508576402540be40061040d61041492600b5490612b00565b0483612be7565b60028410156104f45761042c84600801918254612b29565b90556001600160a01b0380600d5416803b156104f05760405163079cc67960e41b81523360048201526024810184905290869081908390604490829084905af19182156104e35785926104c8575b505061048b91856006015416612ebd565b604051928352602083015260408201527f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a060603392a26001805580f35b6104d39192506129a0565b6104df5782853861047a565b8480fd5b50604051903d90823e3d90fd5b8580fd5b634e487b7160e01b85526032600452602485fd5b60405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820636f696e732072656d6f76656400000000000000006044820152606490fd5b50346102bc57806003193601126102bc576020604051624f1a008152f35b50346102bc5760603660031901126102bc57610586366129d6565b60443580151581036106d45761059a612b56565b6105a2612dee565b906105b5826105b083613400565b61350a565b93855b6002811061066d575050600492916105b06105d292613400565b9360206001600160a01b03600d5416604051948580926318160ddd60e01b82525afa9283156104e3578193610636575b5091602094846106279361030196955060001461062c5761062291612b29565b612b00565b612b36565b9061062291612b29565b9392506020843d602011610665575b81610652602093836129b4565b810103126103b857925191926020610602565b3d9150610645565b60019085156106a6576106946106838285612bc0565b5161068e8387612bc0565b51612be7565b61069e8286612bc0565b525b016105b8565b6106c46106b38285612bc0565b516106be8387612bc0565b51612b29565b6106ce8286612bc0565b526106a0565b8280fd5b50346102bc57806003193601126102bc5760206040516203f4808152f35b50346102bc57806003193601126102bc576020601454604051908152f35b50346102bc57806003193601126102bc5761072d612e65565b60155442101561076b57600160ff1960165416176016557fbe26733c2bf6ff3ea5ba8cfe744422bd49052ff9ed5685c9e81e6f9321dbaddd8180a180f35b60405162461bcd60e51b815260206004820152601160248201527f457863656564656420646561646c696e650000000000000000000000000000006044820152606490fd5b50346102bc5760603660031901126102bc5760046107cd366129d6565b916107d6612d98565b6107e560ff6016541615612a68565b60206001600160a01b03600d5416604051938480926318160ddd60e01b82525afa9182156104e3578192610bc1575b508115610b7c57600a54808060011b0460021481151715610b6857600b549061083b612dee565b610843612b56565b90604051906108518261296e565b825182526020830151602083015261086c816105b085613400565b91865b60028110610b3d5750908161088b826105b08b9c9a9b95613400565b96604051966108998861296e565b60403689378a5b888c8b60028410610a50575050505050506108d094506108ca61062793926105b061062293613400565b84612b29565b9485156109ff57600186018096116109eb576108f0604435871115612bf4565b6001600160a01b03600d5416803b156104f05760405163079cc67960e41b8152336004820152602481018890529086908290604490829084905af180156109e0579086916109cc575b505b6002811061098c57506109747f2b5508378d7e19e0d5fa338419034731416c4f5b219a10379956f764317fd47e94959661098292612b29565b604051938493339785612c68565b0390a26001805580f35b8061099960019287612bc0565b516109a5575b0161093b565b6109c76001600160a01b038260060154166109c08389612bc0565b5190612ebd565b61099f565b6109d5906129a0565b6104df578438610939565b6040513d88823e3d90fd5b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152602360248201527f746f6b656e5f616d6f756e74206d75737420626520677265617465722074686160448201526206e20360ec1b6064820152608490fd5b869850610aec86610ae686610adf8e9f9c9e8a9b9c60019b8f610af39b9a610a9387956106276001600160fe1b039d610a8c89610ace97612bc0565b5190612b00565b9050610a9f8585612bc0565b51811115610b2a57610abc90610ab58686612bc0565b5190612b29565b6402540be4009a8f938c941c16612b00565b04610ad9838b612bc0565b52612bc0565b5195612bc0565b51612b00565b0490612b29565b8160080155610b10610b05828b612bc0565b516106be8389612bc0565b610b1a8288612bc0565b5201908b949291969593966108a0565b610b38906106be8686612bc0565b610abc565b80610b526106b36001938d9895969798612bc0565b610b5c8286612bc0565b5201939291909361086f565b634e487b7160e01b82526011600452602482fd5b60405162461bcd60e51b815260206004820152601660248201527f6465763a207a65726f20746f74616c20737570706c79000000000000000000006044820152606490fd5b9091506020813d602011610bed575b81610bdd602093836129b4565b810103126103b857519038610814565b3d9150610bd0565b50346102bc5760203660031901126102bc576020610301600435612cd5565b50346102bc57806003193601126102bc576020600a54604051908152f35b50346102bc57806003193601126102bc57610c4b612e65565b7f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc2019386040610c76612dee565b80600e5580600f5542601055426011558151908152426020820152a180f35b50346102bc5760203660031901126102bc576004359060028210156102bc5760206001600160a01b03836006015416604051908152f35b50346102bc57806003193601126102bc57602060405164012a05f2008152f35b50346102bc57806003193601126102bc57600490610d19610d0b613161565b610d13612dee565b9061350a565b9060206001600160a01b03600d5416604051948580926318160ddd60e01b82525afa9283156104e3578193610d84575b50670de0b6b3a764000091828102928184041490151715610d705760206103018484612b36565b634e487b7160e01b81526011600452602490fd5b9092506020813d602011610db0575b81610da0602093836129b4565b810103126103b857519138610d49565b3d9150610d93565b50346102bc57806003193601126102bc576020600f54604051908152f35b50346102bc57806003193601126102bc576020600c54604051908152f35b50346102bc57806003193601126102bc576020604051600a8152f35b50346102bc57806003193601126102bc576020604051670de0b6b3a76400008152f35b50346102bc57806003193601126102bc5760206040516108fc8152f35b50346102bc57806003193601126102bc5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346102bc57806003193601126102bc57602060ff601654166040519015158152f35b50346102bc57806003193601126102bc576001600160a01b036020915416604051908152f35b50346102bc57610eec36612a2e565b610ef7929192613161565b8360405193848095946002806000905b828210610f9157505050610f58955083926106be94610f4c84610f468995610f31610f529861296e565b610a8c86610f3f818a612bc0565b5194612bc0565b90612be7565b916131bf565b92612bc0565b600019810193908411610d70576020610301610f7f86610f788787612bc0565b5190612b36565b6402540be400610aec82600a54612b00565b805489526020909801978a965089945060019182019101610f07565b50346102bc5760203660031901126102bc576004356002811015610fda5760209060020154604051908152f35b5080fd5b50346102bc57806003193601126102bc57610ff7612e65565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346102bc57806003193601126102bc57602060405160128152f35b50346102bc5760203660031901126102bc576004356002811015610fda5760209060040154604051908152f35b50346102bc5761109d36612a18565b906110a6612e65565b6012546111b05764012a05f200811161116b576402540be4008211611126576203f480420191824211611112577f351fc5da2fbf480f2225debf3664a4bc90fa9923743aad58b4603f648e931fe09160409184601255816013558060145582519182526020820152a280f35b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b815260206004820152601e60248201527f6465763a2061646d696e206665652065786365656473206d6178696d756d00006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f6465763a206665652065786365656473206d6178696d756d00000000000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f61646d696e5f616374696f6e735f646561646c696e65206d75737420626520306044820152fd5b5060803660031901126102bc576024906004358235604435611214612d98565b61122360ff6016541615612a68565b60ff600d5460a01c16156114b8575b61123a612b56565b9461124486613400565b61124e8582612bc0565b5160028610156114a557816106be86610f52611283969561128a611291968c670de0b6b3a76400009a8b91600401548d612b00565b0490612be7565b838c6131bf565b600019810192908311611492576402540be400916112bd836112b5600a5487612b00565b048095612b29565b928284029380850484149015171561147f57600287101561146c576112e787600401548095612b36565b94606435861061140257600b546112fd91612b00565b048281029281840414901517156113f0575085611365846106be887fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989a9b9c61135b8a61068e6113546109829c9b61136a9b612b36565b9884612bc0565b8d60080155612bc0565b612b29565b84600801556113b9816001600160a01b03808960060154168673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82146000146113de5750506113ae348714612ab4565b866006015416612ebd565b6040519384933397859094939260609260808301968352602083015260408201520152565b6113eb913090339061345f565b6113ae565b634e487b7160e01b8852601160045287fd5b60405162461bcd60e51b815260206004820152602e818501527f45786368616e676520726573756c74656420696e20666577657220636f696e7360448201527f207468616e2065787065637465640000000000000000000000000000000000006064820152608490fd5b50634e487b7160e01b8852603260045287fd5b50634e487b7160e01b8852601160045287fd5b50634e487b7160e01b8652601160045285fd5b634e487b7160e01b875260326004528287fd5b6114c23415612ab4565b611232565b50346102bc5760603660031901126102bc5760043536604312156103b857604051906114f28261296e565b81906064366064116103b8576024926024905b828210611747575050611516612d98565b6001600160a01b0380600d541693604051926318160ddd60e01b845260208460048183995afa93841561173c578894611708575b50908792916040519761155c8961296e565b6040368a376040519761156e8961296e565b6040368a37855b60028110611638575050505050600d5416803b15610fda5760405163079cc67960e41b8152336004820152602481018590529082908290604490829084905af1801561162d57611619575b50506115e7916115cf91612b29565b916115dd6040518095612c40565b6040840190612c40565b60808201527f7c363854ccf79623411f8995b362bce5eddff18c927edc6f5dbbb5e05819a82c60a03392a26001805580f35b611622906129a0565b6104df5784386115c0565b6040513d84823e3d90fd5b8091929394959650600801805490611654896106278c85612b00565b9161165f8487612bc0565b51831061169f579180611685858f6116929561167e8560019a99612b29565b9055612bc0565b5288836006015416612ebd565b01908a9594939291611575565b60405162461bcd60e51b8152600481018690526030818a01527f5769746864726177616c20726573756c74656420696e20666577657220636f6960448201527f6e73207468616e2065787065637465640000000000000000000000000000000081890152608490fd5b9093506020813d602011611734575b81611724602093836129b4565b810103126103b85751923861154a565b3d9150611717565b6040513d8a823e3d90fd5b8135815260209182019101611505565b50346102bc57806003193601126102bc576020601354604051908152f35b50346102bc5761178436612a2e565b928160409392935192836004906000905b60028210611836575050506117a98461296e565b6117b1613161565b9081836117be8383612bc0565b51670de0b6b3a7640000809a6117d4868b612bc0565b516117de91612b00565b046117e891612be7565b906117f2936131bf565b916117fc91612bc0565b519061180791612b29565b6000198101908111610b6857848102948186041490151715610d70576020610301610f7f86610f788787612bc0565b825481528794506001928301929190910190602001611795565b50346102bc57806003193601126102bc576020600e54604051908152f35b50346102bc57806003193601126102bc57611887612e65565b805b600281106118b957507f2c7203581ca666b8c5094c11c03f0b19b3750234a9d281bcbc88a260bcb006de8180a180f35b60068101546001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82036118f457600191504781600801555b01611889565b60405180926370a0823160e01b825230600483015281602460209384935afa90811561195f578491611930575b506001925081600801556118ee565b905082813d8311611958575b61194681836129b4565b810103126103b8576001915138611921565b503d61193c565b6040513d86823e3d90fd5b50346102bc57602061198461197e36612a18565b90612f79565b50604051908152f35b50346102bc57806003193601126102bc576119a6612e65565b6012546119b581421015612c89565b156119fd57806012557fbe12859b636aed607d5230b2cc2711f68d70e51060e6cca1f575ef5d2fcc95d1604060135480600a5560145480600b5582519182526020820152a180f35b60405162461bcd60e51b815260206004820152602660248201527f61646d696e5f616374696f6e735f646561646c696e652073686f756c64206e6f60448201527f74206265203000000000000000000000000000000000000000000000000000006064820152608490fd5b50346102bc5760203660031901126102bc576004356002811015610fda5760209060080154604051908152f35b50346102bc5760e03660031901126102bc5736602312156102bc57604051611abc8161296e565b80366044116106d4576004905b60448210611f885750506001600160a01b0360a4351660a435036103b85760c435906001600160a01b03821682036103b85760165460ff8160081c16611f43576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303611efe57620f424060443511611eb95764012a05f20060643511611e74576402540be40060843511611e2f5761ff00191661010017601655825b6002811015611d7b576001600160a01b03611b8a8284612bc0565b511615611d365773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03611bb88385612bc0565b511603611cac576012600d740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8254161790555b601290818111611c5b5781039081116109eb57604d81116109eb57600a0a808260020155670de0b6b3a764000080828102048203611c4757026004820155600101611b6f565b634e487b7160e01b86526011600452602486fd5b60405162461bcd60e51b8152602060048201526024808201527f546865206d6178696d756d20646563696d616c2063616e6e6f742065786365656044820152630c84062760e31b6064820152608490fd5b600460206001600160a01b03611cc28486612bc0565b51166040519283809263313ce56760e01b82525afa8015611d2b578590611cee575b60ff915016611c01565b506020813d602011611d23575b81611d08602093836129b4565b810103126104df575160ff811681036104df5760ff90611ce4565b3d9150611cfb565b6040513d87823e3d90fd5b60405162461bcd60e51b815260206004820152600c60248201527f5a45524f204164647265737300000000000000000000000000000000000000006044820152606490fd5b50825b60028110611e11575050604435600e55604435600f55606435600a55608435600b55624f1a004201804211611dfd57906001600160a01b03916015551673ffffffffffffffffffffffffffffffffffffffff19600d541617600d55611de1612e65565b6001600160a01b0360a435161561034d5761034a60a4356134b5565b634e487b7160e01b83526011600452602483fd5b60019060206001600160a01b03845116930192816006015501611d7e565b60405162461bcd60e51b815260206004820152601a60248201527f5f61646d696e5f6665652065786365656473206d6178696d756d0000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601460248201527f5f6665652065786365656473206d6178696d756d0000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527f5f412065786365656473206d6178696d756d00000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4f7065726174696f6e733a204e6f7420666163746f72790000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f4f7065726174696f6e733a20416c726561647920696e697469616c697a6564006044820152606490fd5b81356001600160a01b03811681036103b857815260209182019101611ac9565b50346102bc57806003193601126102bc576020601254604051908152f35b50346102bc57611fd536612a18565b90611fde612e65565b60105462015180908181018091116109eb5742106121b55742018042116111125761200b90831015612c89565b612013612dee565b9080158015806121a9575b1561213e578282108015918261210d575b82156120e2575b50501561209d576120977fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c2549383600e5582600f5542601055806011556040519384934291859094939260609260808301968352602083015260408201520152565b0390a180f35b60405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c20706172616d65746572205f6675747572655f4100000000006044820152606490fd5b909150816120f3575b503880612036565b600a83810292508383041417156109eb57821115386120eb565b9150600a8402848104600a148515171561212a578311159161202f565b634e487b7160e01b87526011600452602487fd5b60405162461bcd60e51b815260206004820152602560248201527f5f6675747572655f41206d757374206265206265747765656e203020616e642060448201527f4d41585f410000000000000000000000000000000000000000000000000000006064820152608490fd5b50620f4240821061201e565b60405162461bcd60e51b815260206004820152600f60248201527f646576203a20746f6f206561726c7900000000000000000000000000000000006044820152606490fd5b50346102bc57806003193601126102bc576020604051620f42408152f35b50346102bc57806003193601126102bc57602060ff60165460081c166040519015158152f35b50346102bc57806003193601126102bc57612257612e65565b805b600281101561235b5760006001600160a01b0382600601541673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81146000146122e45747826104f45760088401546122a491612b29565b915b826122b7575b505050600101612259565b6122d057600192916122c891612ebd565b9038806122ac565b634e487b7160e01b84526032600452602484fd5b6040516370a0823160e01b8152306004820152602092908381602481865afa9384156109e0578694612329575b50506123239092846008015490612b29565b916122a6565b9080929450813d8311612354575b61234181836129b4565b810103126106d457519161232338612311565b503d612337565b5080f35b50346102bc57806003193601126102bc57612378612e65565b60ff19601654166016557f061284ffa2814ace135f62907c78a7cff0f070efe7e6a0a42740ea1da2c8bdc88180a180f35b50346102bc57806003193601126102bc576020601554604051908152f35b50346102bc57806003193601126102bc57602060405160028152f35b50346102bc5760203660031901126102bc57600435612400612e65565b6108fc81101580612488575b15612443576020817f535533646ff25874ff322c27a44e684b16c906ef818ae694d70794ec40860e2e92600c55604051908152a180f35b60405162461bcd60e51b815260206004820152600b60248201527f496c6c6567616c206761730000000000000000000000000000000000000000006044820152606490fd5b506159d881111561240c565b50346102bc57806003193601126102bc576124ad612e65565b806012557f1b4883af197c705114490f8d84f9ce30bef6a6199f7b7b649e845577cf0769a18180a180f35b50346102bc57806003193601126102bc576020601054604051908152f35b50346102bc57806003193601126102bc5760206040516159d88152f35b50346102bc57806003193601126102bc576020601154604051908152f35b5060603660031901126102bc57612547366129d6565b90612550612d98565b61255f60ff6016541615612a68565b600d549160ff8360a01c1615612942575b60405161257c8161296e565b6040368237600a5490818060011b046002148215171561111257600b546001600160a01b039560206125ac612dee565b916004604051809a81936318160ddd60e01b8352165afa9687156109e057869761290e575b5085916125dc612b56565b886128f9575b604051916125ef8361296e565b8151835260208201516020840152885b600281106128605750612615846105b085613400565b968588111561281b57878b156127ef5750895b878b888b60028510612798575050505050505050906105b061264992613400565b905b8661277d575050815b612662604435821015612bf4565b845b6002811061272157506001600160a01b03600d5416803b156104f0576040516340c10f1960e01b8152336004820152602481018390529086908290604490829084905af180156109e0576126e4575b50610974610982917f26f55a85081d24974e85c6c00045d0f0453991e95873f52bff0d21af4079a768959697612be7565b610982917f26f55a85081d24974e85c6c00045d0f0453991e95873f52bff0d21af4079a7689596612717610974936129a0565b96955091506126b3565b8061272e60019287612bc0565b5160068201546001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee820361276b5761276591503414612ab4565b01612664565b612778913090339061345f565b612765565b61062761278d8261279394612b29565b88612b00565b612654565b610aec87610ae687610adf818e8c8f6127cc9b610a9360019f9e9c6106276001600160fe1b039d610a8c89610ace97612bc0565b81600801556127de610b05828b612bc0565b6127e88288612bc0565b5201612628565b959450505050865b6002811061280657505061264b565b600190602083519301928160080155016127f7565b60405162461bcd60e51b815260206004820152601a60248201527f4431206d7573742062652067726561746572207468616e2044300000000000006044820152606490fd5b8a1561289a575b8061288961287760019386612bc0565b51612882838d612bc0565b5190612be7565b6128938287612bc0565b52016125ff565b6128a4818a612bc0565b516128675760405162461bcd60e51b815260206004820152602260248201527f496e697469616c206465706f73697420726571756972657320616c6c20636f696044820152616e7360f01b6064820152608490fd5b9250612908826105b085613400565b926125e2565b9096506020813d60201161293a575b8161292a602093836129b4565b810103126104f0575195386125d1565b3d915061291d565b61294c3415612ab4565b612570565b905034610fda5781600319360112610fda57806201518060209252f35b6040810190811067ffffffffffffffff82111761298a57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161298a57604052565b90601f8019910116810190811067ffffffffffffffff82111761298a57604052565b80602312156103b857604051906129ec8261296e565b816044916044116103b8576004905b828210612a085750505090565b81358152602091820191016129fb565b60409060031901126103b8576004359060243590565b60609060031901126103b857600435906024359060443590565b346103b85760003660031901126103b85760206040516402540be4008152f35b15612a6f57565b60405162461bcd60e51b815260206004820152600660248201527f4b696c6c656400000000000000000000000000000000000000000000000000006044820152606490fd5b15612abb57565b60405162461bcd60e51b815260206004820152601560248201527f496e636f6e73697374656e74207175616e7469747900000000000000000000006044820152606490fd5b81810292918115918404141715612b1357565b634e487b7160e01b600052601160045260246000fd5b91908203918211612b1357565b8115612b40570490565b634e487b7160e01b600052601260045260246000fd5b6040519060086000835b60028210612b7657505050612b748261296e565b565b6001602081928554815201930191019091612b60565b6040519060046000835b60028210612baa57505050612b748261296e565b6001602081928554815201930191019091612b96565b906002811015612bd15760051b0190565b634e487b7160e01b600052603260045260246000fd5b91908201809211612b1357565b15612bfb57565b60405162461bcd60e51b815260206004820152601460248201527f536c697070616765207363726577656420796f750000000000000000000000006044820152606490fd5b6000915b60028310612c5157505050565b600190825181526020809101920192019190612c44565b90949392612c8060a0936115dd8460c0810199612c40565b60808201520152565b15612c9057565b60405162461bcd60e51b815260206004820152601660248201527f6465763a20696e73756666696369656e742074696d65000000000000000000006044820152606490fd5b6002811015612bd15760068101546001600160a01b03169073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8203612d1a5760080154612d17915047612b29565b90565b6020602492604051938480926370a0823160e01b82523060048301525afa908115612d8c57600091612d56575b612d1792506008015490612b29565b90506020823d602011612d84575b81612d71602093836129b4565b810103126103b857612d17915190612d47565b3d9150612d64565b6040513d6000823e3d90fd5b600260015414612da9576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b601154600f54814210600014612e6057600e54601054909182811115612e425792612e3c610f4692612e36612e2686612d1798612b29565b612e308342612b29565b90612b00565b92612b29565b90612b36565b92612e3c612e5a92612e36612e26612d179787612b29565b90612b29565b905090565b6001600160a01b03600054163303612e7957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8103612f42575060008080809333600c54f1612ef56136ce565b5015612efd57565b60405162461bcd60e51b815260206004820152601460248201527f524f5345207472616e73666572206661696c65640000000000000000000000006044820152606490fd5b60405163a9059cbb60e01b6020820152336024820152604480820193909352918252612b749190612f746064836129b4565b6138d4565b9190612f83612dee565b90600a54916001600293808060011b0460021481151715612b13576001600160fe1b039060011c169060405194856002906000905b83821061314d5750505090600491612fcf8761296e565b60206001600160a01b03600d5416604051948580926318160ddd60e01b82525afa928315612d8c57600093613119575b5061302961302361300e613161565b9461062761301c898861350a565b809d612b00565b8a612b29565b936130368585898961370e565b996130526130488c6106be8b89612bc0565b610f788a8c612bc0565b9a60005b898582106130a45793505050506130819594925083915061307a81612e5a95612bc0565b519461370e565b6000198101908111612b1357610f7861309d92612d1794612bc0565b8093612b29565b906130e16402540be4006130d686868d868e8e9982146000146130f25761136592610ae661278d969361062793612bc0565b046106be838b612bc0565b6130eb828a612bc0565b5201613056565b925092610627612e5a92610ae68661310d6131149888612bc0565b5196612bc0565b61278d565b9092506020813d602011613145575b81613135602093836129b4565b810103126103b857519138612fff565b3d9150613128565b825481529184019190840190602001612fb8565b6040805161316e8161296e565b369037613179612b8c565b9060005b600281106131885750565b80670de0b6b3a76400006131ad6131a160019487612bc0565b51836008015490612b00565b046131b88286612bc0565b520161317d565b929093919380841415806133f6575b806133ec575b156133a7576131e1612dee565b906131ec828461350a565b8095600092600198858a1b966002928789046002148815171561212a579290918a95949287945b8d84871061332457505050505050509061322c91612b00565b9160021b83810460021484151715612b135761324e610f469161325594612b36565b9386612b36565b928060005b60ff81106132a75760405162461bcd60e51b815260206004820152601160248201527f646f6573206e6f7420636f6e76657267650000000000000000000000000000006044820152606490fd5b816132bb856132b68380612b00565b612be7565b906001600160ff1b0381168103612b13578891612e3c866113658b6132e195871b612be7565b92838181111561330e57906132f591612b29565b11156133045786905b0161325a565b5093505050915090565b61331791612b29565b11156133045786906132fe565b9193959785899a929496989a1460001461337b579061335161334b93928794858094612be7565b9b612b00565b911b91808304871490151715612b13578d9161336c91612b36565b965b0193918b96959391613213565b88841461339f579061335161334b93926133958b88612bc0565b5194858094612be7565b50979661336e565b60405162461bcd60e51b815260206004820152601160248201527f496c6c6567616c20706172616d657465720000000000000000000000000000006044820152606490fd5b50600281106131d4565b50600284106131ce565b906040805161340e8161296e565b369037613419612b8c565b9160005b60028110613429575050565b80670de0b6b3a764000061344d61344260019488612bc0565b51610a8c8487612bc0565b046134588287612bc0565b520161341d565b9290604051926323b872dd60e01b60208501526001600160a01b03809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761298a57612b74926040526138d4565b600054906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b91600091825b600281106136b6575082156136ad578260019482861b9260029080850460021490151715612b1357919460001984018481119390919060005b60ff81106135bc5760405162461bcd60e51b815260206004820152602660248201527f696e76617269616e742063616c63756c6174696f6e20646964206e6f7420636f60448201527f6e766572676500000000000000000000000000000000000000000000000000006064820152608490fd5b8260005b838110613667575080936135d48b8a612b00565b91818d1b92828404861483151715612b1357816106228b956135f593612be7565b92612b13576136049087612b00565b9160039180830292830403612b1357612e3c613621928e94612be7565b938481811115613651579061363591612b29565b11156136445789905b01613549565b5050955050505050915090565b61365a91612b29565b111561364457899061363e565b95909384613677919b939b612b00565b6136818783612bc0565b5190818d1b91808304861490151715612b13578c9161369f91612b36565b9601999199959390956135c0565b50915050600090565b926136c76001916128828688612bc0565b9301613510565b3d15613709573d9067ffffffffffffffff821161298a57604051916136fd601f8201601f1916602001846129b4565b82523d6000602084013e565b606090565b9391909360028086101561388f57849060009160019784891b958587048414861517156109eb5788929185915b85831061382f575050509061374f91612b00565b92811b908482041484151715612b135761324e610f469161376f94612b36565b928060005b60ff81106137c15760405162461bcd60e51b815260206004820152601160248201527f646f6573206e6f7420636f6e76657267650000000000000000000000000000006044820152606490fd5b816137d0856132b68380612b00565b906001600160ff1b0381168103612b13578891612e3c866113658b6137f695871b612be7565b928381811115613819579061380a91612b29565b11156133045786905b01613774565b61382291612b29565b1115613304578690613813565b929591935091908a838514613887575061385e8a6138586138508786612bc0565b518094612be7565b97612b00565b818c1b91808304871490151715612b13578b9161387a91612b36565b935b01909189939261373b565b90959361387c565b60405162461bcd60e51b815260206004820152601460248201527f6465763a20692061626f7665204e5f434f494e530000000000000000000000006044820152606490fd5b6001600160a01b0316906139346040516138ed8161296e565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af161392e6136ce565b916139dd565b8051918215918483156139b9575b50505090501561394f5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312610fda578201519081151582036102bc575080388084613942565b91929015613a3f57508151156139f1575090565b3b156139fa5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015613a525750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510613a98575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350613a7556fea164736f6c6343000818000aa164736f6c6343000818000a",
  "devdoc": {
    "details": "This contract manages the deployment of pool, including sorting the pool tokens",
    "kind": "dev",
    "methods": {
      "createSwapPair(address,address,uint256,uint256,uint256,address,address)": {
        "params": {
          "_A": ": Amplification coefficient multiplied by n * (n - 1)",
          "_LP": ": LP",
          "_admin": ": Admin",
          "_admin_fee": ": Admin fee",
          "_fee": ": Fee to charge for exchanges",
          "_tokenA": ": Addresses of ERC20 conracts .",
          "_tokenB": ": Addresses of ERC20 conracts ."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "stable swap three pool deployer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createSwapPair(address,address,uint256,uint256,uint256,address,address)": {
        "notice": "createSwapPair"
      }
    },
    "notice": "A deployer contract for executing the three pool deloyment",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/stableSwap/StableSwapTwoPoolDeployer.sol:StableSwapTwoPoolDeployer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}