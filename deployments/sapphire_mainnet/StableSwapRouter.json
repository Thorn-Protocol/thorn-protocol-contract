{
  "address": "0x93Be1021366c15506C0c7daad550D2E4Ebc138a3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableSwapFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableSwapInfo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "info",
          "type": "address"
        }
      ],
      "name": "SetStableSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "StableExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROSE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WROSE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "flag",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "exactInputStableSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "flag",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        }
      ],
      "name": "getInputStableSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "flag",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "getOutputStableSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isKill",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "name": "setStableSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwapFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwapInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unKill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x076a54f517ca78ee19f8a9cb596c9a7f3874c6238df26b8abcaafeb87b7bc302",
  "receipt": {
    "to": null,
    "from": "0x48d66a65693dB44d3ca05CBb54e0a806096e2eDA",
    "contractAddress": "0x93Be1021366c15506C0c7daad550D2E4Ebc138a3",
    "transactionIndex": 0,
    "gasUsed": "1232347",
    "logsBloom": "0x
    "blockHash": "0x7c69131fd8db1a689023669e5fd82a71d9117e0fede25a5ad9bf22ed2e1e6f1a",
    "transactionHash": "0x076a54f517ca78ee19f8a9cb596c9a7f3874c6238df26b8abcaafeb87b7bc302",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5884540,
        "transactionHash": "0x076a54f517ca78ee19f8a9cb596c9a7f3874c6238df26b8abcaafeb87b7bc302",
        "address": "0x93Be1021366c15506C0c7daad550D2E4Ebc138a3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000048d66a65693db44d3ca05cbb54e0a806096e2eda"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7c69131fd8db1a689023669e5fd82a71d9117e0fede25a5ad9bf22ed2e1e6f1a"
      }
    ],
    "blockNumber": 5884540,
    "cumulativeGasUsed": "1232347",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x85E778c1Eeaee783E5f304F8cC8d82402490D2DB",
    "0x43BF204Eef9CD53dA4959A4E1b93937a530f54Ac"
  ],
  "numDeployments": 1,
  "solcInputHash": "c8c16bdf34dd16dea0419dbbb136c897",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableSwapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableSwapInfo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"info\",\"type\":\"address\"}],\"name\":\"SetStableSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"StableExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROSE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WROSE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flag\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"exactInputStableSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flag\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"}],\"name\":\"getInputStableSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flag\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"getOutputStableSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isKill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"name\":\"setStableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unKill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract manages stable swap functionality, including executing swaps and caculating swap amounts\",\"kind\":\"dev\",\"methods\":{\"exactInputStableSwap(address[],uint256[],uint256,uint256,address)\":{\"params\":{\"amountIn\":\"Amount of the input token to be exchanged.\",\"amountOutMin\":\"Minimum expected amount of output tokens.\",\"flag\":\"Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\",\"path\":\"Array of token addresses in a stable swap pool.\",\"to\":\"Recipient address to receive the exchanged tokens.\"}},\"getInputStableSwap(address[],uint256[],uint256,uint256)\":{\"params\":{\"amountInMax\":\"Maximum expected amount of output tokens.\",\"amountOut\":\"Amount of the redeemed token .\",\"flag\":\"Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\",\"path\":\"Array of token addresses in a stable swap pool.\"}},\"getOutputStableSwap(address[],uint256[],uint256,uint256)\":{\"params\":{\"amountIn\":\"Amount of the exchanged token .\",\"amountOutMin\":\"Minimum expected amount of output tokens.\",\"flag\":\"Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\",\"path\":\"Array of token addresses in a stable swap pool.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setStableSwap(address,address)\":{\"details\":\"Only callable by contract owner\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Stable Swap Router\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setStableSwap(address,address)\":{\"notice\":\"Set Stable Swap Factory and Info\"}},\"notice\":\"A router contract for excuting stable swaps between different stablecoins pairs through mutiple pools         It allows users to swap stable coins efficiently\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StableSwapRouter.sol\":\"StableSwapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/StableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IStableSwapRouter.sol\\\";\\nimport \\\"./interfaces/IStableSwap.sol\\\";\\nimport \\\"./interfaces/IWROSE.sol\\\";\\nimport \\\"./libraries/SmartRouterHelper.sol\\\";\\nimport \\\"./libraries/Constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title Stable Swap Router\\n/// @notice A router contract for excuting stable swaps between different stablecoins pairs through mutiple pools\\n///         It allows users to swap stable coins efficiently\\n/// @dev    This contract manages stable swap functionality, including executing swaps and caculating swap amounts\\n\\ncontract StableSwapRouter is IStableSwapRouter, Ownable, ReentrancyGuard {\\n    address public WROSE;\\n\\n    address public stableSwapFactory;\\n    address public stableSwapInfo;\\n\\n    address public constant ROSE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    bool public isKill;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n     \\u2551          EVENT               \\u2551\\n     \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    event SetStableSwap(address indexed factory, address indexed info);\\n\\n    event StableExchange(\\n        address indexed buyer,\\n        uint256 amountIn,\\n        address indexed token1,\\n        uint256 amountOut,\\n        address indexed token2,\\n        address recipient\\n    );\\n\\n    receive() external payable {}\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          CONSTRUCTOR         \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    constructor(address _stableSwapFactory, address _stableSwapInfo) {\\n        stableSwapFactory = _stableSwapFactory;\\n        stableSwapInfo = _stableSwapInfo;\\n        isKill = false;\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          ADMIN FUNCTIONS     \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice Set Stable Swap Factory and Info\\n     * @dev Only callable by contract owner\\n     */\\n    function setStableSwap(address _factory, address _info) external onlyOwner {\\n        require(_factory != address(0) && _info != address(0));\\n\\n        stableSwapFactory = _factory;\\n        stableSwapInfo = _info;\\n\\n        emit SetStableSwap(stableSwapFactory, stableSwapInfo);\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n      \\u2551          FUNCTIONS           \\u2551\\n      \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    function _swap(address[] memory path, uint256[] memory flag) private {\\n        uint256 amountIn_;\\n        require(path.length - 1 == flag.length);\\n        for (uint256 i; i < flag.length; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (uint256 k, uint256 j, address swapContract) = SmartRouterHelper\\n                .getStableInfo(stableSwapFactory, input, output, flag[i]);\\n            if (input == ROSE) {\\n                amountIn_ = address(this).balance;\\n                IStableSwap(swapContract).exchange{value: amountIn_}(\\n                    k,\\n                    j,\\n                    amountIn_,\\n                    0\\n                );\\n            }\\n            if (input != ROSE) {\\n                amountIn_ = IERC20(input).balanceOf(address(this));\\n                TransferHelper.safeApprove(input, swapContract, amountIn_);\\n                IStableSwap(swapContract).exchange(k, j, amountIn_, 0);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @param path Array of token addresses in a stable swap pool.\\n     * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\\n     * @param amountIn Amount of the input token to be exchanged.\\n     * @param amountOutMin Minimum expected amount of output tokens.\\n     * @param to Recipient address to receive the exchanged tokens.\\n     */\\n    function exactInputStableSwap(\\n        address[] calldata path,\\n        uint256[] calldata flag,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external payable nonReentrant returns (uint256 amountOut) {\\n        require(!isKill, \\\"Contract is killed\\\");\\n        address srcToken = path[0];\\n        address dstToken = path[path.length - 1];\\n\\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\\n\\n        bool hasAlreadyPaid;\\n        if (amountIn == Constants.CONTRACT_BALANCE) {\\n            hasAlreadyPaid = true;\\n            if (srcToken == ROSE) {\\n                amountIn = address(this).balance;\\n            } else {\\n                amountIn = IERC20(srcToken).balanceOf(address(this));\\n            }\\n        }\\n\\n        if (!hasAlreadyPaid) {\\n            if (srcToken == ROSE) {\\n                require(msg.value == amountIn, \\\"Invalid msg.value\\\");\\n            } else {\\n                pay(srcToken, msg.sender, address(this), amountIn);\\n            }\\n        }\\n        _swap(path, flag);\\n\\n        if (dstToken == ROSE) {\\n            amountOut = address(this).balance;\\n        } else {\\n            amountOut = IERC20(dstToken).balanceOf(address(this));\\n        }\\n\\n        require(amountOut >= amountOutMin);\\n\\n        // find and replace to addresses\\n        if (to == Constants.MSG_SENDER) to = msg.sender;\\n        else if (to == Constants.ADDRESS_THIS) to = address(this);\\n\\n        if (to != address(this)) {\\n            pay(dstToken, address(this), to, amountOut);\\n        }\\n\\n        emit StableExchange(\\n            msg.sender,\\n            amountIn,\\n            path[0],\\n            amountOut,\\n            path[path.length - 1],\\n            to\\n        );\\n    }\\n\\n    /**\\n     * @param path Array of token addresses in a stable swap pool.\\n     * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\\n     * @param amountIn Amount of the exchanged token .\\n     * @param amountOutMin Minimum expected amount of output tokens.\\n     */\\n    function getOutputStableSwap(\\n        address[] calldata path,\\n        uint256[] calldata flag,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) external view returns (uint256 amountOut) {\\n        amountOut = SmartRouterHelper.getStableAmountsOut(\\n            stableSwapFactory,\\n            path,\\n            flag,\\n            amountIn\\n        )[path.length - 1];\\n        require(\\n            amountOut >= amountOutMin,\\n            \\\"The amount of token is smaller than expected\\\"\\n        );\\n        return amountOut;\\n    }\\n\\n    /**\\n     * @param path Array of token addresses in a stable swap pool.\\n     * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\\n     * @param amountOut Amount of the redeemed token .\\n     * @param amountInMax Maximum expected amount of output tokens.\\n     */\\n    function getInputStableSwap(\\n        address[] calldata path,\\n        uint256[] calldata flag,\\n        uint256 amountOut,\\n        uint256 amountInMax\\n    ) external view returns (uint256 amountIn) {\\n        amountIn = SmartRouterHelper.getStableAmountsIn(\\n            stableSwapFactory,\\n            stableSwapInfo,\\n            path,\\n            flag,\\n            amountOut\\n        )[0];\\n        require(\\n            amountIn <= amountInMax,\\n            \\\"The amount of token is greater than expected\\\"\\n        );\\n        return amountIn;\\n    }\\n\\n    /**\\n     * @dev Internal function to facilitate token payments between addresses.\\n     * If the payer is this contract, it directly transfers tokens to the recipient.\\n     * If the payer is not this contract, it transfers tokens from the payer to the recipient.\\n     * @param token The address of the token being transferred.\\n     * @param payer The address of the entity initiating the payment.\\n     * @param recipient The address of the entity receiving the payment.\\n     * @param value The amount of tokens to be transferred.\\n     */\\n    function pay(\\n        address token,\\n        address payer,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        if (payer == address(this)) {\\n            if (token == ROSE) {\\n                TransferHelper.safeTransferROSE(recipient, value);\\n            } else {\\n                TransferHelper.safeTransfer(token, recipient, value);\\n            }\\n        } else {\\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\\n        }\\n    }\\n\\n    function kill() external onlyOwner {\\n        isKill = true;\\n    }\\n\\n    function unKill() external onlyOwner {\\n        isKill = false;\\n    }\\n}\\n\",\"keccak256\":\"0xda37ab7e4e144c77522466643fa5c457807c0593ae17231676514cf7c6af539c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IStableSwap {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the LP token of the two pool\\r\\n     */\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balances of each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function balances(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of coins within the pool\\r\\n     */\\r\\n    function N_COINS() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the exchange rates for each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function RATES(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the address of coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the precision multipliers for each coin in the pool\\r\\n     * @param i Coin index\\r\\n     */\\r\\n    function PRECISION_MUL(uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The pool swap fee.\\r\\n     * The method returns fee as an integer with 1e10 precision.\\r\\n     */\\r\\n    function fee() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The percentage of the swap fee that is taken as an admin fee.\\r\\n     * The method returns an integer with with 1e10 precision.\\r\\n     */\\r\\n    function admin_fee() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Getter for the amplification coefficient of the pool.\\r\\n     * The amplification coefficient A determines a pool\\u2019s tolerance for imbalance between the assets within it.\\r\\n     */\\r\\n    function A() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\\r\\n    * Can get the absolute price by multiplying it with the price of the underlying assets.\\r\\n    * The method returns virtual_price as an integer with 1e18 precision.\\r\\n    */\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\\r\\n     * Returns the expected amount of LP tokens received. \\r\\n     * This calculation accounts for slippage, but not fees.\\r\\n     * @param amounts: Amount of each coin being deposited\\r\\n     * @param deposit: Set True for deposits, False for withdrawals\\r\\n     */\\r\\n    function calc_token_amount(uint256[2] memory amounts, bool deposit) external view returns (uint256);\\r\\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\\r\\n     * @param i: Index of coin to swap from\\r\\n     * @param j: Index of coin to swap to\\r\\n     * @param dx: Amount of coin i to swap\\r\\n     */\\r\\n    function get_dy(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\\r\\n    * @param i Index of coin to swap from\\r\\n    * @param j Index of coin to swap to\\r\\n    * @param dx Amount of coin i to swap\\r\\n    */\\r\\n    function get_dy_underlying(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount received when withdrawing a single coin.\\r\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\r\\n     * @param i: Index value of the coin to withdraw\\r\\n     */\\r\\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit coins into the pool\\r\\n     * @param amounts: Amount of each coin being deposited\\r\\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\\r\\n     */\\r\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Perform an exchange between two coins.\\r\\n     * @param i: Index of coin to swap from\\r\\n     * @param j: Index of coin to swap to\\r\\n     * @param dx: Amount of coin i to swap\\r\\n     * @param min_dy: \\tMinimum amount of j to receive\\r\\n     */\\r\\n    function exchange(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) external payable;\\r\\n\\r\\n     /**\\r\\n     * @notice Withdraw coins from the pool\\r\\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\\r\\n     * @param min_amounts: Minimum amounts of underlying coins to receive\\r\\n     */\\r\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external;\\r\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw coins from the pool in an imbalanced amount\\r\\n     * @param amounts: List of amounts of underlying coins to withdraw\\r\\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\\r\\n     */\\r\\n    function remove_liquidity_imbalance(uint256[2] memory amounts, uint256 max_burn_amount) external;\\r\\n    function remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw a single coin from the pool\\r\\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\\r\\n     * @param i: Index value of the coin to withdraw\\r\\n     * @param min_amount: Minimum amount of coin to receive\\r\\n     */\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 _token_amount,\\r\\n        uint256 i,\\r\\n        uint256 min_amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7d247b3b5a55e627ed93503380327de7e4b508f529a423f39dcf26cc9cb10589\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface IStableSwapFactory {\\r\\n    struct StableSwapPairInfo {\\r\\n        address swapContract;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        address LPContract;\\r\\n    }\\r\\n\\r\\n    struct StableSwapThreePoolPairInfo {\\r\\n        address swapContract;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        address token2;\\r\\n        address LPContract;\\r\\n    }\\r\\n\\r\\n    // solium-disable-next-line mixedcase\\r\\n    function pairLength() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    * @notice Retrieves information of two pool.\\r\\n    * @param _tokenA : Addresses of ERC20 conracts.\\r\\n    * @param _tokenB : Addresses of ERC20 conracts.\\r\\n    */\\r\\n    function getPairInfo(address _tokenA, address _tokenB)\\r\\n    external\\r\\n    view\\r\\n    returns (StableSwapPairInfo memory info);\\r\\n\\r\\n    /**\\r\\n    * @notice Retrieves information of three pool.\\r\\n    * @param _tokenA : Addresses of ERC20 conracts.\\r\\n    * @param _tokenB : Addresses of ERC20 conracts.\\r\\n    */\\r\\n    function getThreePoolPairInfo(address _tokenA, address _tokenB)\\r\\n    external\\r\\n    view\\r\\n    returns (StableSwapThreePoolPairInfo memory info);\\r\\n}\\r\\n\",\"keccak256\":\"0xbb3ba86e1f83e73fa50ce2463f0373041561a553fc49e4e66f2d45e3425416cb\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface IStableSwapInfo {\\r\\n    /**\\r\\n     * @notice get amountIn  with the given amount out  \\r\\n     * @param _swap: Addresses of pool conracts .\\r\\n     * @param i: the token index.\\r\\n     * @param j: the token index \\r\\n     * @param  dy :  the given amount out\\r\\n     * @param max_dx: the maximum of amount in \\r\\n     */\\r\\n    function get_dx(\\r\\n        address _swap,\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dy,\\r\\n        uint256 max_dx\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x5350a0b26b1ee5deb28f45f4c491cc9b2f0a76411db5f32409ba7cb7b257221e\",\"license\":\"MIT\"},\"contracts/interfaces/IStableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via Stable Swap\\r\\ninterface IStableSwapRouter {\\r\\n    /**\\r\\n    * @param path Array of token addresses in a stable swap pool.\\r\\n    * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\\r\\n    * @param amountIn Amount of the input token to be exchanged.\\r\\n    * @param amountOutMin Minimum expected amount of output tokens.\\r\\n    * @param to Recipient address to receive the exchanged tokens.\\r\\n    */\\r\\n    function exactInputStableSwap(\\r\\n        address[] calldata path,\\r\\n        uint256[] calldata flag,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address to\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    /**\\r\\n    * @param path Array of token addresses in a stable swap pool.\\r\\n    * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\\r\\n    * @param amountOut Amount of the input token to be exchanged.\\r\\n    * @param amountInMax Minimum expected amount of output tokens.\\r\\n     */\\r\\n    function getOutputStableSwap(\\r\\n        address[] calldata path,\\r\\n        uint256[] calldata flag,\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax\\r\\n    ) external view returns (uint256 amountIn);\\r\\n}\\r\\n\",\"keccak256\":\"0x547967c659e8bcf3ca861f7478dc3302a2ec14b2ba554ada8f8271e8ac01236b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IWROSE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IWROSE {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x305d2508737ae1d91e6b1bab2b97613bc71c3d19613e850f74fddd199e115740\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.6;\\r\\n\\r\\n/// @title Constant state\\r\\n/// @notice Constant state used by the swap router\\r\\nlibrary Constants {\\r\\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used\\r\\n    uint256 internal constant CONTRACT_BALANCE = 0;\\r\\n\\r\\n    /// @dev Used as a flag for identifying msg.sender, saves gas by sending more 0 bytes\\r\\n    address internal constant MSG_SENDER = address(1);\\r\\n\\r\\n    /// @dev Used as a flag for identifying address(this), saves gas by sending more 0 bytes\\r\\n    address internal constant ADDRESS_THIS = address(2);\\r\\n}\\r\\n\",\"keccak256\":\"0x20fae8f6d42dd35cedd18c3b945f00251da8d396550e33daaca0799cd340233e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\n/// @title Optimized overflow and underflow safe math operations\\r\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\r\\nlibrary LowGasSafeMath {\\r\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\r\\n    /// @param x The augend\\r\\n    /// @param y The addend\\r\\n    /// @return z The sum of x and y\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x - y, reverts if underflows\\r\\n    /// @param x The minuend\\r\\n    /// @param y The subtrahend\\r\\n    /// @return z The difference of x and y\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x * y, reverts if overflows\\r\\n    /// @param x The multiplicand\\r\\n    /// @param y The multiplier\\r\\n    /// @return z The product of x and y\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require(x == 0 || (z = x * y) / x == y);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x + y, reverts if overflows or underflows\\r\\n    /// @param x The augend\\r\\n    /// @param y The addend\\r\\n    /// @return z The sum of x and y\\r\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n        require((z = x + y) >= x == (y >= 0));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x - y, reverts if overflows or underflows\\r\\n    /// @param x The minuend\\r\\n    /// @param y The subtrahend\\r\\n    /// @return z The difference of x and y\\r\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n        require((z = x - y) <= x == (y >= 0));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xace198277a90cabd10817b1226718204a297e3ff70a9937b6a4bea60e7978e1f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SmartRouterHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../interfaces/IStableSwapFactory.sol\\\";\\r\\nimport \\\"../interfaces/IStableSwapInfo.sol\\\";\\r\\nimport \\\"./LowGasSafeMath.sol\\\";\\r\\nimport \\\"./TransferHelper.sol\\\";\\r\\nimport \\\"../interfaces/IStableSwap.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nlibrary SmartRouterHelper {\\r\\n    using LowGasSafeMath for uint256;\\r\\n\\r\\n    /************************************************** Stable **************************************************/\\r\\n\\r\\n    // get the pool info in stable swap\\r\\n    function getStableInfo(\\r\\n        address stableSwapFactory,\\r\\n        address input,\\r\\n        address output,\\r\\n        uint256 flag\\r\\n    ) public view returns (uint256 i, uint256 j, address swapContract) {\\r\\n        if (flag == 2) {\\r\\n            console.log(\\\"flag: %s\\\", flag);\\r\\n            console.log(\\\"input %s\\\", input);\\r\\n            console.log(\\\"output %s\\\", output);\\r\\n            IStableSwapFactory.StableSwapPairInfo\\r\\n                memory info = IStableSwapFactory(stableSwapFactory).getPairInfo(\\r\\n                    input,\\r\\n                    output\\r\\n                );\\r\\n            i = input == info.token0 ? 0 : 1;\\r\\n            j = (i == 0) ? 1 : 0;\\r\\n            swapContract = info.swapContract;\\r\\n        } else if (flag == 3) {\\r\\n            IStableSwapFactory.StableSwapThreePoolPairInfo\\r\\n                memory info = IStableSwapFactory(stableSwapFactory)\\r\\n                    .getThreePoolPairInfo(input, output);\\r\\n\\r\\n            if (input == info.token0) i = 0;\\r\\n            else if (input == info.token1) i = 1;\\r\\n            else if (input == info.token2) i = 2;\\r\\n\\r\\n            if (output == info.token0) j = 0;\\r\\n            else if (output == info.token1) j = 1;\\r\\n            else if (output == info.token2) j = 2;\\r\\n\\r\\n            swapContract = info.swapContract;\\r\\n        }\\r\\n        console.log(\\\"swapContract: %s\\\", swapContract);\\r\\n\\r\\n        require(\\r\\n            swapContract != address(0),\\r\\n            \\\"getStableInfo: invalid pool address\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getStableAmountsIn(\\r\\n        address stableSwapFactory,\\r\\n        address stableSwapInfo,\\r\\n        address[] memory path,\\r\\n        uint256[] memory flag,\\r\\n        uint256 amountOut\\r\\n    ) public view returns (uint256[] memory amounts) {\\r\\n        uint256 length = path.length;\\r\\n        require(length >= 2, \\\"getStableAmountsIn: incorrect length\\\");\\r\\n\\r\\n        amounts = new uint256[](length);\\r\\n        amounts[length - 1] = amountOut;\\r\\n\\r\\n        for (uint256 i = length - 1; i > 0; i--) {\\r\\n            uint256 last = i - 1;\\r\\n            (uint256 k, uint256 j, address swapContract) = getStableInfo(\\r\\n                stableSwapFactory,\\r\\n                path[last],\\r\\n                path[i],\\r\\n                flag[last]\\r\\n            );\\r\\n            amounts[last] = IStableSwapInfo(stableSwapInfo).get_dx(\\r\\n                swapContract,\\r\\n                k,\\r\\n                j,\\r\\n                amounts[i],\\r\\n                type(uint256).max\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getStableAmountsOut(\\r\\n        address stableSwapFactory,\\r\\n        address[] memory path,\\r\\n        uint256[] memory flag,\\r\\n        uint256 amountIn\\r\\n    ) public view returns (uint256[] memory amounts) {\\r\\n        uint256 length = path.length;\\r\\n        require(length >= 2, \\\"getStableAmountsIn: incorrect length\\\");\\r\\n\\r\\n        amounts = new uint256[](length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint256 i = 0; i < length - 1; i++) {\\r\\n            (uint256 k, uint256 j, address swapContract) = getStableInfo(\\r\\n                stableSwapFactory,\\r\\n                path[i],\\r\\n                path[i + 1],\\r\\n                flag[i]\\r\\n            );\\r\\n            amounts[i + 1] = IStableSwap(swapContract).get_dy(k, j, amounts[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdf01d5bbd49c4107bf5f5b386bc553456b9bd8951fa817a6fd6dd98411a50c0c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    /// @notice Transfers tokens from the targeted address to the given destination\\r\\n    /// @notice Errors with 'STF' if transfer fails\\r\\n    /// @param token The contract address of the token to be transferred\\r\\n    /// @param from The originating address from which the tokens will be transferred\\r\\n    /// @param to The destination address of the transfer\\r\\n    /// @param value The amount to be transferred\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) =\\r\\n                            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers tokens from msg.sender to a recipient\\r\\n    /// @dev Errors with ST if transfer fails\\r\\n    /// @param token The contract address of the token which will be transferred\\r\\n    /// @param to The recipient of the transfer\\r\\n    /// @param value The value of the transfer\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\r\\n    }\\r\\n\\r\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\r\\n    /// @dev Errors with 'SA' if transfer fails\\r\\n    /// @param token The contract address of the token to be approved\\r\\n    /// @param to The target of the approval\\r\\n    /// @param value The amount of the given token the target will be allowed to spend\\r\\n    function safeApprove(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ETH to the recipient address\\r\\n    /// @dev Fails with `STE`\\r\\n    /// @param to The destination of the transfer\\r\\n    /// @param value The value to be transferred\\r\\n    function safeTransferROSE(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'STE');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd25f0d427f2a2c1b4a0df0a77d78b0aea6317805db7d1e0b00f3d7d0109bb575\",\"license\":\"GPL-2.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100ce57601f61147e38819003918201601f19168301916001600160401b038311848410176100d35780849260409485528339810103126100ce57610052602061004b836100e9565b92016100e9565b60008054336001600160a01b031980831682178455604051956001600160a01b039594919386939192908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018055169060035416176003551660018060a81b0319600454161760045561138090816100fe8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100ce5756fe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816315b6dd8214610e4857508063191d30ae14610e2057806324dec03414610d8057806331b2cc4514610d5957806341c0e1b514610d1a57806357c7996114610cf3578063715018a614610c8d5780638da5cb5b14610c66578063904174f114610b33578063aa0ad5e1146109fa578063b4554231146101fc578063b85aa7af146101d5578063c7ef47d7146101af5763f2fde38b146100c4573861000f565b346101aa5760203660031901126101aa576100dd610e75565b6100e56110bc565b6001600160a01b0380911690811561013f576000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b600080fd5b346101aa5760003660031901126101aa57602060ff60045460a01c166040519015158152f35b346101aa5760003660031901126101aa5760206001600160a01b0360045416604051908152f35b60a03660031901126101aa5767ffffffffffffffff6004358181116101aa57610229903690600401610e9f565b90916024359081116101aa57610243903690600401610e9f565b92608435926001600160a01b03841684036101aa576002600154146109b5576002600155839060443560ff60045460a01c1661097057811561095a57610288846110a8565b9282600019810111610695576102ab6102a660001985018588611098565b6110a8565b936000604435156108bd575b15610832575b506102c783610f6f565b976102d5604051998a610f4d565b83895260208901368560051b8801116101aa5786905b8560051b8801821061081a57505061030281610f6f565b966103106040519889610f4d565b8188526020880190368360051b8201116101aa5780915b8360051b8201831061080a575050505087516000198101908111610695578651036101aa5760005b86518110156106ab576001600160a01b0361036a828b611084565b511690600181018111610695576001600160a01b0361038c600183018c611084565b51166001600160a01b0360035416906103a5838b611084565b51906040519263b735aecd60e01b8452600484015284602484015260448301526064820152606081608481736ddBFDee4Fe0B1A3415C0cc309A335ad2475811c5af490811561053e57600091600091600091610643575b5073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee85146105d8575b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8503610442575b505050600191500161034f565b6040516370a0823160e01b815230600482015294602086602481845afa95861561053e576000966105a3575b5060405163095ea7b360e01b602082019081526001600160a01b038416602483015260448201889052600092839290919083906104b881606481015b03601f198101835282610f4d565b51925af16104c461131b565b81610574575b501561054a576001600160a01b0381163b156101aa57600092836001600160a01b036084936040519889968795630b68372160e31b8752600487015260248601526044850152826064850152165af191821561053e5760019261052f575b8080610435565b61053890610f23565b8a610528565b6040513d6000823e3d90fd5b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b8051801592508215610589575b50508e6104ca565b61059c925060208091830101910161135b565b8e80610581565b9095506020813d6020116105d0575b816105bf60209383610f4d565b810103126101aa575194600061046e565b3d91506105b2565b476001600160a01b0382163b156101aa57600060849160405192838092630b68372160e31b82528860048301528760248301528060448301528460648301526001600160a01b0387165af1801561053e57610634575b50610419565b61063d90610f23565b8d61062e565b925050506060813d60601161068d575b8161066060609383610f4d565b810103126101aa57805160406020830151920151906001600160a01b03821682036101aa5791908d6103fc565b3d9150610653565b634e487b7160e01b600052601160045260246000fd5b50866001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81036107a4575047945b60643586106101aa576020966001600160a01b039384938085166001036107825750506102a66107289133935b898686169530870361076f575b50505061071c816110a8565b97600019810191611098565b9060405194855286888601526040850152169216907f813e980c7d6e80d4a991ca81010827af0ccda6cc436935598108dfe2df67a31060603392a460018055604051908152f35b61077a923090611114565b8a8981610710565b909290841660021461079c575b610728916102a691610703565b30925061078f565b6020602491604051928380926370a0823160e01b82523060048301525afa90811561053e576000916107d8575b50946106d6565b90506020813d602011610802575b816107f360209383610f4d565b810103126101aa5751876107d1565b3d91506107e6565b8235815260209283019201610327565b6020809161082784610e8b565b8152019101906102eb565b826001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee036108ab5790503403610866575b886102bd565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206d73672e76616c75650000000000000000000000000000006044820152606490fd5b6108b89130903390611114565b610860565b50600192506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee036108ed5747926102b7565b6040516370a0823160e01b81523060048201526020816024816001600160a01b0386165afa90811561053e57600091610928575b50926102b7565b90506020813d602011610952575b8161094360209383610f4d565b810103126101aa57518a610921565b3d9150610936565b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b815260206004820152601260248201527f436f6e7472616374206973206b696c6c656400000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b346101aa576000610a6a610a0d36610ed0565b969493959091926001600160a01b0393610a588560035416956004541696604051998a988998635923cab360e01b8a5260048a0152602489015260a0604489015260a4880191611001565b85810360031901606487015291611047565b9060848301520381736ddBFDee4Fe0B1A3415C0cc309A335ad2475811c5af490811561053e57600091610b10575b5080511561095a5760200151908111610ab657602090604051908152f35b60405162461bcd60e51b815260206004820152602c60248201527f54686520616d6f756e74206f6620746f6b656e2069732067726561746572207460448201526b1a185b88195e1c1958dd195960a21b6064820152608490fd5b610b2d91503d806000833e610b258183610f4d565b810190610f87565b82610a98565b346101aa576000610b86610b98610b4936610ed0565b979493959091926001600160a01b03600354169360405198899687966386be32f960e01b8852600488015260806024880152896084880191611001565b85810360031901604487015291611047565b9060648301520381736ddBFDee4Fe0B1A3415C0cc309A335ad2475811c5af491821561053e57600092610c49575b50600019810190811161069557610bdc91611084565b51908110610bef57602090604051908152f35b60405162461bcd60e51b815260206004820152602c60248201527f54686520616d6f756e74206f6620746f6b656e20697320736d616c6c6572207460448201526b1a185b88195e1c1958dd195960a21b6064820152608490fd5b610c5f9192503d806000833e610b258183610f4d565b9083610bc6565b346101aa5760003660031901126101aa5760206001600160a01b0360005416604051908152f35b346101aa5760003660031901126101aa57610ca66110bc565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101aa5760003660031901126101aa5760206001600160a01b0360035416604051908152f35b346101aa5760003660031901126101aa57610d336110bc565b6004805460ff60a01b191674010000000000000000000000000000000000000000179055005b346101aa5760003660031901126101aa5760206001600160a01b0360025416604051908152f35b346101aa5760403660031901126101aa57610d99610e75565b602435906001600160a01b03908183168093036101aa57610db86110bc565b1680151580610e17575b156101aa578173ffffffffffffffffffffffffffffffffffffffff198281600354161760035560045416176004557f26e41379222b54b0470031bc11852ad23058ffb8983f7cc0e18257d6f7afca9d600080a3005b50811515610dc2565b346101aa5760003660031901126101aa57610e396110bc565b6004805460ff60a01b19169055005b346101aa5760003660031901126101aa578073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60209252f35b600435906001600160a01b03821682036101aa57565b35906001600160a01b03821682036101aa57565b9181601f840112156101aa5782359167ffffffffffffffff83116101aa576020808501948460051b0101116101aa57565b60806003198201126101aa5767ffffffffffffffff916004358381116101aa5782610efd91600401610e9f565b939093926024359182116101aa57610f1791600401610e9f565b90916044359060643590565b67ffffffffffffffff8111610f3757604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610f3757604052565b67ffffffffffffffff8111610f375760051b60200190565b60209081818403126101aa5780519067ffffffffffffffff82116101aa57019180601f840112156101aa578251610fbd81610f6f565b93610fcb6040519586610f4d565b818552838086019260051b8201019283116101aa578301905b828210610ff2575050505090565b81518152908301908301610fe4565b91908082526020809201929160005b82811061101e575050505090565b9091929382806001926001600160a01b0361103889610e8b565b16815201950193929101611010565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116101aa5760209260051b809284830137010190565b805182101561095a5760209160051b010190565b919081101561095a5760051b0190565b356001600160a01b03811681036101aa5790565b6001600160a01b036000541633036110d057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906001600160a01b0390811630810361125c5750811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee036111ad5750604051602081019080821067ffffffffffffffff831117610f37576000938493848094938194604052525af161117961131b565b5015611182575b565b60405162461bcd60e51b815260206004820152600360248201526253544560e81b6044820152606490fd5b60405163a9059cbb60e01b602082019081526001600160a01b039093166024820152604481019390935260009283929083906111ec81606481016104aa565b51925af16111f861131b565b8161122d575b506111805760405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b8051801592508215611242575b5050386111fe565b611255925060208091830101910161135b565b388061123a565b93906040519360208501956323b872dd60e01b8752602486015216604484015260648301526064825260a082019282841067ffffffffffffffff851117610f37576000809493819460405251925af16112b361131b565b816112ec575b50156112c157565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b8051801592508215611301575b5050386112b9565b611314925060208091830101910161135b565b38806112f9565b3d15611356573d9067ffffffffffffffff8211610f37576040519161134a601f8201601f191660200184610f4d565b82523d6000602084013e565b606090565b908160209103126101aa575180151581036101aa579056fea164736f6c6343000818000a",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816315b6dd8214610e4857508063191d30ae14610e2057806324dec03414610d8057806331b2cc4514610d5957806341c0e1b514610d1a57806357c7996114610cf3578063715018a614610c8d5780638da5cb5b14610c66578063904174f114610b33578063aa0ad5e1146109fa578063b4554231146101fc578063b85aa7af146101d5578063c7ef47d7146101af5763f2fde38b146100c4573861000f565b346101aa5760203660031901126101aa576100dd610e75565b6100e56110bc565b6001600160a01b0380911690811561013f576000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b600080fd5b346101aa5760003660031901126101aa57602060ff60045460a01c166040519015158152f35b346101aa5760003660031901126101aa5760206001600160a01b0360045416604051908152f35b60a03660031901126101aa5767ffffffffffffffff6004358181116101aa57610229903690600401610e9f565b90916024359081116101aa57610243903690600401610e9f565b92608435926001600160a01b03841684036101aa576002600154146109b5576002600155839060443560ff60045460a01c1661097057811561095a57610288846110a8565b9282600019810111610695576102ab6102a660001985018588611098565b6110a8565b936000604435156108bd575b15610832575b506102c783610f6f565b976102d5604051998a610f4d565b83895260208901368560051b8801116101aa5786905b8560051b8801821061081a57505061030281610f6f565b966103106040519889610f4d565b8188526020880190368360051b8201116101aa5780915b8360051b8201831061080a575050505087516000198101908111610695578651036101aa5760005b86518110156106ab576001600160a01b0361036a828b611084565b511690600181018111610695576001600160a01b0361038c600183018c611084565b51166001600160a01b0360035416906103a5838b611084565b51906040519263b735aecd60e01b845260048401528460248401526044830152606482015260608160848173__$d75017e8592c813c72614beebf2a3b9fe6$__5af490811561053e57600091600091600091610643575b5073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee85146105d8575b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8503610442575b505050600191500161034f565b6040516370a0823160e01b815230600482015294602086602481845afa95861561053e576000966105a3575b5060405163095ea7b360e01b602082019081526001600160a01b038416602483015260448201889052600092839290919083906104b881606481015b03601f198101835282610f4d565b51925af16104c461131b565b81610574575b501561054a576001600160a01b0381163b156101aa57600092836001600160a01b036084936040519889968795630b68372160e31b8752600487015260248601526044850152826064850152165af191821561053e5760019261052f575b8080610435565b61053890610f23565b8a610528565b6040513d6000823e3d90fd5b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b8051801592508215610589575b50508e6104ca565b61059c925060208091830101910161135b565b8e80610581565b9095506020813d6020116105d0575b816105bf60209383610f4d565b810103126101aa575194600061046e565b3d91506105b2565b476001600160a01b0382163b156101aa57600060849160405192838092630b68372160e31b82528860048301528760248301528060448301528460648301526001600160a01b0387165af1801561053e57610634575b50610419565b61063d90610f23565b8d61062e565b925050506060813d60601161068d575b8161066060609383610f4d565b810103126101aa57805160406020830151920151906001600160a01b03821682036101aa5791908d6103fc565b3d9150610653565b634e487b7160e01b600052601160045260246000fd5b50866001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81036107a4575047945b60643586106101aa576020966001600160a01b039384938085166001036107825750506102a66107289133935b898686169530870361076f575b50505061071c816110a8565b97600019810191611098565b9060405194855286888601526040850152169216907f813e980c7d6e80d4a991ca81010827af0ccda6cc436935598108dfe2df67a31060603392a460018055604051908152f35b61077a923090611114565b8a8981610710565b909290841660021461079c575b610728916102a691610703565b30925061078f565b6020602491604051928380926370a0823160e01b82523060048301525afa90811561053e576000916107d8575b50946106d6565b90506020813d602011610802575b816107f360209383610f4d565b810103126101aa5751876107d1565b3d91506107e6565b8235815260209283019201610327565b6020809161082784610e8b565b8152019101906102eb565b826001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee036108ab5790503403610866575b886102bd565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c6964206d73672e76616c75650000000000000000000000000000006044820152606490fd5b6108b89130903390611114565b610860565b50600192506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee036108ed5747926102b7565b6040516370a0823160e01b81523060048201526020816024816001600160a01b0386165afa90811561053e57600091610928575b50926102b7565b90506020813d602011610952575b8161094360209383610f4d565b810103126101aa57518a610921565b3d9150610936565b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b815260206004820152601260248201527f436f6e7472616374206973206b696c6c656400000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b346101aa576000610a6a610a0d36610ed0565b969493959091926001600160a01b0393610a588560035416956004541696604051998a988998635923cab360e01b8a5260048a0152602489015260a0604489015260a4880191611001565b85810360031901606487015291611047565b906084830152038173__$d75017e8592c813c72614beebf2a3b9fe6$__5af490811561053e57600091610b10575b5080511561095a5760200151908111610ab657602090604051908152f35b60405162461bcd60e51b815260206004820152602c60248201527f54686520616d6f756e74206f6620746f6b656e2069732067726561746572207460448201526b1a185b88195e1c1958dd195960a21b6064820152608490fd5b610b2d91503d806000833e610b258183610f4d565b810190610f87565b82610a98565b346101aa576000610b86610b98610b4936610ed0565b979493959091926001600160a01b03600354169360405198899687966386be32f960e01b8852600488015260806024880152896084880191611001565b85810360031901604487015291611047565b906064830152038173__$d75017e8592c813c72614beebf2a3b9fe6$__5af491821561053e57600092610c49575b50600019810190811161069557610bdc91611084565b51908110610bef57602090604051908152f35b60405162461bcd60e51b815260206004820152602c60248201527f54686520616d6f756e74206f6620746f6b656e20697320736d616c6c6572207460448201526b1a185b88195e1c1958dd195960a21b6064820152608490fd5b610c5f9192503d806000833e610b258183610f4d565b9083610bc6565b346101aa5760003660031901126101aa5760206001600160a01b0360005416604051908152f35b346101aa5760003660031901126101aa57610ca66110bc565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101aa5760003660031901126101aa5760206001600160a01b0360035416604051908152f35b346101aa5760003660031901126101aa57610d336110bc565b6004805460ff60a01b191674010000000000000000000000000000000000000000179055005b346101aa5760003660031901126101aa5760206001600160a01b0360025416604051908152f35b346101aa5760403660031901126101aa57610d99610e75565b602435906001600160a01b03908183168093036101aa57610db86110bc565b1680151580610e17575b156101aa578173ffffffffffffffffffffffffffffffffffffffff198281600354161760035560045416176004557f26e41379222b54b0470031bc11852ad23058ffb8983f7cc0e18257d6f7afca9d600080a3005b50811515610dc2565b346101aa5760003660031901126101aa57610e396110bc565b6004805460ff60a01b19169055005b346101aa5760003660031901126101aa578073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60209252f35b600435906001600160a01b03821682036101aa57565b35906001600160a01b03821682036101aa57565b9181601f840112156101aa5782359167ffffffffffffffff83116101aa576020808501948460051b0101116101aa57565b60806003198201126101aa5767ffffffffffffffff916004358381116101aa5782610efd91600401610e9f565b939093926024359182116101aa57610f1791600401610e9f565b90916044359060643590565b67ffffffffffffffff8111610f3757604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610f3757604052565b67ffffffffffffffff8111610f375760051b60200190565b60209081818403126101aa5780519067ffffffffffffffff82116101aa57019180601f840112156101aa578251610fbd81610f6f565b93610fcb6040519586610f4d565b818552838086019260051b8201019283116101aa578301905b828210610ff2575050505090565b81518152908301908301610fe4565b91908082526020809201929160005b82811061101e575050505090565b9091929382806001926001600160a01b0361103889610e8b565b16815201950193929101611010565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116101aa5760209260051b809284830137010190565b805182101561095a5760209160051b010190565b919081101561095a5760051b0190565b356001600160a01b03811681036101aa5790565b6001600160a01b036000541633036110d057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906001600160a01b0390811630810361125c5750811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee036111ad5750604051602081019080821067ffffffffffffffff831117610f37576000938493848094938194604052525af161117961131b565b5015611182575b565b60405162461bcd60e51b815260206004820152600360248201526253544560e81b6044820152606490fd5b60405163a9059cbb60e01b602082019081526001600160a01b039093166024820152604481019390935260009283929083906111ec81606481016104aa565b51925af16111f861131b565b8161122d575b506111805760405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b8051801592508215611242575b5050386111fe565b611255925060208091830101910161135b565b388061123a565b93906040519360208501956323b872dd60e01b8752602486015216604484015260648301526064825260a082019282841067ffffffffffffffff851117610f37576000809493819460405251925af16112b361131b565b816112ec575b50156112c157565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b8051801592508215611301575b5050386112b9565b611314925060208091830101910161135b565b38806112f9565b3d15611356573d9067ffffffffffffffff8211610f37576040519161134a601f8201601f191660200184610f4d565b82523d6000602084013e565b606090565b908160209103126101aa575180151581036101aa579056fea164736f6c6343000818000a",
  "libraries": {
    "SmartRouterHelper": "0x6ddBFDee4Fe0B1A3415C0cc309A335ad2475811c"
  },
  "devdoc": {
    "details": "This contract manages stable swap functionality, including executing swaps and caculating swap amounts",
    "kind": "dev",
    "methods": {
      "exactInputStableSwap(address[],uint256[],uint256,uint256,address)": {
        "params": {
          "amountIn": "Amount of the input token to be exchanged.",
          "amountOutMin": "Minimum expected amount of output tokens.",
          "flag": "Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.",
          "path": "Array of token addresses in a stable swap pool.",
          "to": "Recipient address to receive the exchanged tokens."
        }
      },
      "getInputStableSwap(address[],uint256[],uint256,uint256)": {
        "params": {
          "amountInMax": "Maximum expected amount of output tokens.",
          "amountOut": "Amount of the redeemed token .",
          "flag": "Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.",
          "path": "Array of token addresses in a stable swap pool."
        }
      },
      "getOutputStableSwap(address[],uint256[],uint256,uint256)": {
        "params": {
          "amountIn": "Amount of the exchanged token .",
          "amountOutMin": "Minimum expected amount of output tokens.",
          "flag": "Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.",
          "path": "Array of token addresses in a stable swap pool."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setStableSwap(address,address)": {
        "details": "Only callable by contract owner"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Stable Swap Router",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setStableSwap(address,address)": {
        "notice": "Set Stable Swap Factory and Info"
      }
    },
    "notice": "A router contract for excuting stable swaps between different stablecoins pairs through mutiple pools         It allows users to swap stable coins efficiently",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StableSwapRouter.sol:StableSwapRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/StableSwapRouter.sol:StableSwapRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 306,
        "contract": "contracts/StableSwapRouter.sol:StableSwapRouter",
        "label": "WROSE",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 308,
        "contract": "contracts/StableSwapRouter.sol:StableSwapRouter",
        "label": "stableSwapFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 310,
        "contract": "contracts/StableSwapRouter.sol:StableSwapRouter",
        "label": "stableSwapInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 315,
        "contract": "contracts/StableSwapRouter.sol:StableSwapRouter",
        "label": "isKill",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}