{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/interfaces/IStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IStableSwap {\r\n\r\n    /**\r\n     * @notice Get the LP token of the two pool\r\n     */\r\n    function token() external view returns (address);\r\n\r\n    /**\r\n     * @notice Get the balances of each coin in the pool\r\n     * @param i Coin index\r\n     */\r\n    function balances(uint256 i) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the number of coins within the pool\r\n     */\r\n    function N_COINS() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the exchange rates for each coin in the pool\r\n     * @param i Coin index\r\n     */\r\n    function RATES(uint256 i) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the address of coin in the pool\r\n     * @param i Coin index\r\n     */\r\n    function coins(uint256 i) external view returns (address);\r\n\r\n    /**\r\n     * @notice Get the precision multipliers for each coin in the pool\r\n     * @param i Coin index\r\n     */\r\n    function PRECISION_MUL(uint256 i) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice The pool swap fee.\r\n     * The method returns fee as an integer with 1e10 precision.\r\n     */\r\n    function fee() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice The percentage of the swap fee that is taken as an admin fee.\r\n     * The method returns an integer with with 1e10 precision.\r\n     */\r\n    function admin_fee() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Getter for the amplification coefficient of the pool.\r\n     * The amplification coefficient A determines a pool’s tolerance for imbalance between the assets within it.\r\n     */\r\n    function A() external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Current virtual price of the pool LP token relative to the underlying pool assets.\r\n    * Can get the absolute price by multiplying it with the price of the underlying assets.\r\n    * The method returns virtual_price as an integer with 1e18 precision.\r\n    */\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculate addition or reduction in token supply from a deposit or withdrawal\r\n     * Returns the expected amount of LP tokens received. \r\n     * This calculation accounts for slippage, but not fees.\r\n     * @param amounts: Amount of each coin being deposited\r\n     * @param deposit: Set True for deposits, False for withdrawals\r\n     */\r\n    function calc_token_amount(uint256[2] memory amounts, bool deposit) external view returns (uint256);\r\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\r\n\r\n\r\n    /**\r\n     * @notice Get the amount of coin j one would receive for swapping dx of coin i.\r\n     * @param i: Index of coin to swap from\r\n     * @param j: Index of coin to swap to\r\n     * @param dx: Amount of coin i to swap\r\n     */\r\n    function get_dy(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Get the amount of coin j one would receive for swapping dx of coin i, in underlying units.\r\n    * @param i Index of coin to swap from\r\n    * @param j Index of coin to swap to\r\n    * @param dx Amount of coin i to swap\r\n    */\r\n    function get_dy_underlying(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculate the amount received when withdrawing a single coin.\r\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\r\n     * @param i: Index value of the coin to withdraw\r\n     */\r\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Deposit coins into the pool\r\n     * @param amounts: Amount of each coin being deposited\r\n     * @param min_mint_amount: Minimum amount of LP tokens to mint from the deposit\r\n     */\r\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\r\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\r\n\r\n    /**\r\n     * @notice Perform an exchange between two coins.\r\n     * @param i: Index of coin to swap from\r\n     * @param j: Index of coin to swap to\r\n     * @param dx: Amount of coin i to swap\r\n     * @param min_dy: \tMinimum amount of j to receive\r\n     */\r\n    function exchange(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external payable;\r\n\r\n     /**\r\n     * @notice Withdraw coins from the pool\r\n     * @param _amount: Quantity of LP tokens to burn in the withdrawal\r\n     * @param min_amounts: Minimum amounts of underlying coins to receive\r\n     */\r\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external;\r\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\r\n\r\n\r\n    /**\r\n     * @notice Withdraw coins from the pool in an imbalanced amount\r\n     * @param amounts: List of amounts of underlying coins to withdraw\r\n     * @param max_burn_amount: Maximum amount of LP token to burn in the withdrawal\r\n     */\r\n    function remove_liquidity_imbalance(uint256[2] memory amounts, uint256 max_burn_amount) external;\r\n    function remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw a single coin from the pool\r\n     * @param _token_amount: Amount of LP tokens to burn in the withdrawal\r\n     * @param i: Index value of the coin to withdraw\r\n     * @param min_amount: Minimum amount of coin to receive\r\n     */\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        uint256 i,\r\n        uint256 min_amount\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IStableSwapDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IStableSwapDeployer {\n\n    /**\n     * @dev onlyOwner\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     * @param _admin: Admin\n     * @param _LP: LP\n     */\n    function createSwapPair(\n        address _tokenA,\n        address _tokenB,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee,\n        address _admin,\n        address _LP\n    ) external returns (address);\n\n    /**\n     * @dev onlyOwner\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _tokenC: Addresses of ERC20 conracts .\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     * @param _admin: Admin\n     * @param _LP: LP\n     */\n    function createSwapPair(\n        address _tokenA,\n        address _tokenB,\n        address _tokenC,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee,\n        address _admin,\n        address _LP\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/IStableSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IStableSwapFactory {\r\n    struct StableSwapPairInfo {\r\n        address swapContract;\r\n        address token0;\r\n        address token1;\r\n        address LPContract;\r\n    }\r\n\r\n    struct StableSwapThreePoolPairInfo {\r\n        address swapContract;\r\n        address token0;\r\n        address token1;\r\n        address token2;\r\n        address LPContract;\r\n    }\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function pairLength() external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Retrieves information of two pool.\r\n    * @param _tokenA : Addresses of ERC20 conracts.\r\n    * @param _tokenB : Addresses of ERC20 conracts.\r\n    */\r\n    function getPairInfo(address _tokenA, address _tokenB)\r\n    external\r\n    view\r\n    returns (StableSwapPairInfo memory info);\r\n\r\n    /**\r\n    * @notice Retrieves information of three pool.\r\n    * @param _tokenA : Addresses of ERC20 conracts.\r\n    * @param _tokenB : Addresses of ERC20 conracts.\r\n    */\r\n    function getThreePoolPairInfo(address _tokenA, address _tokenB)\r\n    external\r\n    view\r\n    returns (StableSwapThreePoolPairInfo memory info);\r\n}\r\n"
    },
    "contracts/interfaces/IStableSwapInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IStableSwapInfo {\r\n    /**\r\n     * @notice get amountIn  with the given amount out  \r\n     * @param _swap: Addresses of pool conracts .\r\n     * @param i: the token index.\r\n     * @param j: the token index \r\n     * @param  dy :  the given amount out\r\n     * @param max_dx: the maximum of amount in \r\n     */\r\n    function get_dx(\r\n        address _swap,\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dy,\r\n        uint256 max_dx\r\n    ) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IStableSwapLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IStableSwapLP {\n    /**\n     * @notice Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Creates new tokens and assigns them to a specified address.\n     * @param _to Address to which the newly created tokens will be assigned.\n     * @param _amount Amount of tokens to be created and assigned.\n     */\n    function mint(address _to, uint256 _amount) external;\n\n    /**\n     * @notice Burns a specific amount of tokens from a specified address.\n     * @param _to Address from which tokens will be burned.\n     * @param _amount Amount of tokens to be burned.\n     */\n    function burnFrom(address _to, uint256 _amount) external;\n\n    /**\n     * @notice Sets a new minter address.\n     * @param _newMinter Address of the new minter.\n     */\n    function setMinter(address _newMinter) external;\n}\n"
    },
    "contracts/interfaces/IStableSwapLPFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IStableSwapLPFactory {\n\n    /**\n     * @notice createSwapLP\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _tokenC: Addresses of ERC20 conracts .\n     * @param _minter: Minter address\n     */\n    function createSwapLP(\n        address _tokenA,\n        address _tokenB,\n        address _tokenC,\n        address _minter\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/IStableSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Stable Swap\r\ninterface IStableSwapRouter {\r\n    /**\r\n    * @param path Array of token addresses in a stable swap pool.\r\n    * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\r\n    * @param amountIn Amount of the input token to be exchanged.\r\n    * @param amountOutMin Minimum expected amount of output tokens.\r\n    * @param to Recipient address to receive the exchanged tokens.\r\n    */\r\n    function exactInputStableSwap(\r\n        address[] calldata path,\r\n        uint256[] calldata flag,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address to\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    /**\r\n    * @param path Array of token addresses in a stable swap pool.\r\n    * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\r\n    * @param amountOut Amount of the input token to be exchanged.\r\n    * @param amountInMax Minimum expected amount of output tokens.\r\n     */\r\n    function getOutputStableSwap(\r\n        address[] calldata path,\r\n        uint256[] calldata flag,\r\n        uint256 amountOut,\r\n        uint256 amountInMax\r\n    ) external view returns (uint256 amountIn);\r\n}\r\n"
    },
    "contracts/interfaces/IWROSE.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWROSE {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/libraries/Constants.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.6;\r\n\r\n/// @title Constant state\r\n/// @notice Constant state used by the swap router\r\nlibrary Constants {\r\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used\r\n    uint256 internal constant CONTRACT_BALANCE = 0;\r\n\r\n    /// @dev Used as a flag for identifying msg.sender, saves gas by sending more 0 bytes\r\n    address internal constant MSG_SENDER = address(1);\r\n\r\n    /// @dev Used as a flag for identifying address(this), saves gas by sending more 0 bytes\r\n    address internal constant ADDRESS_THIS = address(2);\r\n}\r\n"
    },
    "contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.0;\r\n\r\n/// @title Optimized overflow and underflow safe math operations\r\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\r\nlibrary LowGasSafeMath {\r\n    /// @notice Returns x + y, reverts if sum overflows uint256\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    /// @notice Returns x * y, reverts if overflows\r\n    /// @param x The multiplicand\r\n    /// @param y The multiplier\r\n    /// @return z The product of x and y\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(x == 0 || (z = x * y) / x == y);\r\n    }\r\n\r\n    /// @notice Returns x + y, reverts if overflows or underflows\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x + y) >= x == (y >= 0));\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if overflows or underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x - y) <= x == (y >= 0));\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SmartRouterHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"../interfaces/IStableSwapFactory.sol\";\r\nimport \"../interfaces/IStableSwapInfo.sol\";\r\nimport \"./LowGasSafeMath.sol\";\r\nimport \"./TransferHelper.sol\";\r\nimport \"../interfaces/IStableSwap.sol\";\r\n\r\nlibrary SmartRouterHelper {\r\n    using LowGasSafeMath for uint256;\r\n\r\n    /************************************************** Stable **************************************************/\r\n\r\n    // get the pool info in stable swap\r\n    function getStableInfo(\r\n        address stableSwapFactory,\r\n        address input,\r\n        address output,\r\n        uint256 flag\r\n    ) public view returns (uint256 i, uint256 j, address swapContract) {\r\n        if (flag == 2) {\r\n            IStableSwapFactory.StableSwapPairInfo\r\n                memory info = IStableSwapFactory(stableSwapFactory).getPairInfo(\r\n                    input,\r\n                    output\r\n                );\r\n            i = input == info.token0 ? 0 : 1;\r\n            j = (i == 0) ? 1 : 0;\r\n            swapContract = info.swapContract;\r\n        } else if (flag == 3) {\r\n            IStableSwapFactory.StableSwapThreePoolPairInfo\r\n                memory info = IStableSwapFactory(stableSwapFactory)\r\n                    .getThreePoolPairInfo(input, output);\r\n\r\n            if (input == info.token0) i = 0;\r\n            else if (input == info.token1) i = 1;\r\n            else if (input == info.token2) i = 2;\r\n\r\n            if (output == info.token0) j = 0;\r\n            else if (output == info.token1) j = 1;\r\n            else if (output == info.token2) j = 2;\r\n\r\n            swapContract = info.swapContract;\r\n        }\r\n\r\n        require(\r\n            swapContract != address(0),\r\n            \"getStableInfo: invalid pool address\"\r\n        );\r\n    }\r\n\r\n    function getStableAmountsIn(\r\n        address stableSwapFactory,\r\n        address stableSwapInfo,\r\n        address[] memory path,\r\n        uint256[] memory flag,\r\n        uint256 amountOut\r\n    ) public view returns (uint256[] memory amounts) {\r\n        uint256 length = path.length;\r\n        require(length >= 2, \"getStableAmountsIn: incorrect length\");\r\n\r\n        amounts = new uint256[](length);\r\n        amounts[length - 1] = amountOut;\r\n\r\n        for (uint256 i = length - 1; i > 0; i--) {\r\n            uint256 last = i - 1;\r\n            (uint256 k, uint256 j, address swapContract) = getStableInfo(\r\n                stableSwapFactory,\r\n                path[last],\r\n                path[i],\r\n                flag[last]\r\n            );\r\n            amounts[last] = IStableSwapInfo(stableSwapInfo).get_dx(\r\n                swapContract,\r\n                k,\r\n                j,\r\n                amounts[i],\r\n                type(uint256).max\r\n            );\r\n        }\r\n    }\r\n\r\n    function getStableAmountsOut(\r\n        address stableSwapFactory,\r\n        address[] memory path,\r\n        uint256[] memory flag,\r\n        uint256 amountIn\r\n    ) public view returns (uint256[] memory amounts) {\r\n        uint256 length = path.length;\r\n        require(length >= 2, \"getStableAmountsIn: incorrect length\");\r\n\r\n        amounts = new uint256[](length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i = 0; i < length - 1; i++) {\r\n            (uint256 k, uint256 j, address swapContract) = getStableInfo(\r\n                stableSwapFactory,\r\n                path[i],\r\n                path[i + 1],\r\n                flag[i]\r\n            );\r\n            amounts[i + 1] = IStableSwap(swapContract).get_dy(k, j, amounts[i]);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.6.0;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\nlibrary TransferHelper {\r\n    /// @notice Transfers tokens from the targeted address to the given destination\r\n    /// @notice Errors with 'STF' if transfer fails\r\n    /// @param token The contract address of the token to be transferred\r\n    /// @param from The originating address from which the tokens will be transferred\r\n    /// @param to The destination address of the transfer\r\n    /// @param value The amount to be transferred\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n                            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\r\n    }\r\n\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with ST if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\r\n    }\r\n\r\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\r\n    /// @dev Errors with 'SA' if transfer fails\r\n    /// @param token The contract address of the token to be approved\r\n    /// @param to The target of the approval\r\n    /// @param value The amount of the given token the target will be allowed to spend\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\r\n    }\r\n\r\n    /// @notice Transfers ETH to the recipient address\r\n    /// @dev Fails with `STE`\r\n    /// @param to The destination of the transfer\r\n    /// @param value The value to be transferred\r\n    function safeTransferROSE(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'STE');\r\n    }\r\n}\r\n"
    },
    "contracts/stableSwap/StableSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"../interfaces/IStableSwap.sol\";\nimport \"../interfaces/IStableSwapLP.sol\";\nimport \"../interfaces/IStableSwapDeployer.sol\";\nimport \"../interfaces/IStableSwapLPFactory.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @title Stable swap factory\n * @notice A factory contract for creating new pool and providing pool information\n * @dev  This contract manages the creations of stable swap pools and provides access to their information\n */\n\ncontract StableSwapFactory is Initializable {\n    struct StableSwapPairInfo {\n        address swapContract;\n        address token0;\n        address token1;\n        address LPContract;\n    }\n    struct StableSwapThreePoolPairInfo {\n        address swapContract;\n        address token0;\n        address token1;\n        address token2;\n        address LPContract;\n    }\n\n    mapping(address => mapping(address => mapping(address => StableSwapThreePoolPairInfo)))\n        public stableSwapPairInfo;\n    // Query three pool pair infomation by two tokens.\n    mapping(address => mapping(address => StableSwapThreePoolPairInfo)) threePoolInfo;\n    mapping(uint256 => address) public swapPairContract;\n\n    IStableSwapLPFactory public LPFactory;\n    IStableSwapDeployer public SwapTwoPoolDeployer;\n    IStableSwapDeployer public SwapThreePoolDeployer;\n\n    address constant ZEROADDRESS = address(0);\n    address public admin;\n\n    uint256 public pairLength;\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Admin only\");\n        _;\n    }\n\n    /*╔══════════════════════════════╗\n      ║          EVENT               ║\n      ╚══════════════════════════════╝*/\n\n    event CommitOwnership(address admin);\n    event ApplyOwnership(address admin);\n    event NewStableSwapPair(\n        address indexed swapContract,\n        address tokenA,\n        address tokenB,\n        address tokenC,\n        address LP\n    );\n    event AdminshipTransferred(\n        address indexed previousAdminr,\n        address indexed newAdmin\n    );\n\n    /*╔══════════════════════════════╗\n      ║          CONSTRUCTOR         ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice constructor\n     * _LPFactory: LP factory\n     * _SwapTwoPoolDeployer: Swap two pool deployer\n     * _SwapThreePoolDeployer: Swap three pool deployer\n     */\n\n    function initialize(\n        IStableSwapLPFactory _LPFactory,\n        IStableSwapDeployer _SwapTwoPoolDeployer,\n        IStableSwapDeployer _SwapThreePoolDeployer,\n        address _admin\n    ) external initializer {\n        LPFactory = _LPFactory;\n        SwapTwoPoolDeployer = _SwapTwoPoolDeployer;\n        SwapThreePoolDeployer = _SwapThreePoolDeployer;\n        admin = _admin;\n    }\n\n    /*╔══════════════════════════════╗\n      ║          ADMIN FUNCTIONS     ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice createSwapPair\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     */\n\n    function createSwapPair(\n        address _tokenA,\n        address _tokenB,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee\n    ) external onlyAdmin {\n        require(\n            _tokenA != ZEROADDRESS &&\n                _tokenB != ZEROADDRESS &&\n                _tokenA != _tokenB,\n            \"Illegal token\"\n        );\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\n        address LP = LPFactory.createSwapLP(t0, t1, ZEROADDRESS, address(this));\n        address swapContract = SwapTwoPoolDeployer.createSwapPair(\n            t0,\n            t1,\n            _A,\n            _fee,\n            _admin_fee,\n            msg.sender,\n            LP\n        );\n        IStableSwapLP(LP).setMinter(swapContract);\n        addPairInfoInternal(swapContract, t0, t1, ZEROADDRESS, LP);\n    }\n\n    /**\n     * @notice Sorts three token addresses in a consistent order.\n     * @param tokenA: Addresses of ERC20 conracts .\n     * @param tokenB: Addresses of ERC20 conracts .\n     */\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n    }\n\n    /**\n     * @notice Adds information about a stable swap pool pair to the contract's storage.\n     * @param _swapContract: Addresses of stable swap pool contracts .\n     * @param _t0: Addresses of ERC20 conracts .\n     * @param _t1: Addresses of ERC20 conracts .\n     * @param _t2: Addresses of ERC20 conracts .\n     * @param _LP: Addresses of LP token for stable swap pool contracts .\n     */\n    function addPairInfoInternal(\n        address _swapContract,\n        address _t0,\n        address _t1,\n        address _t2,\n        address _LP\n    ) internal {\n        StableSwapThreePoolPairInfo storage info = stableSwapPairInfo[_t0][_t1][\n            _t2\n        ];\n        info.swapContract = _swapContract;\n        info.token0 = _t0;\n        info.token1 = _t1;\n        info.token2 = _t2;\n        info.LPContract = _LP;\n        swapPairContract[pairLength] = _swapContract;\n        pairLength += 1;\n        if (_t2 != ZEROADDRESS) {\n            addThreePoolPairInfo(_t0, _t1, _t2, info);\n        }\n\n        emit NewStableSwapPair(_swapContract, _t0, _t1, _t2, _LP);\n    }\n\n    /**\n     * @notice createThreePoolPair\n     * @param _tokenA: Addresses of ERC20 conracts .\n     * @param _tokenB: Addresses of ERC20 conracts .\n     * @param _tokenC: Addresses of ERC20 conracts .\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\n     * @param _fee: Fee to charge for exchanges\n     * @param _admin_fee: Admin fee\n     */\n    function createThreePoolPair(\n        address _tokenA,\n        address _tokenB,\n        address _tokenC,\n        uint256 _A,\n        uint256 _fee,\n        uint256 _admin_fee\n    ) external onlyAdmin {\n        require(\n            _tokenA != ZEROADDRESS &&\n                _tokenB != ZEROADDRESS &&\n                _tokenC != ZEROADDRESS &&\n                _tokenA != _tokenB &&\n                _tokenA != _tokenC &&\n                _tokenB != _tokenC,\n            \"Illegal token\"\n        );\n        (address t0, address t1, address t2) = sortTokens(\n            _tokenA,\n            _tokenB,\n            _tokenC\n        );\n        address LP = LPFactory.createSwapLP(t0, t1, t2, address(this));\n        address swapContract = SwapThreePoolDeployer.createSwapPair(\n            t0,\n            t1,\n            t2,\n            _A,\n            _fee,\n            _admin_fee,\n            msg.sender,\n            LP\n        );\n        IStableSwapLP(LP).setMinter(swapContract);\n        addPairInfoInternal(swapContract, t0, t1, t2, LP);\n    }\n\n    /**\n     * @notice Adds information about a stable swap contract.\n     * @param _swapContract: Addresses of stable swap contracts.\n     */\n    function addPairInfo(address _swapContract) external onlyAdmin {\n        IStableSwap swap = IStableSwap(_swapContract);\n        uint256 N_COINS = swap.N_COINS();\n        if (N_COINS == 2) {\n            addPairInfoInternal(\n                _swapContract,\n                swap.coins(0),\n                swap.coins(1),\n                ZEROADDRESS,\n                swap.token()\n            );\n        } else if (N_COINS == 3) {\n            addPairInfoInternal(\n                _swapContract,\n                swap.coins(0),\n                swap.coins(1),\n                swap.coins(2),\n                swap.token()\n            );\n        }\n    }\n\n    /**\n     * @notice Sorts three token addresses in a consistent order.\n     * @param tokenA: Addresses of ERC20 conracts .\n     * @param tokenB: Addresses of ERC20 conracts .\n     * @param tokenC: Addresses of ERC20 conracts .\n     */\n    function sortTokens(\n        address tokenA,\n        address tokenB,\n        address tokenC\n    ) internal pure returns (address, address, address) {\n        require(\n            tokenA != tokenB && tokenA != tokenC && tokenB != tokenC,\n            \"IDENTICAL_ADDRESSES\"\n        );\n        address tmp;\n        if (tokenA > tokenB) {\n            tmp = tokenA;\n            tokenA = tokenB;\n            tokenB = tmp;\n        }\n        if (tokenB > tokenC) {\n            tmp = tokenB;\n            tokenB = tokenC;\n            tokenC = tmp;\n            if (tokenA > tokenB) {\n                tmp = tokenA;\n                tokenA = tokenB;\n                tokenB = tmp;\n            }\n        }\n        return (tokenA, tokenB, tokenC);\n    }\n\n    /**\n     * @notice Adds stable swap three pool pair information,facilitating query three pool pair by two tokens .\n     * @param _t0: Addresses of ERC20 conracts .\n     * @param _t1: Addresses of ERC20 conracts .\n     * @param _t2: Addresses of ERC20 conracts .\n     * @param info: Addresses of three pool pair information contracts .\n     */\n    function addThreePoolPairInfo(\n        address _t0,\n        address _t1,\n        address _t2,\n        StableSwapThreePoolPairInfo memory info\n    ) internal {\n        threePoolInfo[_t0][_t1] = info;\n        threePoolInfo[_t0][_t2] = info;\n        threePoolInfo[_t1][_t2] = info;\n    }\n\n    /*╔══════════════════════════════╗\n      ║         VIEW FUNCTIONS       ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice Retrieves information of two pool.\n     * @param _tokenA : Addresses of ERC20 conracts.\n     * @param _tokenB : Addresses of ERC20 conracts.\n     */\n    function getPairInfo(\n        address _tokenA,\n        address _tokenB\n    ) external view returns (StableSwapPairInfo memory info) {\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\n        StableSwapThreePoolPairInfo memory pairInfo = stableSwapPairInfo[t0][\n            t1\n        ][ZEROADDRESS];\n        info.swapContract = pairInfo.swapContract;\n        info.token0 = pairInfo.token0;\n        info.token1 = pairInfo.token1;\n        info.LPContract = pairInfo.LPContract;\n    }\n\n    /**\n     * @notice Retrieves information of three pool by two tokens.\n     * @param _tokenA : Addresses of ERC20 conracts.\n     * @param _tokenB : Addresses of ERC20 conracts.\n     */\n    function getThreePoolPairInfo(\n        address _tokenA,\n        address _tokenB\n    ) external view returns (StableSwapThreePoolPairInfo memory info) {\n        (address t0, address t1) = sortTokens(_tokenA, _tokenB);\n        info = threePoolInfo[t0][t1];\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferAdminship(address newAdmin) public virtual onlyAdmin {\n        require(\n            newAdmin != address(0),\n            \"Ownable: new Admin is the zero address\"\n        );\n        _transferAdminship(newAdmin);\n    }\n\n    /**\n     * @dev Transfers Adminship of the contract to a new account (`newAdmin`).\n     * Internal function without access restriction.\n     */\n    function _transferAdminship(address _admin) internal virtual {\n        address oldAdmin = admin;\n        admin = _admin;\n        emit AdminshipTransferred(oldAdmin, _admin);\n    }\n}\n"
    },
    "contracts/StableSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IStableSwapRouter.sol\";\nimport \"./interfaces/IStableSwap.sol\";\nimport \"./interfaces/IWROSE.sol\";\nimport \"./libraries/SmartRouterHelper.sol\";\nimport \"./libraries/Constants.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/// @title Stable Swap Router\n/// @notice A router contract for excuting stable swaps between different stablecoins pairs through mutiple pools\n///         It allows users to swap stable coins efficiently\n/// @dev    This contract manages stable swap functionality, including executing swaps and caculating swap amounts\n\ncontract StableSwapRouter is IStableSwapRouter, Ownable, ReentrancyGuard {\n    address public WROSE;\n\n    address public stableSwapFactory;\n    address public stableSwapInfo;\n\n    address public constant ROSE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    bool public isKill;\n\n    /*╔══════════════════════════════╗\n     ║          EVENT               ║\n     ╚══════════════════════════════╝*/\n\n    event SetStableSwap(address indexed factory, address indexed info);\n\n    event StableExchange(\n        address indexed buyer,\n        uint256 amountIn,\n        address indexed token1,\n        uint256 amountOut,\n        address indexed token2,\n        address recipient\n    );\n\n    receive() external payable {}\n\n    /*╔══════════════════════════════╗\n      ║          CONSTRUCTOR         ║\n      ╚══════════════════════════════╝*/\n\n    constructor(address _stableSwapFactory, address _stableSwapInfo) {\n        stableSwapFactory = _stableSwapFactory;\n        stableSwapInfo = _stableSwapInfo;\n        isKill = false;\n    }\n\n    /*╔══════════════════════════════╗\n      ║          ADMIN FUNCTIONS     ║\n      ╚══════════════════════════════╝*/\n\n    /**\n     * @notice Set Stable Swap Factory and Info\n     * @dev Only callable by contract owner\n     */\n    function setStableSwap(address _factory, address _info) external onlyOwner {\n        require(_factory != address(0) && _info != address(0));\n\n        stableSwapFactory = _factory;\n        stableSwapInfo = _info;\n\n        emit SetStableSwap(stableSwapFactory, stableSwapInfo);\n    }\n\n    /*╔══════════════════════════════╗\n      ║          FUNCTIONS           ║\n      ╚══════════════════════════════╝*/\n\n    function _swap(address[] memory path, uint256[] memory flag) private {\n        uint256 amountIn_;\n        require(path.length - 1 == flag.length);\n        for (uint256 i; i < flag.length; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (uint256 k, uint256 j, address swapContract) = SmartRouterHelper\n                .getStableInfo(stableSwapFactory, input, output, flag[i]);\n            if (input == ROSE) {\n                amountIn_ = address(this).balance;\n                IStableSwap(swapContract).exchange{value: amountIn_}(\n                    k,\n                    j,\n                    amountIn_,\n                    0\n                );\n            }\n            if (input != ROSE) {\n                amountIn_ = IERC20(input).balanceOf(address(this));\n                TransferHelper.safeApprove(input, swapContract, amountIn_);\n                IStableSwap(swapContract).exchange(k, j, amountIn_, 0);\n            }\n        }\n    }\n\n    /**\n     * @param path Array of token addresses in a stable swap pool.\n     * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\n     * @param amountIn Amount of the input token to be exchanged.\n     * @param amountOutMin Minimum expected amount of output tokens.\n     * @param to Recipient address to receive the exchanged tokens.\n     */\n    function exactInputStableSwap(\n        address[] calldata path,\n        uint256[] calldata flag,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address to\n    ) external payable nonReentrant returns (uint256 amountOut) {\n        require(!isKill, \"Contract is killed\");\n        address srcToken = path[0];\n        address dstToken = path[path.length - 1];\n\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\n\n        bool hasAlreadyPaid;\n        if (amountIn == Constants.CONTRACT_BALANCE) {\n            hasAlreadyPaid = true;\n            if (srcToken == ROSE) {\n                amountIn = address(this).balance;\n            } else {\n                amountIn = IERC20(srcToken).balanceOf(address(this));\n            }\n        }\n\n        if (!hasAlreadyPaid) {\n            if (srcToken == ROSE) {\n                require(msg.value == amountIn, \"Invalid msg.value\");\n            } else {\n                pay(srcToken, msg.sender, address(this), amountIn);\n            }\n        }\n        _swap(path, flag);\n\n        if (dstToken == ROSE) {\n            amountOut = address(this).balance;\n        } else {\n            amountOut = IERC20(dstToken).balanceOf(address(this));\n        }\n\n        require(amountOut >= amountOutMin);\n\n        // find and replace to addresses\n        if (to == Constants.MSG_SENDER) to = msg.sender;\n        else if (to == Constants.ADDRESS_THIS) to = address(this);\n\n        if (to != address(this)) {\n            pay(dstToken, address(this), to, amountOut);\n        }\n\n        emit StableExchange(\n            msg.sender,\n            amountIn,\n            path[0],\n            amountOut,\n            path[path.length - 1],\n            to\n        );\n    }\n\n    /**\n     * @param path Array of token addresses in a stable swap pool.\n     * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\n     * @param amountIn Amount of the exchanged token .\n     * @param amountOutMin Minimum expected amount of output tokens.\n     */\n    function getOutputStableSwap(\n        address[] calldata path,\n        uint256[] calldata flag,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) external view returns (uint256 amountOut) {\n        amountOut = SmartRouterHelper.getStableAmountsOut(\n            stableSwapFactory,\n            path,\n            flag,\n            amountIn\n        )[path.length - 1];\n        require(\n            amountOut >= amountOutMin,\n            \"The amount of token is smaller than expected\"\n        );\n        return amountOut;\n    }\n\n    /**\n     * @param path Array of token addresses in a stable swap pool.\n     * @param flag Flag indicating the pool type. Use '2' for a 2-pool, '3' for a 3-pool.\n     * @param amountOut Amount of the redeemed token .\n     * @param amountInMax Maximum expected amount of output tokens.\n     */\n    function getInputStableSwap(\n        address[] calldata path,\n        uint256[] calldata flag,\n        uint256 amountOut,\n        uint256 amountInMax\n    ) external view returns (uint256 amountIn) {\n        amountIn = SmartRouterHelper.getStableAmountsIn(\n            stableSwapFactory,\n            stableSwapInfo,\n            path,\n            flag,\n            amountOut\n        )[0];\n        require(\n            amountIn <= amountInMax,\n            \"The amount of token is greater than expected\"\n        );\n        return amountIn;\n    }\n\n    /**\n     * @dev Internal function to facilitate token payments between addresses.\n     * If the payer is this contract, it directly transfers tokens to the recipient.\n     * If the payer is not this contract, it transfers tokens from the payer to the recipient.\n     * @param token The address of the token being transferred.\n     * @param payer The address of the entity initiating the payment.\n     * @param recipient The address of the entity receiving the payment.\n     * @param value The amount of tokens to be transferred.\n     */\n    function pay(\n        address token,\n        address payer,\n        address recipient,\n        uint256 value\n    ) internal {\n        if (payer == address(this)) {\n            if (token == ROSE) {\n                TransferHelper.safeTransferROSE(recipient, value);\n            } else {\n                TransferHelper.safeTransfer(token, recipient, value);\n            }\n        } else {\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\n        }\n    }\n\n    function kill() external onlyOwner {\n        isKill = true;\n    }\n\n    function unKill() external onlyOwner {\n        isKill = false;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}